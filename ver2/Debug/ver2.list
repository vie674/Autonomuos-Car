
ver2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071c0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080072d0  080072d0  000082d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074d4  080074d4  0000919c  2**0
                  CONTENTS
  4 .ARM          00000008  080074d4  080074d4  000084d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080074dc  080074dc  0000919c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074dc  080074dc  000084dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080074e0  080074e0  000084e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000019c  20000000  080074e4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001290  2000019c  08007680  0000919c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08007680  0000942c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000919c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013000  00000000  00000000  000091c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f84  00000000  00000000  0001c1c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001f150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e21  00000000  00000000  00020378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000198c6  00000000  00000000  00021199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014741  00000000  00000000  0003aa5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000934f8  00000000  00000000  0004f1a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e2698  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051a4  00000000  00000000  000e26dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000e7880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000019c 	.word	0x2000019c
 800012c:	00000000 	.word	0x00000000
 8000130:	080072b8 	.word	0x080072b8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001a0 	.word	0x200001a0
 800014c:	080072b8 	.word	0x080072b8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001b2:	2afd      	cmp	r2, #253	@ 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	@ 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_frsub>:
 80002c8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002cc:	e002      	b.n	80002d4 <__addsf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_fsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002d4 <__addsf3>:
 80002d4:	0042      	lsls	r2, r0, #1
 80002d6:	bf1f      	itttt	ne
 80002d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002dc:	ea92 0f03 	teqne	r2, r3
 80002e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002e8:	d06a      	beq.n	80003c0 <__addsf3+0xec>
 80002ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002f2:	bfc1      	itttt	gt
 80002f4:	18d2      	addgt	r2, r2, r3
 80002f6:	4041      	eorgt	r1, r0
 80002f8:	4048      	eorgt	r0, r1
 80002fa:	4041      	eorgt	r1, r0
 80002fc:	bfb8      	it	lt
 80002fe:	425b      	neglt	r3, r3
 8000300:	2b19      	cmp	r3, #25
 8000302:	bf88      	it	hi
 8000304:	4770      	bxhi	lr
 8000306:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800030a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800030e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000312:	bf18      	it	ne
 8000314:	4240      	negne	r0, r0
 8000316:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800031a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800031e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4249      	negne	r1, r1
 8000326:	ea92 0f03 	teq	r2, r3
 800032a:	d03f      	beq.n	80003ac <__addsf3+0xd8>
 800032c:	f1a2 0201 	sub.w	r2, r2, #1
 8000330:	fa41 fc03 	asr.w	ip, r1, r3
 8000334:	eb10 000c 	adds.w	r0, r0, ip
 8000338:	f1c3 0320 	rsb	r3, r3, #32
 800033c:	fa01 f103 	lsl.w	r1, r1, r3
 8000340:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000344:	d502      	bpl.n	800034c <__addsf3+0x78>
 8000346:	4249      	negs	r1, r1
 8000348:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800034c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000350:	d313      	bcc.n	800037a <__addsf3+0xa6>
 8000352:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000356:	d306      	bcc.n	8000366 <__addsf3+0x92>
 8000358:	0840      	lsrs	r0, r0, #1
 800035a:	ea4f 0131 	mov.w	r1, r1, rrx
 800035e:	f102 0201 	add.w	r2, r2, #1
 8000362:	2afe      	cmp	r2, #254	@ 0xfe
 8000364:	d251      	bcs.n	800040a <__addsf3+0x136>
 8000366:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800036a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800036e:	bf08      	it	eq
 8000370:	f020 0001 	biceq.w	r0, r0, #1
 8000374:	ea40 0003 	orr.w	r0, r0, r3
 8000378:	4770      	bx	lr
 800037a:	0049      	lsls	r1, r1, #1
 800037c:	eb40 0000 	adc.w	r0, r0, r0
 8000380:	3a01      	subs	r2, #1
 8000382:	bf28      	it	cs
 8000384:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000388:	d2ed      	bcs.n	8000366 <__addsf3+0x92>
 800038a:	fab0 fc80 	clz	ip, r0
 800038e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000392:	ebb2 020c 	subs.w	r2, r2, ip
 8000396:	fa00 f00c 	lsl.w	r0, r0, ip
 800039a:	bfaa      	itet	ge
 800039c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003a0:	4252      	neglt	r2, r2
 80003a2:	4318      	orrge	r0, r3
 80003a4:	bfbc      	itt	lt
 80003a6:	40d0      	lsrlt	r0, r2
 80003a8:	4318      	orrlt	r0, r3
 80003aa:	4770      	bx	lr
 80003ac:	f092 0f00 	teq	r2, #0
 80003b0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003b4:	bf06      	itte	eq
 80003b6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003ba:	3201      	addeq	r2, #1
 80003bc:	3b01      	subne	r3, #1
 80003be:	e7b5      	b.n	800032c <__addsf3+0x58>
 80003c0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003c4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003c8:	bf18      	it	ne
 80003ca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ce:	d021      	beq.n	8000414 <__addsf3+0x140>
 80003d0:	ea92 0f03 	teq	r2, r3
 80003d4:	d004      	beq.n	80003e0 <__addsf3+0x10c>
 80003d6:	f092 0f00 	teq	r2, #0
 80003da:	bf08      	it	eq
 80003dc:	4608      	moveq	r0, r1
 80003de:	4770      	bx	lr
 80003e0:	ea90 0f01 	teq	r0, r1
 80003e4:	bf1c      	itt	ne
 80003e6:	2000      	movne	r0, #0
 80003e8:	4770      	bxne	lr
 80003ea:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003ee:	d104      	bne.n	80003fa <__addsf3+0x126>
 80003f0:	0040      	lsls	r0, r0, #1
 80003f2:	bf28      	it	cs
 80003f4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003f8:	4770      	bx	lr
 80003fa:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003fe:	bf3c      	itt	cc
 8000400:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000404:	4770      	bxcc	lr
 8000406:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800040a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800040e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000412:	4770      	bx	lr
 8000414:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000418:	bf16      	itet	ne
 800041a:	4608      	movne	r0, r1
 800041c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000420:	4601      	movne	r1, r0
 8000422:	0242      	lsls	r2, r0, #9
 8000424:	bf06      	itte	eq
 8000426:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800042a:	ea90 0f01 	teqeq	r0, r1
 800042e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000432:	4770      	bx	lr

08000434 <__aeabi_ui2f>:
 8000434:	f04f 0300 	mov.w	r3, #0
 8000438:	e004      	b.n	8000444 <__aeabi_i2f+0x8>
 800043a:	bf00      	nop

0800043c <__aeabi_i2f>:
 800043c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000440:	bf48      	it	mi
 8000442:	4240      	negmi	r0, r0
 8000444:	ea5f 0c00 	movs.w	ip, r0
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000450:	4601      	mov	r1, r0
 8000452:	f04f 0000 	mov.w	r0, #0
 8000456:	e01c      	b.n	8000492 <__aeabi_l2f+0x2a>

08000458 <__aeabi_ul2f>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	f04f 0300 	mov.w	r3, #0
 8000464:	e00a      	b.n	800047c <__aeabi_l2f+0x14>
 8000466:	bf00      	nop

08000468 <__aeabi_l2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000474:	d502      	bpl.n	800047c <__aeabi_l2f+0x14>
 8000476:	4240      	negs	r0, r0
 8000478:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047c:	ea5f 0c01 	movs.w	ip, r1
 8000480:	bf02      	ittt	eq
 8000482:	4684      	moveq	ip, r0
 8000484:	4601      	moveq	r1, r0
 8000486:	2000      	moveq	r0, #0
 8000488:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800048c:	bf08      	it	eq
 800048e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000492:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000496:	fabc f28c 	clz	r2, ip
 800049a:	3a08      	subs	r2, #8
 800049c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004a0:	db10      	blt.n	80004c4 <__aeabi_l2f+0x5c>
 80004a2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004a6:	4463      	add	r3, ip
 80004a8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004ac:	f1c2 0220 	rsb	r2, r2, #32
 80004b0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004b4:	fa20 f202 	lsr.w	r2, r0, r2
 80004b8:	eb43 0002 	adc.w	r0, r3, r2
 80004bc:	bf08      	it	eq
 80004be:	f020 0001 	biceq.w	r0, r0, #1
 80004c2:	4770      	bx	lr
 80004c4:	f102 0220 	add.w	r2, r2, #32
 80004c8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004cc:	f1c2 0220 	rsb	r2, r2, #32
 80004d0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004d4:	fa21 f202 	lsr.w	r2, r1, r2
 80004d8:	eb43 0002 	adc.w	r0, r3, r2
 80004dc:	bf08      	it	eq
 80004de:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004e2:	4770      	bx	lr

080004e4 <__aeabi_f2uiz>:
 80004e4:	0042      	lsls	r2, r0, #1
 80004e6:	d20e      	bcs.n	8000506 <__aeabi_f2uiz+0x22>
 80004e8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004ec:	d30b      	bcc.n	8000506 <__aeabi_f2uiz+0x22>
 80004ee:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004f2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004f6:	d409      	bmi.n	800050c <__aeabi_f2uiz+0x28>
 80004f8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000500:	fa23 f002 	lsr.w	r0, r3, r2
 8000504:	4770      	bx	lr
 8000506:	f04f 0000 	mov.w	r0, #0
 800050a:	4770      	bx	lr
 800050c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000510:	d101      	bne.n	8000516 <__aeabi_f2uiz+0x32>
 8000512:	0242      	lsls	r2, r0, #9
 8000514:	d102      	bne.n	800051c <__aeabi_f2uiz+0x38>
 8000516:	f04f 30ff 	mov.w	r0, #4294967295
 800051a:	4770      	bx	lr
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop

08000524 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	60f8      	str	r0, [r7, #12]
 800052c:	60b9      	str	r1, [r7, #8]
 800052e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4a06      	ldr	r2, [pc, #24]	@ (800054c <vApplicationGetIdleTaskMemory+0x28>)
 8000534:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	4a05      	ldr	r2, [pc, #20]	@ (8000550 <vApplicationGetIdleTaskMemory+0x2c>)
 800053a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	2280      	movs	r2, #128	@ 0x80
 8000540:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000542:	bf00      	nop
 8000544:	3714      	adds	r7, #20
 8000546:	46bd      	mov	sp, r7
 8000548:	bc80      	pop	{r7}
 800054a:	4770      	bx	lr
 800054c:	200001b8 	.word	0x200001b8
 8000550:	2000020c 	.word	0x2000020c

08000554 <setServoAngle>:
void StartDefaultTask(void const * argument);
void StartTask02(void const * argument);

/* USER CODE BEGIN PFP */
void setServoAngle(uint16_t angle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
    if (angle > 180)
 800055e:	88fb      	ldrh	r3, [r7, #6]
 8000560:	2bb4      	cmp	r3, #180	@ 0xb4
 8000562:	d901      	bls.n	8000568 <setServoAngle+0x14>
    {
        angle = 180;
 8000564:	23b4      	movs	r3, #180	@ 0xb4
 8000566:	80fb      	strh	r3, [r7, #6]
    }
    float servoResolution = (2450.0 - 450.0)/180;
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <setServoAngle+0x50>)
 800056a:	60fb      	str	r3, [r7, #12]
    uint16_t value =  servoResolution*angle +530;
 800056c:	88fb      	ldrh	r3, [r7, #6]
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff64 	bl	800043c <__aeabi_i2f>
 8000574:	4603      	mov	r3, r0
 8000576:	68f9      	ldr	r1, [r7, #12]
 8000578:	4618      	mov	r0, r3
 800057a:	f7ff fdf1 	bl	8000160 <__aeabi_fmul>
 800057e:	4603      	mov	r3, r0
 8000580:	4909      	ldr	r1, [pc, #36]	@ (80005a8 <setServoAngle+0x54>)
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fea6 	bl	80002d4 <__addsf3>
 8000588:	4603      	mov	r3, r0
 800058a:	4618      	mov	r0, r3
 800058c:	f7ff ffaa 	bl	80004e4 <__aeabi_f2uiz>
 8000590:	4603      	mov	r3, r0
 8000592:	817b      	strh	r3, [r7, #10]
    TIM1->CCR1=value;
 8000594:	4a05      	ldr	r2, [pc, #20]	@ (80005ac <setServoAngle+0x58>)
 8000596:	897b      	ldrh	r3, [r7, #10]
 8000598:	6353      	str	r3, [r2, #52]	@ 0x34
}
 800059a:	bf00      	nop
 800059c:	3710      	adds	r7, #16
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	4131c71c 	.word	0x4131c71c
 80005a8:	44048000 	.word	0x44048000
 80005ac:	40012c00 	.word	0x40012c00

080005b0 <setMotorSpeed>:

void setMotorSpeed(uint16_t speed)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
    if (speed > 255)
 80005ba:	88fb      	ldrh	r3, [r7, #6]
 80005bc:	2bff      	cmp	r3, #255	@ 0xff
 80005be:	d901      	bls.n	80005c4 <setMotorSpeed+0x14>
    {
        speed = 255;
 80005c0:	23ff      	movs	r3, #255	@ 0xff
 80005c2:	80fb      	strh	r3, [r7, #6]
    }
    // Giá trị PWM sẽ từ 0 đến 1200
    float motorResolution = (719.0)/255;
 80005c4:	4b0c      	ldr	r3, [pc, #48]	@ (80005f8 <setMotorSpeed+0x48>)
 80005c6:	60fb      	str	r3, [r7, #12]
    uint16_t value = motorResolution*speed  	;
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f7ff ff36 	bl	800043c <__aeabi_i2f>
 80005d0:	4603      	mov	r3, r0
 80005d2:	68f9      	ldr	r1, [r7, #12]
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fdc3 	bl	8000160 <__aeabi_fmul>
 80005da:	4603      	mov	r3, r0
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff ff81 	bl	80004e4 <__aeabi_f2uiz>
 80005e2:	4603      	mov	r3, r0
 80005e4:	817b      	strh	r3, [r7, #10]
    TIM2->CCR1 = value;
 80005e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80005ea:	897b      	ldrh	r3, [r7, #10]
 80005ec:	6353      	str	r3, [r2, #52]	@ 0x34
}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40347474 	.word	0x40347474

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b090      	sub	sp, #64	@ 0x40
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fed9 	bl	80013b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f86d 	bl	80006e4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 fa67 	bl	8000adc <MX_GPIO_Init>
  MX_TIM1_Init();
 800060e:	f000 f8af 	bl	8000770 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000612:	f000 f959 	bl	80008c8 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000616:	f000 fa37 	bl	8000a88 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 800061a:	f000 f9e1 	bl	80009e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061e:	2100      	movs	r1, #0
 8000620:	4825      	ldr	r0, [pc, #148]	@ (80006b8 <main+0xbc>)
 8000622:	f001 ff63 	bl	80024ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000626:	2100      	movs	r1, #0
 8000628:	4824      	ldr	r0, [pc, #144]	@ (80006bc <main+0xc0>)
 800062a:	f001 ff5f 	bl	80024ec <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800062e:	213c      	movs	r1, #60	@ 0x3c
 8000630:	4823      	ldr	r0, [pc, #140]	@ (80006c0 <main+0xc4>)
 8000632:	f002 f89f 	bl	8002774 <HAL_TIM_Encoder_Start>
  /* USER CODE END 2 */

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */
  HAL_UART_Receive_IT (&huart2, (uint8_t *)&rx_Buffer[rx_index], 1);
 8000636:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <main+0xc8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	4b22      	ldr	r3, [pc, #136]	@ (80006c8 <main+0xcc>)
 8000640:	4413      	add	r3, r2
 8000642:	2201      	movs	r2, #1
 8000644:	4619      	mov	r1, r3
 8000646:	4821      	ldr	r0, [pc, #132]	@ (80006cc <main+0xd0>)
 8000648:	f003 f80c 	bl	8003664 <HAL_UART_Receive_IT>
  /* Create the semaphores(s) */
  /* definition and creation of myBinarySem01 */
  osSemaphoreDef(myBinarySem01);
 800064c:	2300      	movs	r3, #0
 800064e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000650:	2300      	movs	r3, #0
 8000652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  myBinarySem01Handle = osSemaphoreCreate(osSemaphore(myBinarySem01), 1);
 8000654:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000658:	2101      	movs	r1, #1
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fe21 	bl	80042a2 <osSemaphoreCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a1b      	ldr	r2, [pc, #108]	@ (80006d0 <main+0xd4>)
 8000664:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of ControlTask */
  osThreadDef(ControlTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000666:	4b1b      	ldr	r3, [pc, #108]	@ (80006d4 <main+0xd8>)
 8000668:	f107 041c 	add.w	r4, r7, #28
 800066c:	461d      	mov	r5, r3
 800066e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000670:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000672:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000676:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
 800067a:	f107 031c 	add.w	r3, r7, #28
 800067e:	2100      	movs	r1, #0
 8000680:	4618      	mov	r0, r3
 8000682:	f003 fdae 	bl	80041e2 <osThreadCreate>
 8000686:	4603      	mov	r3, r0
 8000688:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <main+0xdc>)
 800068a:	6013      	str	r3, [r2, #0]

  /* definition and creation of EncoderTask */
  osThreadDef(EncoderTask, StartTask02, osPriorityNormal, 0, 256);
 800068c:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <main+0xe0>)
 800068e:	463c      	mov	r4, r7
 8000690:	461d      	mov	r5, r3
 8000692:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000694:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000696:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800069a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  EncoderTaskHandle = osThreadCreate(osThread(EncoderTask), NULL);
 800069e:	463b      	mov	r3, r7
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fd9d 	bl	80041e2 <osThreadCreate>
 80006a8:	4603      	mov	r3, r0
 80006aa:	4a0d      	ldr	r2, [pc, #52]	@ (80006e0 <main+0xe4>)
 80006ac:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006ae:	f003 fd91 	bl	80041d4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006b2:	bf00      	nop
 80006b4:	e7fd      	b.n	80006b2 <main+0xb6>
 80006b6:	bf00      	nop
 80006b8:	2000040c 	.word	0x2000040c
 80006bc:	20000454 	.word	0x20000454
 80006c0:	2000049c 	.word	0x2000049c
 80006c4:	2000053e 	.word	0x2000053e
 80006c8:	20000020 	.word	0x20000020
 80006cc:	200004e4 	.word	0x200004e4
 80006d0:	20000534 	.word	0x20000534
 80006d4:	080072dc 	.word	0x080072dc
 80006d8:	2000052c 	.word	0x2000052c
 80006dc:	08007304 	.word	0x08007304
 80006e0:	20000530 	.word	0x20000530

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b090      	sub	sp, #64	@ 0x40
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	2228      	movs	r2, #40	@ 0x28
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 f950 	bl	8006998 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000706:	2301      	movs	r3, #1
 8000708:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800070e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000718:	2302      	movs	r3, #2
 800071a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000720:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000722:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4618      	mov	r0, r3
 800072e:	f001 f9a3 	bl	8001a78 <HAL_RCC_OscConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000738:	f000 fbb2 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073c:	230f      	movs	r3, #15
 800073e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000740:	2302      	movs	r3, #2
 8000742:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000744:	2300      	movs	r3, #0
 8000746:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000748:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800074c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074e:	2300      	movs	r3, #0
 8000750:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2102      	movs	r1, #2
 8000756:	4618      	mov	r0, r3
 8000758:	f001 fc10 	bl	8001f7c <HAL_RCC_ClockConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000762:	f000 fb9d 	bl	8000ea0 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3740      	adds	r7, #64	@ 0x40
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
	...

08000770 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b096      	sub	sp, #88	@ 0x58
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */
  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000776:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000784:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]
 800079e:	615a      	str	r2, [r3, #20]
 80007a0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a2:	1d3b      	adds	r3, r7, #4
 80007a4:	2220      	movs	r2, #32
 80007a6:	2100      	movs	r1, #0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f006 f8f5 	bl	8006998 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */
  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ae:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007b0:	4a44      	ldr	r2, [pc, #272]	@ (80008c4 <MX_TIM1_Init+0x154>)
 80007b2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80007b4:	4b42      	ldr	r3, [pc, #264]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007b6:	2247      	movs	r2, #71	@ 0x47
 80007b8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007bc:	2200      	movs	r2, #0
 80007be:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80007c0:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007c2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80007c6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c8:	4b3d      	ldr	r3, [pc, #244]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ce:	4b3c      	ldr	r3, [pc, #240]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007d4:	4b3a      	ldr	r3, [pc, #232]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007da:	4839      	ldr	r0, [pc, #228]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007dc:	f001 fd8c 	bl	80022f8 <HAL_TIM_Base_Init>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80007e6:	f000 fb5b 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007f0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007f4:	4619      	mov	r1, r3
 80007f6:	4832      	ldr	r0, [pc, #200]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80007f8:	f002 f9fc 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000802:	f000 fb4d 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000806:	482e      	ldr	r0, [pc, #184]	@ (80008c0 <MX_TIM1_Init+0x150>)
 8000808:	f001 fe18 	bl	800243c <HAL_TIM_PWM_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000812:	f000 fb45 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000816:	2300      	movs	r3, #0
 8000818:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081a:	2300      	movs	r3, #0
 800081c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800081e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000822:	4619      	mov	r1, r3
 8000824:	4826      	ldr	r0, [pc, #152]	@ (80008c0 <MX_TIM1_Init+0x150>)
 8000826:	f002 fd81 	bl	800332c <HAL_TIMEx_MasterConfigSynchronization>
 800082a:	4603      	mov	r3, r0
 800082c:	2b00      	cmp	r3, #0
 800082e:	d001      	beq.n	8000834 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000830:	f000 fb36 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000834:	2360      	movs	r3, #96	@ 0x60
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800083c:	2300      	movs	r3, #0
 800083e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000848:	2300      	movs	r3, #0
 800084a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000850:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000854:	2200      	movs	r2, #0
 8000856:	4619      	mov	r1, r3
 8000858:	4819      	ldr	r0, [pc, #100]	@ (80008c0 <MX_TIM1_Init+0x150>)
 800085a:	f002 f909 	bl	8002a70 <HAL_TIM_PWM_ConfigChannel>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000864:	f000 fb1c 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000868:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800086c:	2204      	movs	r2, #4
 800086e:	4619      	mov	r1, r3
 8000870:	4813      	ldr	r0, [pc, #76]	@ (80008c0 <MX_TIM1_Init+0x150>)
 8000872:	f002 f8fd 	bl	8002a70 <HAL_TIM_PWM_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800087c:	f000 fb10 	bl	8000ea0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800088c:	2300      	movs	r3, #0
 800088e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000890:	2300      	movs	r3, #0
 8000892:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000894:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000898:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800089e:	1d3b      	adds	r3, r7, #4
 80008a0:	4619      	mov	r1, r3
 80008a2:	4807      	ldr	r0, [pc, #28]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80008a4:	f002 fda0 	bl	80033e8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80008ae:	f000 faf7 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008b2:	4803      	ldr	r0, [pc, #12]	@ (80008c0 <MX_TIM1_Init+0x150>)
 80008b4:	f000 fba0 	bl	8000ff8 <HAL_TIM_MspPostInit>

}
 80008b8:	bf00      	nop
 80008ba:	3758      	adds	r7, #88	@ 0x58
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000040c 	.word	0x2000040c
 80008c4:	40012c00 	.word	0x40012c00

080008c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08e      	sub	sp, #56	@ 0x38
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */
  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008e6:	1d3b      	adds	r3, r7, #4
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]
 80008f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */
  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008f8:	4b38      	ldr	r3, [pc, #224]	@ (80009dc <MX_TIM2_Init+0x114>)
 80008fa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8000900:	4b36      	ldr	r3, [pc, #216]	@ (80009dc <MX_TIM2_Init+0x114>)
 8000902:	2201      	movs	r2, #1
 8000904:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000906:	4b35      	ldr	r3, [pc, #212]	@ (80009dc <MX_TIM2_Init+0x114>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 719;
 800090c:	4b33      	ldr	r3, [pc, #204]	@ (80009dc <MX_TIM2_Init+0x114>)
 800090e:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000912:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b31      	ldr	r3, [pc, #196]	@ (80009dc <MX_TIM2_Init+0x114>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b30      	ldr	r3, [pc, #192]	@ (80009dc <MX_TIM2_Init+0x114>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000920:	482e      	ldr	r0, [pc, #184]	@ (80009dc <MX_TIM2_Init+0x114>)
 8000922:	f001 fce9 	bl	80022f8 <HAL_TIM_Base_Init>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800092c:	f000 fab8 	bl	8000ea0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000936:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800093a:	4619      	mov	r1, r3
 800093c:	4827      	ldr	r0, [pc, #156]	@ (80009dc <MX_TIM2_Init+0x114>)
 800093e:	f002 f959 	bl	8002bf4 <HAL_TIM_ConfigClockSource>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000948:	f000 faaa 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800094c:	4823      	ldr	r0, [pc, #140]	@ (80009dc <MX_TIM2_Init+0x114>)
 800094e:	f001 fd75 	bl	800243c <HAL_TIM_PWM_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000958:	f000 faa2 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000964:	f107 0320 	add.w	r3, r7, #32
 8000968:	4619      	mov	r1, r3
 800096a:	481c      	ldr	r0, [pc, #112]	@ (80009dc <MX_TIM2_Init+0x114>)
 800096c:	f002 fcde 	bl	800332c <HAL_TIMEx_MasterConfigSynchronization>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000976:	f000 fa93 	bl	8000ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800097a:	2360      	movs	r3, #96	@ 0x60
 800097c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	4619      	mov	r1, r3
 8000990:	4812      	ldr	r0, [pc, #72]	@ (80009dc <MX_TIM2_Init+0x114>)
 8000992:	f002 f86d 	bl	8002a70 <HAL_TIM_PWM_ConfigChannel>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800099c:	f000 fa80 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009a0:	1d3b      	adds	r3, r7, #4
 80009a2:	2204      	movs	r2, #4
 80009a4:	4619      	mov	r1, r3
 80009a6:	480d      	ldr	r0, [pc, #52]	@ (80009dc <MX_TIM2_Init+0x114>)
 80009a8:	f002 f862 	bl	8002a70 <HAL_TIM_PWM_ConfigChannel>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 80009b2:	f000 fa75 	bl	8000ea0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	2208      	movs	r2, #8
 80009ba:	4619      	mov	r1, r3
 80009bc:	4807      	ldr	r0, [pc, #28]	@ (80009dc <MX_TIM2_Init+0x114>)
 80009be:	f002 f857 	bl	8002a70 <HAL_TIM_PWM_ConfigChannel>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 80009c8:	f000 fa6a 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */
  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009cc:	4803      	ldr	r0, [pc, #12]	@ (80009dc <MX_TIM2_Init+0x114>)
 80009ce:	f000 fb13 	bl	8000ff8 <HAL_TIM_MspPostInit>

}
 80009d2:	bf00      	nop
 80009d4:	3738      	adds	r7, #56	@ 0x38
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000454 	.word	0x20000454

080009e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08c      	sub	sp, #48	@ 0x30
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	2224      	movs	r2, #36	@ 0x24
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f005 ffd2 	bl	8006998 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */
  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80009fc:	4b20      	ldr	r3, [pc, #128]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 80009fe:	4a21      	ldr	r2, [pc, #132]	@ (8000a84 <MX_TIM3_Init+0xa4>)
 8000a00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000a02:	4b1f      	ldr	r3, [pc, #124]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a08:	4b1d      	ldr	r3, [pc, #116]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a1c:	4b18      	ldr	r3, [pc, #96]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000a22:	2303      	movs	r3, #3
 8000a24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8000a36:	2302      	movs	r3, #2
 8000a38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000a46:	f107 030c 	add.w	r3, r7, #12
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a4e:	f001 fdef 	bl	8002630 <HAL_TIM_Encoder_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d001      	beq.n	8000a5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000a58:	f000 fa22 	bl	8000ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000a64:	1d3b      	adds	r3, r7, #4
 8000a66:	4619      	mov	r1, r3
 8000a68:	4805      	ldr	r0, [pc, #20]	@ (8000a80 <MX_TIM3_Init+0xa0>)
 8000a6a:	f002 fc5f 	bl	800332c <HAL_TIMEx_MasterConfigSynchronization>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000a74:	f000 fa14 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */
  /* USER CODE END TIM3_Init 2 */

}
 8000a78:	bf00      	nop
 8000a7a:	3730      	adds	r7, #48	@ 0x30
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	2000049c 	.word	0x2000049c
 8000a84:	40000400 	.word	0x40000400

08000a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a8c:	4b11      	ldr	r3, [pc, #68]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a8e:	4a12      	ldr	r2, [pc, #72]	@ (8000ad8 <MX_USART2_UART_Init+0x50>)
 8000a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aac:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aae:	220c      	movs	r2, #12
 8000ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	f002 fcf5 	bl	80034ae <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aca:	f000 f9e9 	bl	8000ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200004e4 	.word	0x200004e4
 8000ad8:	40004400 	.word	0x40004400

08000adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
 8000aea:	605a      	str	r2, [r3, #4]
 8000aec:	609a      	str	r2, [r3, #8]
 8000aee:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af0:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000af2:	699b      	ldr	r3, [r3, #24]
 8000af4:	4a22      	ldr	r2, [pc, #136]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000af6:	f043 0310 	orr.w	r3, r3, #16
 8000afa:	6193      	str	r3, [r2, #24]
 8000afc:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f003 0310 	and.w	r3, r3, #16
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b08:	4b1d      	ldr	r3, [pc, #116]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	4a1c      	ldr	r2, [pc, #112]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b0e:	f043 0320 	orr.w	r3, r3, #32
 8000b12:	6193      	str	r3, [r2, #24]
 8000b14:	4b1a      	ldr	r3, [pc, #104]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	f003 0320 	and.w	r3, r3, #32
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b17      	ldr	r3, [pc, #92]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	4a16      	ldr	r2, [pc, #88]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b26:	f043 0304 	orr.w	r3, r3, #4
 8000b2a:	6193      	str	r3, [r2, #24]
 8000b2c:	4b14      	ldr	r3, [pc, #80]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b2e:	699b      	ldr	r3, [r3, #24]
 8000b30:	f003 0304 	and.w	r3, r3, #4
 8000b34:	607b      	str	r3, [r7, #4]
 8000b36:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b38:	4b11      	ldr	r3, [pc, #68]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b3a:	699b      	ldr	r3, [r3, #24]
 8000b3c:	4a10      	ldr	r2, [pc, #64]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b3e:	f043 0308 	orr.w	r3, r3, #8
 8000b42:	6193      	str	r3, [r2, #24]
 8000b44:	4b0e      	ldr	r3, [pc, #56]	@ (8000b80 <MX_GPIO_Init+0xa4>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	f003 0308 	and.w	r3, r3, #8
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000b50:	2200      	movs	r2, #0
 8000b52:	2130      	movs	r1, #48	@ 0x30
 8000b54:	480b      	ldr	r0, [pc, #44]	@ (8000b84 <MX_GPIO_Init+0xa8>)
 8000b56:	f000 ff77 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000b5a:	2330      	movs	r3, #48	@ 0x30
 8000b5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b66:	2303      	movs	r3, #3
 8000b68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b6a:	f107 0310 	add.w	r3, r7, #16
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <MX_GPIO_Init+0xa8>)
 8000b72:	f000 fde5 	bl	8001740 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b76:	bf00      	nop
 8000b78:	3720      	adds	r7, #32
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40021000 	.word	0x40021000
 8000b84:	40010c00 	.word	0x40010c00

08000b88 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8000b90:	4b58      	ldr	r3, [pc, #352]	@ (8000cf4 <StartDefaultTask+0x16c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f04f 31ff 	mov.w	r1, #4294967295
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 fbb5 	bl	8004308 <osSemaphoreWait>
	  if (dataComplete)
 8000b9e:	4b56      	ldr	r3, [pc, #344]	@ (8000cf8 <StartDefaultTask+0x170>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0f3      	beq.n	8000b90 <StartDefaultTask+0x8>
	    	  	    {
	    	  	    	if (rx_Buffer[0]=='M'&&rx_Buffer[1]=='+')
 8000ba8:	4b54      	ldr	r3, [pc, #336]	@ (8000cfc <StartDefaultTask+0x174>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b4d      	cmp	r3, #77	@ 0x4d
 8000bae:	d12c      	bne.n	8000c0a <StartDefaultTask+0x82>
 8000bb0:	4b52      	ldr	r3, [pc, #328]	@ (8000cfc <StartDefaultTask+0x174>)
 8000bb2:	785b      	ldrb	r3, [r3, #1]
 8000bb4:	2b2b      	cmp	r3, #43	@ 0x2b
 8000bb6:	d128      	bne.n	8000c0a <StartDefaultTask+0x82>
	    	  	    	{
	    	  	    		ptr = rx_Buffer+2;
 8000bb8:	4a51      	ldr	r2, [pc, #324]	@ (8000d00 <StartDefaultTask+0x178>)
 8000bba:	4b52      	ldr	r3, [pc, #328]	@ (8000d04 <StartDefaultTask+0x17c>)
 8000bbc:	601a      	str	r2, [r3, #0]
	    	  	    		motorValue = atoi((char *)ptr);
 8000bbe:	4b51      	ldr	r3, [pc, #324]	@ (8000d04 <StartDefaultTask+0x17c>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f005 fe40 	bl	8006848 <atoi>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	b2da      	uxtb	r2, r3
 8000bcc:	4b4e      	ldr	r3, [pc, #312]	@ (8000d08 <StartDefaultTask+0x180>)
 8000bce:	701a      	strb	r2, [r3, #0]
	    	  	    		sprintf((char *) buffer,"Moto chay tien %d/255 \n",motorValue);
 8000bd0:	4b4d      	ldr	r3, [pc, #308]	@ (8000d08 <StartDefaultTask+0x180>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	494d      	ldr	r1, [pc, #308]	@ (8000d0c <StartDefaultTask+0x184>)
 8000bd8:	484d      	ldr	r0, [pc, #308]	@ (8000d10 <StartDefaultTask+0x188>)
 8000bda:	f005 febd 	bl	8006958 <siprintf>
	    	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2110      	movs	r1, #16
 8000be2:	484c      	ldr	r0, [pc, #304]	@ (8000d14 <StartDefaultTask+0x18c>)
 8000be4:	f000 ff30 	bl	8001a48 <HAL_GPIO_WritePin>
	    	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2120      	movs	r1, #32
 8000bec:	4849      	ldr	r0, [pc, #292]	@ (8000d14 <StartDefaultTask+0x18c>)
 8000bee:	f000 ff2b 	bl	8001a48 <HAL_GPIO_WritePin>
	    	  	    		setMotorSpeed(motorValue);
 8000bf2:	4b45      	ldr	r3, [pc, #276]	@ (8000d08 <StartDefaultTask+0x180>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff fcda 	bl	80005b0 <setMotorSpeed>
	    	  	    		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 8000bfc:	2364      	movs	r3, #100	@ 0x64
 8000bfe:	221e      	movs	r2, #30
 8000c00:	4943      	ldr	r1, [pc, #268]	@ (8000d10 <StartDefaultTask+0x188>)
 8000c02:	4845      	ldr	r0, [pc, #276]	@ (8000d18 <StartDefaultTask+0x190>)
 8000c04:	f002 fca3 	bl	800354e <HAL_UART_Transmit>
 8000c08:	e05b      	b.n	8000cc2 <StartDefaultTask+0x13a>
	    	  	    	}
	    	  	    	else if (rx_Buffer[0]=='M'&&rx_Buffer[1]=='-')
 8000c0a:	4b3c      	ldr	r3, [pc, #240]	@ (8000cfc <StartDefaultTask+0x174>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	2b4d      	cmp	r3, #77	@ 0x4d
 8000c10:	d12c      	bne.n	8000c6c <StartDefaultTask+0xe4>
 8000c12:	4b3a      	ldr	r3, [pc, #232]	@ (8000cfc <StartDefaultTask+0x174>)
 8000c14:	785b      	ldrb	r3, [r3, #1]
 8000c16:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c18:	d128      	bne.n	8000c6c <StartDefaultTask+0xe4>
	    	  	    	{
	    	  	    		ptr = rx_Buffer+2;
 8000c1a:	4a39      	ldr	r2, [pc, #228]	@ (8000d00 <StartDefaultTask+0x178>)
 8000c1c:	4b39      	ldr	r3, [pc, #228]	@ (8000d04 <StartDefaultTask+0x17c>)
 8000c1e:	601a      	str	r2, [r3, #0]
	    	  	    		motorValue = atoi((char *)ptr);
 8000c20:	4b38      	ldr	r3, [pc, #224]	@ (8000d04 <StartDefaultTask+0x17c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f005 fe0f 	bl	8006848 <atoi>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4b36      	ldr	r3, [pc, #216]	@ (8000d08 <StartDefaultTask+0x180>)
 8000c30:	701a      	strb	r2, [r3, #0]
	    	  	    		sprintf((char *) buffer,"Moto chay lui %d/255 \n",motorValue);
 8000c32:	4b35      	ldr	r3, [pc, #212]	@ (8000d08 <StartDefaultTask+0x180>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	4938      	ldr	r1, [pc, #224]	@ (8000d1c <StartDefaultTask+0x194>)
 8000c3a:	4835      	ldr	r0, [pc, #212]	@ (8000d10 <StartDefaultTask+0x188>)
 8000c3c:	f005 fe8c 	bl	8006958 <siprintf>
	    	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8000c40:	2201      	movs	r2, #1
 8000c42:	2110      	movs	r1, #16
 8000c44:	4833      	ldr	r0, [pc, #204]	@ (8000d14 <StartDefaultTask+0x18c>)
 8000c46:	f000 feff 	bl	8001a48 <HAL_GPIO_WritePin>
	    	  	    		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	4831      	ldr	r0, [pc, #196]	@ (8000d14 <StartDefaultTask+0x18c>)
 8000c50:	f000 fefa 	bl	8001a48 <HAL_GPIO_WritePin>
	    	  	    		setMotorSpeed(motorValue);
 8000c54:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <StartDefaultTask+0x180>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fca9 	bl	80005b0 <setMotorSpeed>
	    	  	    		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 8000c5e:	2364      	movs	r3, #100	@ 0x64
 8000c60:	221e      	movs	r2, #30
 8000c62:	492b      	ldr	r1, [pc, #172]	@ (8000d10 <StartDefaultTask+0x188>)
 8000c64:	482c      	ldr	r0, [pc, #176]	@ (8000d18 <StartDefaultTask+0x190>)
 8000c66:	f002 fc72 	bl	800354e <HAL_UART_Transmit>
 8000c6a:	e02a      	b.n	8000cc2 <StartDefaultTask+0x13a>

	    	  	    	}
	    	  	    	else if (rx_Buffer[0]=='S')
 8000c6c:	4b23      	ldr	r3, [pc, #140]	@ (8000cfc <StartDefaultTask+0x174>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b53      	cmp	r3, #83	@ 0x53
 8000c72:	d120      	bne.n	8000cb6 <StartDefaultTask+0x12e>
	    	  	    	{
	    	  	    		ptr = rx_Buffer+1;
 8000c74:	4a2a      	ldr	r2, [pc, #168]	@ (8000d20 <StartDefaultTask+0x198>)
 8000c76:	4b23      	ldr	r3, [pc, #140]	@ (8000d04 <StartDefaultTask+0x17c>)
 8000c78:	601a      	str	r2, [r3, #0]
	    	  	    		servoValue = atoi((char *)ptr);
 8000c7a:	4b22      	ldr	r3, [pc, #136]	@ (8000d04 <StartDefaultTask+0x17c>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f005 fde2 	bl	8006848 <atoi>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	4b26      	ldr	r3, [pc, #152]	@ (8000d24 <StartDefaultTask+0x19c>)
 8000c8a:	701a      	strb	r2, [r3, #0]
	    	  	    		sprintf((char *) buffer,"Servo danh lai %d do \n",servoValue);
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <StartDefaultTask+0x19c>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	461a      	mov	r2, r3
 8000c92:	4925      	ldr	r1, [pc, #148]	@ (8000d28 <StartDefaultTask+0x1a0>)
 8000c94:	481e      	ldr	r0, [pc, #120]	@ (8000d10 <StartDefaultTask+0x188>)
 8000c96:	f005 fe5f 	bl	8006958 <siprintf>
	    	  	    		setServoAngle(servoValue-5);
 8000c9a:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <StartDefaultTask+0x19c>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	3b05      	subs	r3, #5
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc56 	bl	8000554 <setServoAngle>
	    	  	    		HAL_UART_Transmit(&huart2, buffer, sizeof(buffer), 100);
 8000ca8:	2364      	movs	r3, #100	@ 0x64
 8000caa:	221e      	movs	r2, #30
 8000cac:	4918      	ldr	r1, [pc, #96]	@ (8000d10 <StartDefaultTask+0x188>)
 8000cae:	481a      	ldr	r0, [pc, #104]	@ (8000d18 <StartDefaultTask+0x190>)
 8000cb0:	f002 fc4d 	bl	800354e <HAL_UART_Transmit>
 8000cb4:	e005      	b.n	8000cc2 <StartDefaultTask+0x13a>
	    	  	    	}
	    	  	    	else
	    	  	    	{
	    	  	    		HAL_UART_Transmit(&huart2, errorMeg, sizeof(errorMeg), 100);
 8000cb6:	2364      	movs	r3, #100	@ 0x64
 8000cb8:	2219      	movs	r2, #25
 8000cba:	491c      	ldr	r1, [pc, #112]	@ (8000d2c <StartDefaultTask+0x1a4>)
 8000cbc:	4816      	ldr	r0, [pc, #88]	@ (8000d18 <StartDefaultTask+0x190>)
 8000cbe:	f002 fc46 	bl	800354e <HAL_UART_Transmit>
	    	  	    	}
	    	  			memset(rx_Buffer,0, RX_BUFFER_SIZE);
 8000cc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <StartDefaultTask+0x174>)
 8000cca:	f005 fe65 	bl	8006998 <memset>
	    	  			rx_index = 0;
 8000cce:	4b18      	ldr	r3, [pc, #96]	@ (8000d30 <StartDefaultTask+0x1a8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	701a      	strb	r2, [r3, #0]
	    	  			dataComplete =0;
 8000cd4:	4b08      	ldr	r3, [pc, #32]	@ (8000cf8 <StartDefaultTask+0x170>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	701a      	strb	r2, [r3, #0]
	    	  			HAL_UART_Receive_IT (&huart2, (uint8_t *)&rx_Buffer[rx_index], 1);
 8000cda:	4b15      	ldr	r3, [pc, #84]	@ (8000d30 <StartDefaultTask+0x1a8>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b2db      	uxtb	r3, r3
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <StartDefaultTask+0x174>)
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <StartDefaultTask+0x190>)
 8000cec:	f002 fcba 	bl	8003664 <HAL_UART_Receive_IT>
	  osSemaphoreWait(myBinarySem01Handle, osWaitForever);
 8000cf0:	e74e      	b.n	8000b90 <StartDefaultTask+0x8>
 8000cf2:	bf00      	nop
 8000cf4:	20000534 	.word	0x20000534
 8000cf8:	2000053f 	.word	0x2000053f
 8000cfc:	20000020 	.word	0x20000020
 8000d00:	20000022 	.word	0x20000022
 8000d04:	20000538 	.word	0x20000538
 8000d08:	2000053c 	.word	0x2000053c
 8000d0c:	08007320 	.word	0x08007320
 8000d10:	20000000 	.word	0x20000000
 8000d14:	40010c00 	.word	0x40010c00
 8000d18:	200004e4 	.word	0x200004e4
 8000d1c:	08007338 	.word	0x08007338
 8000d20:	20000021 	.word	0x20000021
 8000d24:	2000053d 	.word	0x2000053d
 8000d28:	08007350 	.word	0x08007350
 8000d2c:	20000120 	.word	0x20000120
 8000d30:	2000053e 	.word	0x2000053e

08000d34 <HAL_UART_RxCpltCallback>:
  }
  /* USER CODE END 5 */
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) // Kiểm tra đúng UART đang dùng
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <HAL_UART_RxCpltCallback+0x70>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d129      	bne.n	8000d9a <HAL_UART_RxCpltCallback+0x66>
    {

    	if (rx_Buffer[rx_index]==' ')
 8000d46:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_UART_RxCpltCallback+0x74>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <HAL_UART_RxCpltCallback+0x78>)
 8000d50:	5c9b      	ldrb	r3, [r3, r2]
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d10f      	bne.n	8000d76 <HAL_UART_RxCpltCallback+0x42>
    	{
    		rx_Buffer[rx_index]='\0';
 8000d56:	4b14      	ldr	r3, [pc, #80]	@ (8000da8 <HAL_UART_RxCpltCallback+0x74>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <HAL_UART_RxCpltCallback+0x78>)
 8000d60:	2100      	movs	r1, #0
 8000d62:	5499      	strb	r1, [r3, r2]
    		dataComplete =1;
 8000d64:	4b12      	ldr	r3, [pc, #72]	@ (8000db0 <HAL_UART_RxCpltCallback+0x7c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
    		osSemaphoreRelease(myBinarySem01Handle);
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_UART_RxCpltCallback+0x80>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fb18 	bl	80043a4 <osSemaphoreRelease>
    	{
    		rx_index++;
    		HAL_UART_Receive_IT (&huart2, (uint8_t *)&rx_Buffer[rx_index], 1);
    	}
    }
}
 8000d74:	e011      	b.n	8000d9a <HAL_UART_RxCpltCallback+0x66>
    		rx_index++;
 8000d76:	4b0c      	ldr	r3, [pc, #48]	@ (8000da8 <HAL_UART_RxCpltCallback+0x74>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	b2da      	uxtb	r2, r3
 8000d80:	4b09      	ldr	r3, [pc, #36]	@ (8000da8 <HAL_UART_RxCpltCallback+0x74>)
 8000d82:	701a      	strb	r2, [r3, #0]
    		HAL_UART_Receive_IT (&huart2, (uint8_t *)&rx_Buffer[rx_index], 1);
 8000d84:	4b08      	ldr	r3, [pc, #32]	@ (8000da8 <HAL_UART_RxCpltCallback+0x74>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	4b07      	ldr	r3, [pc, #28]	@ (8000dac <HAL_UART_RxCpltCallback+0x78>)
 8000d8e:	4413      	add	r3, r2
 8000d90:	2201      	movs	r2, #1
 8000d92:	4619      	mov	r1, r3
 8000d94:	4808      	ldr	r0, [pc, #32]	@ (8000db8 <HAL_UART_RxCpltCallback+0x84>)
 8000d96:	f002 fc65 	bl	8003664 <HAL_UART_Receive_IT>
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004400 	.word	0x40004400
 8000da8:	2000053e 	.word	0x2000053e
 8000dac:	20000020 	.word	0x20000020
 8000db0:	2000053f 	.word	0x2000053f
 8000db4:	20000534 	.word	0x20000534
 8000db8:	200004e4 	.word	0x200004e4

08000dbc <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	@ 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	uint8_t encoder[20]="0";
 8000dc4:	2330      	movs	r3, #48	@ 0x30
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
	uint16_t counterAfter, counterInitial =0,delta;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  for(;;)
  {
		  counterAfter = __HAL_TIM_GET_COUNTER(&htim3);
 8000dda:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <StartTask02+0xb4>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000de0:	847b      	strh	r3, [r7, #34]	@ 0x22
		  if (__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8000de2:	4b23      	ldr	r3, [pc, #140]	@ (8000e70 <StartTask02+0xb4>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	2b10      	cmp	r3, #16
 8000dee:	d113      	bne.n	8000e18 <StartTask02+0x5c>
	      {
			  if(counterAfter>=counterInitial)
 8000df0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000df2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d306      	bcc.n	8000e06 <StartTask02+0x4a>
			  {
			  	  delta = 65535 - counterAfter + counterInitial;
 8000df8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000dfa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000dfc:	1ad3      	subs	r3, r2, r3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3b01      	subs	r3, #1
 8000e02:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e04:	e019      	b.n	8000e3a <StartTask02+0x7e>
			  }
			  else if (counterAfter<counterInitial)
 8000e06:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e08:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d215      	bcs.n	8000e3a <StartTask02+0x7e>
			  {
			  	  delta = counterInitial -  counterAfter;
 8000e0e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8000e10:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e12:	1ad3      	subs	r3, r2, r3
 8000e14:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e16:	e010      	b.n	8000e3a <StartTask02+0x7e>
			  }
	      }
		  else
		  {
			  if(counterAfter>=counterInitial)
 8000e18:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d304      	bcc.n	8000e2a <StartTask02+0x6e>
			  {
				  delta = counterAfter - counterInitial;
 8000e20:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000e28:	e007      	b.n	8000e3a <StartTask02+0x7e>
			  }
			  else if (counterAfter<counterInitial)
 8000e2a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d203      	bcs.n	8000e3a <StartTask02+0x7e>
			  {
				  delta = (65535-counterInitial)+counterAfter+1;
 8000e32:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8000e34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000e36:	1ad3      	subs	r3, r2, r3
 8000e38:	84bb      	strh	r3, [r7, #36]	@ 0x24
			  }
		  }
		//  speed = 2*3.14*(10*(float)delta/192)*FINAL_DRIVE_RATIO*WHEEL_RADIUS;
	      sprintf((char*)encoder, "%d\n", (int)delta);
 8000e3a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000e3c:	f107 030c 	add.w	r3, r7, #12
 8000e40:	490c      	ldr	r1, [pc, #48]	@ (8000e74 <StartTask02+0xb8>)
 8000e42:	4618      	mov	r0, r3
 8000e44:	f005 fd88 	bl	8006958 <siprintf>
	      HAL_UART_Transmit(&huart2, encoder, strlen((char*)encoder), 100);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff f97f 	bl	8000150 <strlen>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	f107 010c 	add.w	r1, r7, #12
 8000e5a:	2364      	movs	r3, #100	@ 0x64
 8000e5c:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <StartTask02+0xbc>)
 8000e5e:	f002 fb76 	bl	800354e <HAL_UART_Transmit>
	      counterInitial = counterAfter;
 8000e62:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000e64:	84fb      	strh	r3, [r7, #38]	@ 0x26
	      osDelay(1000);
 8000e66:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e6a:	f003 fa06 	bl	800427a <osDelay>
		  counterAfter = __HAL_TIM_GET_COUNTER(&htim3);
 8000e6e:	e7b4      	b.n	8000dda <StartTask02+0x1e>
 8000e70:	2000049c 	.word	0x2000049c
 8000e74:	08007368 	.word	0x08007368
 8000e78:	200004e4 	.word	0x200004e4

08000e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e8a:	4293      	cmp	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e8e:	f000 faa9 	bl	80013e4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40000800 	.word	0x40000800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bc80      	pop	{r7}
 8000eaa:	4770      	bx	lr

08000eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb2:	4b18      	ldr	r3, [pc, #96]	@ (8000f14 <HAL_MspInit+0x68>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	4a17      	ldr	r2, [pc, #92]	@ (8000f14 <HAL_MspInit+0x68>)
 8000eb8:	f043 0301 	orr.w	r3, r3, #1
 8000ebc:	6193      	str	r3, [r2, #24]
 8000ebe:	4b15      	ldr	r3, [pc, #84]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ec0:	699b      	ldr	r3, [r3, #24]
 8000ec2:	f003 0301 	and.w	r3, r3, #1
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eca:	4b12      	ldr	r3, [pc, #72]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	4a11      	ldr	r2, [pc, #68]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed4:	61d3      	str	r3, [r2, #28]
 8000ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f14 <HAL_MspInit+0x68>)
 8000ed8:	69db      	ldr	r3, [r3, #28]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ede:	607b      	str	r3, [r7, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	210f      	movs	r1, #15
 8000ee6:	f06f 0001 	mvn.w	r0, #1
 8000eea:	f000 fb4c 	bl	8001586 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eee:	4b0a      	ldr	r3, [pc, #40]	@ (8000f18 <HAL_MspInit+0x6c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_MspInit+0x6c>)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	3710      	adds	r7, #16
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000

08000f1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a12      	ldr	r2, [pc, #72]	@ (8000f74 <HAL_TIM_Base_MspInit+0x58>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d10c      	bne.n	8000f48 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f2e:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_TIM_Base_MspInit+0x5c>)
 8000f30:	699b      	ldr	r3, [r3, #24]
 8000f32:	4a11      	ldr	r2, [pc, #68]	@ (8000f78 <HAL_TIM_Base_MspInit+0x5c>)
 8000f34:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000f38:	6193      	str	r3, [r2, #24]
 8000f3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f78 <HAL_TIM_Base_MspInit+0x5c>)
 8000f3c:	699b      	ldr	r3, [r3, #24]
 8000f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f46:	e010      	b.n	8000f6a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM2)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f50:	d10b      	bne.n	8000f6a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f52:	4b09      	ldr	r3, [pc, #36]	@ (8000f78 <HAL_TIM_Base_MspInit+0x5c>)
 8000f54:	69db      	ldr	r3, [r3, #28]
 8000f56:	4a08      	ldr	r2, [pc, #32]	@ (8000f78 <HAL_TIM_Base_MspInit+0x5c>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	61d3      	str	r3, [r2, #28]
 8000f5e:	4b06      	ldr	r3, [pc, #24]	@ (8000f78 <HAL_TIM_Base_MspInit+0x5c>)
 8000f60:	69db      	ldr	r3, [r3, #28]
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
}
 8000f6a:	bf00      	nop
 8000f6c:	3714      	adds	r7, #20
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bc80      	pop	{r7}
 8000f72:	4770      	bx	lr
 8000f74:	40012c00 	.word	0x40012c00
 8000f78:	40021000 	.word	0x40021000

08000f7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b088      	sub	sp, #32
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM3)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a15      	ldr	r2, [pc, #84]	@ (8000fec <HAL_TIM_Encoder_MspInit+0x70>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d123      	bne.n	8000fe4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f9c:	4b14      	ldr	r3, [pc, #80]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	4a13      	ldr	r2, [pc, #76]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000fa2:	f043 0302 	orr.w	r3, r3, #2
 8000fa6:	61d3      	str	r3, [r2, #28]
 8000fa8:	4b11      	ldr	r3, [pc, #68]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000faa:	69db      	ldr	r3, [r3, #28]
 8000fac:	f003 0302 	and.w	r3, r3, #2
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000fba:	f043 0304 	orr.w	r3, r3, #4
 8000fbe:	6193      	str	r3, [r2, #24]
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_TIM_Encoder_MspInit+0x74>)
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	f003 0304 	and.w	r3, r3, #4
 8000fc8:	60bb      	str	r3, [r7, #8]
 8000fca:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fcc:	23c0      	movs	r3, #192	@ 0xc0
 8000fce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd8:	f107 0310 	add.w	r3, r7, #16
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	@ (8000ff4 <HAL_TIM_Encoder_MspInit+0x78>)
 8000fe0:	f000 fbae 	bl	8001740 <HAL_GPIO_Init>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40000400 	.word	0x40000400
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800

08000ff8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	@ 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001000:	f107 0314 	add.w	r3, r7, #20
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a34      	ldr	r2, [pc, #208]	@ (80010e4 <HAL_TIM_MspPostInit+0xec>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d119      	bne.n	800104c <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	4b33      	ldr	r3, [pc, #204]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 800101a:	699b      	ldr	r3, [r3, #24]
 800101c:	4a32      	ldr	r2, [pc, #200]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 800101e:	f043 0304 	orr.w	r3, r3, #4
 8001022:	6193      	str	r3, [r2, #24]
 8001024:	4b30      	ldr	r3, [pc, #192]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001026:	699b      	ldr	r3, [r3, #24]
 8001028:	f003 0304 	and.w	r3, r3, #4
 800102c:	613b      	str	r3, [r7, #16]
 800102e:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001030:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001036:	2302      	movs	r3, #2
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2302      	movs	r3, #2
 800103c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4829      	ldr	r0, [pc, #164]	@ (80010ec <HAL_TIM_MspPostInit+0xf4>)
 8001046:	f000 fb7b 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800104a:	e047      	b.n	80010dc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM2)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001054:	d142      	bne.n	80010dc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b24      	ldr	r3, [pc, #144]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	4a23      	ldr	r2, [pc, #140]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	6193      	str	r3, [r2, #24]
 8001062:	4b21      	ldr	r3, [pc, #132]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001064:	699b      	ldr	r3, [r3, #24]
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106e:	4b1e      	ldr	r3, [pc, #120]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001070:	699b      	ldr	r3, [r3, #24]
 8001072:	4a1d      	ldr	r2, [pc, #116]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 8001074:	f043 0308 	orr.w	r3, r3, #8
 8001078:	6193      	str	r3, [r2, #24]
 800107a:	4b1b      	ldr	r3, [pc, #108]	@ (80010e8 <HAL_TIM_MspPostInit+0xf0>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	f003 0308 	and.w	r3, r3, #8
 8001082:	60bb      	str	r3, [r7, #8]
 8001084:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108e:	2302      	movs	r3, #2
 8001090:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	4814      	ldr	r0, [pc, #80]	@ (80010ec <HAL_TIM_MspPostInit+0xf4>)
 800109a:	f000 fb51 	bl	8001740 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800109e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a8:	2302      	movs	r3, #2
 80010aa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	480f      	ldr	r0, [pc, #60]	@ (80010f0 <HAL_TIM_MspPostInit+0xf8>)
 80010b4:	f000 fb44 	bl	8001740 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80010b8:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_TIM_MspPostInit+0xfc>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80010c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80010ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80010d6:	4a07      	ldr	r2, [pc, #28]	@ (80010f4 <HAL_TIM_MspPostInit+0xfc>)
 80010d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010da:	6053      	str	r3, [r2, #4]
}
 80010dc:	bf00      	nop
 80010de:	3728      	adds	r7, #40	@ 0x28
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	40012c00 	.word	0x40012c00
 80010e8:	40021000 	.word	0x40021000
 80010ec:	40010800 	.word	0x40010800
 80010f0:	40010c00 	.word	0x40010c00
 80010f4:	40010000 	.word	0x40010000

080010f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b088      	sub	sp, #32
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0310 	add.w	r3, r7, #16
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a1f      	ldr	r2, [pc, #124]	@ (8001190 <HAL_UART_MspInit+0x98>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d137      	bne.n	8001188 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <HAL_UART_MspInit+0x9c>)
 800111a:	69db      	ldr	r3, [r3, #28]
 800111c:	4a1d      	ldr	r2, [pc, #116]	@ (8001194 <HAL_UART_MspInit+0x9c>)
 800111e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001122:	61d3      	str	r3, [r2, #28]
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <HAL_UART_MspInit+0x9c>)
 8001126:	69db      	ldr	r3, [r3, #28]
 8001128:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <HAL_UART_MspInit+0x9c>)
 8001132:	699b      	ldr	r3, [r3, #24]
 8001134:	4a17      	ldr	r2, [pc, #92]	@ (8001194 <HAL_UART_MspInit+0x9c>)
 8001136:	f043 0304 	orr.w	r3, r3, #4
 800113a:	6193      	str	r3, [r2, #24]
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <HAL_UART_MspInit+0x9c>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	f003 0304 	and.w	r3, r3, #4
 8001144:	60bb      	str	r3, [r7, #8]
 8001146:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001148:	2304      	movs	r3, #4
 800114a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001150:	2303      	movs	r3, #3
 8001152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001154:	f107 0310 	add.w	r3, r7, #16
 8001158:	4619      	mov	r1, r3
 800115a:	480f      	ldr	r0, [pc, #60]	@ (8001198 <HAL_UART_MspInit+0xa0>)
 800115c:	f000 faf0 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001160:	2308      	movs	r3, #8
 8001162:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	4809      	ldr	r0, [pc, #36]	@ (8001198 <HAL_UART_MspInit+0xa0>)
 8001174:	f000 fae4 	bl	8001740 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2105      	movs	r1, #5
 800117c:	2026      	movs	r0, #38	@ 0x26
 800117e:	f000 fa02 	bl	8001586 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001182:	2026      	movs	r0, #38	@ 0x26
 8001184:	f000 fa1b 	bl	80015be <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800

0800119c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08e      	sub	sp, #56	@ 0x38
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011a4:	2300      	movs	r3, #0
 80011a6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011ac:	2300      	movs	r3, #0
 80011ae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80011b2:	4b34      	ldr	r3, [pc, #208]	@ (8001284 <HAL_InitTick+0xe8>)
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	4a33      	ldr	r2, [pc, #204]	@ (8001284 <HAL_InitTick+0xe8>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	61d3      	str	r3, [r2, #28]
 80011be:	4b31      	ldr	r3, [pc, #196]	@ (8001284 <HAL_InitTick+0xe8>)
 80011c0:	69db      	ldr	r3, [r3, #28]
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ca:	f107 0210 	add.w	r2, r7, #16
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4611      	mov	r1, r2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f001 f841 	bl	800225c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011da:	6a3b      	ldr	r3, [r7, #32]
 80011dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011e4:	f001 f812 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 80011e8:	6378      	str	r0, [r7, #52]	@ 0x34
 80011ea:	e004      	b.n	80011f6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ec:	f001 f80e 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 80011f0:	4603      	mov	r3, r0
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011f8:	4a23      	ldr	r2, [pc, #140]	@ (8001288 <HAL_InitTick+0xec>)
 80011fa:	fba2 2303 	umull	r2, r3, r2, r3
 80011fe:	0c9b      	lsrs	r3, r3, #18
 8001200:	3b01      	subs	r3, #1
 8001202:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001204:	4b21      	ldr	r3, [pc, #132]	@ (800128c <HAL_InitTick+0xf0>)
 8001206:	4a22      	ldr	r2, [pc, #136]	@ (8001290 <HAL_InitTick+0xf4>)
 8001208:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_InitTick+0xf0>)
 800120c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001210:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001212:	4a1e      	ldr	r2, [pc, #120]	@ (800128c <HAL_InitTick+0xf0>)
 8001214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001216:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001218:	4b1c      	ldr	r3, [pc, #112]	@ (800128c <HAL_InitTick+0xf0>)
 800121a:	2200      	movs	r2, #0
 800121c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121e:	4b1b      	ldr	r3, [pc, #108]	@ (800128c <HAL_InitTick+0xf0>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_InitTick+0xf0>)
 8001226:	2200      	movs	r2, #0
 8001228:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800122a:	4818      	ldr	r0, [pc, #96]	@ (800128c <HAL_InitTick+0xf0>)
 800122c:	f001 f864 	bl	80022f8 <HAL_TIM_Base_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001236:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800123a:	2b00      	cmp	r3, #0
 800123c:	d11b      	bne.n	8001276 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800123e:	4813      	ldr	r0, [pc, #76]	@ (800128c <HAL_InitTick+0xf0>)
 8001240:	f001 f8aa 	bl	8002398 <HAL_TIM_Base_Start_IT>
 8001244:	4603      	mov	r3, r0
 8001246:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800124a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800124e:	2b00      	cmp	r3, #0
 8001250:	d111      	bne.n	8001276 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001252:	201e      	movs	r0, #30
 8001254:	f000 f9b3 	bl	80015be <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b0f      	cmp	r3, #15
 800125c:	d808      	bhi.n	8001270 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800125e:	2200      	movs	r2, #0
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	201e      	movs	r0, #30
 8001264:	f000 f98f 	bl	8001586 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001268:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <HAL_InitTick+0xf8>)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e002      	b.n	8001276 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001276:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800127a:	4618      	mov	r0, r3
 800127c:	3738      	adds	r7, #56	@ 0x38
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40021000 	.word	0x40021000
 8001288:	431bde83 	.word	0x431bde83
 800128c:	20000540 	.word	0x20000540
 8001290:	40000800 	.word	0x40000800
 8001294:	20000140 	.word	0x20000140

08001298 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <NMI_Handler+0x4>

080012a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <HardFault_Handler+0x4>

080012a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ac:	bf00      	nop
 80012ae:	e7fd      	b.n	80012ac <MemManage_Handler+0x4>

080012b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <BusFault_Handler+0x4>

080012b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012bc:	bf00      	nop
 80012be:	e7fd      	b.n	80012bc <UsageFault_Handler+0x4>

080012c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c4:	bf00      	nop
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bc80      	pop	{r7}
 80012ca:	4770      	bx	lr

080012cc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80012d0:	4802      	ldr	r0, [pc, #8]	@ (80012dc <TIM4_IRQHandler+0x10>)
 80012d2:	f001 fadd 	bl	8002890 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000540 	.word	0x20000540

080012e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012e4:	4802      	ldr	r0, [pc, #8]	@ (80012f0 <USART2_IRQHandler+0x10>)
 80012e6:	f002 f9e3 	bl	80036b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200004e4 	.word	0x200004e4

080012f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012fc:	4a14      	ldr	r2, [pc, #80]	@ (8001350 <_sbrk+0x5c>)
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <_sbrk+0x60>)
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001308:	4b13      	ldr	r3, [pc, #76]	@ (8001358 <_sbrk+0x64>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d102      	bne.n	8001316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <_sbrk+0x64>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <_sbrk+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <_sbrk+0x64>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4413      	add	r3, r2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	429a      	cmp	r2, r3
 8001322:	d207      	bcs.n	8001334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001324:	f005 fb40 	bl	80069a8 <__errno>
 8001328:	4603      	mov	r3, r0
 800132a:	220c      	movs	r2, #12
 800132c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e009      	b.n	8001348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001334:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <_sbrk+0x64>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133a:	4b07      	ldr	r3, [pc, #28]	@ (8001358 <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	4a05      	ldr	r2, [pc, #20]	@ (8001358 <_sbrk+0x64>)
 8001344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001346:	68fb      	ldr	r3, [r7, #12]
}
 8001348:	4618      	mov	r0, r3
 800134a:	3718      	adds	r7, #24
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20005000 	.word	0x20005000
 8001354:	00000400 	.word	0x00000400
 8001358:	20000588 	.word	0x20000588
 800135c:	20001430 	.word	0x20001430

08001360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800136c:	f7ff fff8 	bl	8001360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001370:	480b      	ldr	r0, [pc, #44]	@ (80013a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001372:	490c      	ldr	r1, [pc, #48]	@ (80013a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001374:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001378:	e002      	b.n	8001380 <LoopCopyDataInit>

0800137a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800137c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137e:	3304      	adds	r3, #4

08001380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001384:	d3f9      	bcc.n	800137a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001386:	4a09      	ldr	r2, [pc, #36]	@ (80013ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001388:	4c09      	ldr	r4, [pc, #36]	@ (80013b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800138a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800138c:	e001      	b.n	8001392 <LoopFillZerobss>

0800138e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001390:	3204      	adds	r2, #4

08001392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001394:	d3fb      	bcc.n	800138e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001396:	f005 fb0d 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff f92f 	bl	80005fc <main>
  bx lr
 800139e:	4770      	bx	lr
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000019c 	.word	0x2000019c
  ldr r2, =_sidata
 80013a8:	080074e4 	.word	0x080074e4
  ldr r2, =_sbss
 80013ac:	2000019c 	.word	0x2000019c
  ldr r4, =_ebss
 80013b0:	2000142c 	.word	0x2000142c

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	@ (80013e0 <HAL_Init+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	@ (80013e0 <HAL_Init+0x28>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f8d1 	bl	8001570 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f7ff fee4 	bl	800119c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fd6a 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e8:	4b05      	ldr	r3, [pc, #20]	@ (8001400 <HAL_IncTick+0x1c>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b05      	ldr	r3, [pc, #20]	@ (8001404 <HAL_IncTick+0x20>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	4a03      	ldr	r2, [pc, #12]	@ (8001404 <HAL_IncTick+0x20>)
 80013f6:	6013      	str	r3, [r2, #0]
}
 80013f8:	bf00      	nop
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bc80      	pop	{r7}
 80013fe:	4770      	bx	lr
 8001400:	20000144 	.word	0x20000144
 8001404:	2000058c 	.word	0x2000058c

08001408 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b02      	ldr	r3, [pc, #8]	@ (8001418 <HAL_GetTick+0x10>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	2000058c 	.word	0x2000058c

0800141c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800141c:	b480      	push	{r7}
 800141e:	b085      	sub	sp, #20
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800142c:	4b0c      	ldr	r3, [pc, #48]	@ (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001438:	4013      	ands	r3, r2
 800143a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001444:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800144c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800144e:	4a04      	ldr	r2, [pc, #16]	@ (8001460 <__NVIC_SetPriorityGrouping+0x44>)
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	60d3      	str	r3, [r2, #12]
}
 8001454:	bf00      	nop
 8001456:	3714      	adds	r7, #20
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001468:	4b04      	ldr	r3, [pc, #16]	@ (800147c <__NVIC_GetPriorityGrouping+0x18>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	0a1b      	lsrs	r3, r3, #8
 800146e:	f003 0307 	and.w	r3, r3, #7
}
 8001472:	4618      	mov	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	bc80      	pop	{r7}
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db0b      	blt.n	80014aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001492:	79fb      	ldrb	r3, [r7, #7]
 8001494:	f003 021f 	and.w	r2, r3, #31
 8001498:	4906      	ldr	r1, [pc, #24]	@ (80014b4 <__NVIC_EnableIRQ+0x34>)
 800149a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800149e:	095b      	lsrs	r3, r3, #5
 80014a0:	2001      	movs	r0, #1
 80014a2:	fa00 f202 	lsl.w	r2, r0, r2
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014aa:	bf00      	nop
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100

080014b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	4603      	mov	r3, r0
 80014c0:	6039      	str	r1, [r7, #0]
 80014c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	db0a      	blt.n	80014e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	490c      	ldr	r1, [pc, #48]	@ (8001504 <__NVIC_SetPriority+0x4c>)
 80014d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d6:	0112      	lsls	r2, r2, #4
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	440b      	add	r3, r1
 80014dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e0:	e00a      	b.n	80014f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	4908      	ldr	r1, [pc, #32]	@ (8001508 <__NVIC_SetPriority+0x50>)
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f003 030f 	and.w	r3, r3, #15
 80014ee:	3b04      	subs	r3, #4
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	440b      	add	r3, r1
 80014f6:	761a      	strb	r2, [r3, #24]
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150c:	b480      	push	{r7}
 800150e:	b089      	sub	sp, #36	@ 0x24
 8001510:	af00      	add	r7, sp, #0
 8001512:	60f8      	str	r0, [r7, #12]
 8001514:	60b9      	str	r1, [r7, #8]
 8001516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	f003 0307 	and.w	r3, r3, #7
 800151e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	f1c3 0307 	rsb	r3, r3, #7
 8001526:	2b04      	cmp	r3, #4
 8001528:	bf28      	it	cs
 800152a:	2304      	movcs	r3, #4
 800152c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3304      	adds	r3, #4
 8001532:	2b06      	cmp	r3, #6
 8001534:	d902      	bls.n	800153c <NVIC_EncodePriority+0x30>
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	3b03      	subs	r3, #3
 800153a:	e000      	b.n	800153e <NVIC_EncodePriority+0x32>
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001540:	f04f 32ff 	mov.w	r2, #4294967295
 8001544:	69bb      	ldr	r3, [r7, #24]
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43da      	mvns	r2, r3
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	401a      	ands	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001554:	f04f 31ff 	mov.w	r1, #4294967295
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	fa01 f303 	lsl.w	r3, r1, r3
 800155e:	43d9      	mvns	r1, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001564:	4313      	orrs	r3, r2
         );
}
 8001566:	4618      	mov	r0, r3
 8001568:	3724      	adds	r7, #36	@ 0x24
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f7ff ff4f 	bl	800141c <__NVIC_SetPriorityGrouping>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001586:	b580      	push	{r7, lr}
 8001588:	b086      	sub	sp, #24
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	60b9      	str	r1, [r7, #8]
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001598:	f7ff ff64 	bl	8001464 <__NVIC_GetPriorityGrouping>
 800159c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	6978      	ldr	r0, [r7, #20]
 80015a4:	f7ff ffb2 	bl	800150c <NVIC_EncodePriority>
 80015a8:	4602      	mov	r2, r0
 80015aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015ae:	4611      	mov	r1, r2
 80015b0:	4618      	mov	r0, r3
 80015b2:	f7ff ff81 	bl	80014b8 <__NVIC_SetPriority>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}

080015be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b082      	sub	sp, #8
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	4603      	mov	r3, r0
 80015c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff57 	bl	8001480 <__NVIC_EnableIRQ>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015da:	b480      	push	{r7}
 80015dc:	b085      	sub	sp, #20
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d008      	beq.n	8001604 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e020      	b.n	8001646 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f022 020e 	bic.w	r2, r2, #14
 8001612:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2201      	movs	r2, #1
 8001638:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001644:	7bfb      	ldrb	r3, [r7, #15]
}
 8001646:	4618      	mov	r0, r3
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr

08001650 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001658:	2300      	movs	r3, #0
 800165a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001662:	b2db      	uxtb	r3, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d005      	beq.n	8001674 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2204      	movs	r2, #4
 800166c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	73fb      	strb	r3, [r7, #15]
 8001672:	e051      	b.n	8001718 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 020e 	bic.w	r2, r2, #14
 8001682:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0201 	bic.w	r2, r2, #1
 8001692:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a22      	ldr	r2, [pc, #136]	@ (8001724 <HAL_DMA_Abort_IT+0xd4>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d029      	beq.n	80016f2 <HAL_DMA_Abort_IT+0xa2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a21      	ldr	r2, [pc, #132]	@ (8001728 <HAL_DMA_Abort_IT+0xd8>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d022      	beq.n	80016ee <HAL_DMA_Abort_IT+0x9e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1f      	ldr	r2, [pc, #124]	@ (800172c <HAL_DMA_Abort_IT+0xdc>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d01a      	beq.n	80016e8 <HAL_DMA_Abort_IT+0x98>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a1e      	ldr	r2, [pc, #120]	@ (8001730 <HAL_DMA_Abort_IT+0xe0>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d012      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x92>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a1c      	ldr	r2, [pc, #112]	@ (8001734 <HAL_DMA_Abort_IT+0xe4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d00a      	beq.n	80016dc <HAL_DMA_Abort_IT+0x8c>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a1b      	ldr	r2, [pc, #108]	@ (8001738 <HAL_DMA_Abort_IT+0xe8>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d102      	bne.n	80016d6 <HAL_DMA_Abort_IT+0x86>
 80016d0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80016d4:	e00e      	b.n	80016f4 <HAL_DMA_Abort_IT+0xa4>
 80016d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80016da:	e00b      	b.n	80016f4 <HAL_DMA_Abort_IT+0xa4>
 80016dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80016e0:	e008      	b.n	80016f4 <HAL_DMA_Abort_IT+0xa4>
 80016e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016e6:	e005      	b.n	80016f4 <HAL_DMA_Abort_IT+0xa4>
 80016e8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016ec:	e002      	b.n	80016f4 <HAL_DMA_Abort_IT+0xa4>
 80016ee:	2310      	movs	r3, #16
 80016f0:	e000      	b.n	80016f4 <HAL_DMA_Abort_IT+0xa4>
 80016f2:	2301      	movs	r3, #1
 80016f4:	4a11      	ldr	r2, [pc, #68]	@ (800173c <HAL_DMA_Abort_IT+0xec>)
 80016f6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
    } 
  }
  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40020008 	.word	0x40020008
 8001728:	4002001c 	.word	0x4002001c
 800172c:	40020030 	.word	0x40020030
 8001730:	40020044 	.word	0x40020044
 8001734:	40020058 	.word	0x40020058
 8001738:	4002006c 	.word	0x4002006c
 800173c:	40020000 	.word	0x40020000

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b08b      	sub	sp, #44	@ 0x2c
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174a:	2300      	movs	r3, #0
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e169      	b.n	8001a28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001754:	2201      	movs	r2, #1
 8001756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	429a      	cmp	r2, r3
 800176e:	f040 8158 	bne.w	8001a22 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	4a9a      	ldr	r2, [pc, #616]	@ (80019e0 <HAL_GPIO_Init+0x2a0>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d05e      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 800177c:	4a98      	ldr	r2, [pc, #608]	@ (80019e0 <HAL_GPIO_Init+0x2a0>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d875      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 8001782:	4a98      	ldr	r2, [pc, #608]	@ (80019e4 <HAL_GPIO_Init+0x2a4>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d058      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001788:	4a96      	ldr	r2, [pc, #600]	@ (80019e4 <HAL_GPIO_Init+0x2a4>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d86f      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800178e:	4a96      	ldr	r2, [pc, #600]	@ (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d052      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 8001794:	4a94      	ldr	r2, [pc, #592]	@ (80019e8 <HAL_GPIO_Init+0x2a8>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d869      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 800179a:	4a94      	ldr	r2, [pc, #592]	@ (80019ec <HAL_GPIO_Init+0x2ac>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d04c      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017a0:	4a92      	ldr	r2, [pc, #584]	@ (80019ec <HAL_GPIO_Init+0x2ac>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d863      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017a6:	4a92      	ldr	r2, [pc, #584]	@ (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d046      	beq.n	800183a <HAL_GPIO_Init+0xfa>
 80017ac:	4a90      	ldr	r2, [pc, #576]	@ (80019f0 <HAL_GPIO_Init+0x2b0>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d85d      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017b2:	2b12      	cmp	r3, #18
 80017b4:	d82a      	bhi.n	800180c <HAL_GPIO_Init+0xcc>
 80017b6:	2b12      	cmp	r3, #18
 80017b8:	d859      	bhi.n	800186e <HAL_GPIO_Init+0x12e>
 80017ba:	a201      	add	r2, pc, #4	@ (adr r2, 80017c0 <HAL_GPIO_Init+0x80>)
 80017bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c0:	0800183b 	.word	0x0800183b
 80017c4:	08001815 	.word	0x08001815
 80017c8:	08001827 	.word	0x08001827
 80017cc:	08001869 	.word	0x08001869
 80017d0:	0800186f 	.word	0x0800186f
 80017d4:	0800186f 	.word	0x0800186f
 80017d8:	0800186f 	.word	0x0800186f
 80017dc:	0800186f 	.word	0x0800186f
 80017e0:	0800186f 	.word	0x0800186f
 80017e4:	0800186f 	.word	0x0800186f
 80017e8:	0800186f 	.word	0x0800186f
 80017ec:	0800186f 	.word	0x0800186f
 80017f0:	0800186f 	.word	0x0800186f
 80017f4:	0800186f 	.word	0x0800186f
 80017f8:	0800186f 	.word	0x0800186f
 80017fc:	0800186f 	.word	0x0800186f
 8001800:	0800186f 	.word	0x0800186f
 8001804:	0800181d 	.word	0x0800181d
 8001808:	08001831 	.word	0x08001831
 800180c:	4a79      	ldr	r2, [pc, #484]	@ (80019f4 <HAL_GPIO_Init+0x2b4>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001812:	e02c      	b.n	800186e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	623b      	str	r3, [r7, #32]
          break;
 800181a:	e029      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	3304      	adds	r3, #4
 8001822:	623b      	str	r3, [r7, #32]
          break;
 8001824:	e024      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	3308      	adds	r3, #8
 800182c:	623b      	str	r3, [r7, #32]
          break;
 800182e:	e01f      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	330c      	adds	r3, #12
 8001836:	623b      	str	r3, [r7, #32]
          break;
 8001838:	e01a      	b.n	8001870 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d102      	bne.n	8001848 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001842:	2304      	movs	r3, #4
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e013      	b.n	8001870 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d105      	bne.n	800185c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001850:	2308      	movs	r3, #8
 8001852:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69fa      	ldr	r2, [r7, #28]
 8001858:	611a      	str	r2, [r3, #16]
          break;
 800185a:	e009      	b.n	8001870 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800185c:	2308      	movs	r3, #8
 800185e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69fa      	ldr	r2, [r7, #28]
 8001864:	615a      	str	r2, [r3, #20]
          break;
 8001866:	e003      	b.n	8001870 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
          break;
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x130>
          break;
 800186e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	2bff      	cmp	r3, #255	@ 0xff
 8001874:	d801      	bhi.n	800187a <HAL_GPIO_Init+0x13a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	e001      	b.n	800187e <HAL_GPIO_Init+0x13e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3304      	adds	r3, #4
 800187e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001880:	69bb      	ldr	r3, [r7, #24]
 8001882:	2bff      	cmp	r3, #255	@ 0xff
 8001884:	d802      	bhi.n	800188c <HAL_GPIO_Init+0x14c>
 8001886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	e002      	b.n	8001892 <HAL_GPIO_Init+0x152>
 800188c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800188e:	3b08      	subs	r3, #8
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	681a      	ldr	r2, [r3, #0]
 8001898:	210f      	movs	r1, #15
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	fa01 f303 	lsl.w	r3, r1, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	401a      	ands	r2, r3
 80018a4:	6a39      	ldr	r1, [r7, #32]
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	431a      	orrs	r2, r3
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 80b1 	beq.w	8001a22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018c0:	4b4d      	ldr	r3, [pc, #308]	@ (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	4a4c      	ldr	r2, [pc, #304]	@ (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018c6:	f043 0301 	orr.w	r3, r3, #1
 80018ca:	6193      	str	r3, [r2, #24]
 80018cc:	4b4a      	ldr	r3, [pc, #296]	@ (80019f8 <HAL_GPIO_Init+0x2b8>)
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	f003 0301 	and.w	r3, r3, #1
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018d8:	4a48      	ldr	r2, [pc, #288]	@ (80019fc <HAL_GPIO_Init+0x2bc>)
 80018da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018dc:	089b      	lsrs	r3, r3, #2
 80018de:	3302      	adds	r3, #2
 80018e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80018e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	220f      	movs	r2, #15
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	68fa      	ldr	r2, [r7, #12]
 80018f8:	4013      	ands	r3, r2
 80018fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a40      	ldr	r2, [pc, #256]	@ (8001a00 <HAL_GPIO_Init+0x2c0>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d013      	beq.n	800192c <HAL_GPIO_Init+0x1ec>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3f      	ldr	r2, [pc, #252]	@ (8001a04 <HAL_GPIO_Init+0x2c4>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d00d      	beq.n	8001928 <HAL_GPIO_Init+0x1e8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a08 <HAL_GPIO_Init+0x2c8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d007      	beq.n	8001924 <HAL_GPIO_Init+0x1e4>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a3d      	ldr	r2, [pc, #244]	@ (8001a0c <HAL_GPIO_Init+0x2cc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d101      	bne.n	8001920 <HAL_GPIO_Init+0x1e0>
 800191c:	2303      	movs	r3, #3
 800191e:	e006      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001920:	2304      	movs	r3, #4
 8001922:	e004      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001924:	2302      	movs	r3, #2
 8001926:	e002      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 8001928:	2301      	movs	r3, #1
 800192a:	e000      	b.n	800192e <HAL_GPIO_Init+0x1ee>
 800192c:	2300      	movs	r3, #0
 800192e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001930:	f002 0203 	and.w	r2, r2, #3
 8001934:	0092      	lsls	r2, r2, #2
 8001936:	4093      	lsls	r3, r2
 8001938:	68fa      	ldr	r2, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800193e:	492f      	ldr	r1, [pc, #188]	@ (80019fc <HAL_GPIO_Init+0x2bc>)
 8001940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d006      	beq.n	8001966 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001958:	4b2d      	ldr	r3, [pc, #180]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195a:	689a      	ldr	r2, [r3, #8]
 800195c:	492c      	ldr	r1, [pc, #176]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	4313      	orrs	r3, r2
 8001962:	608b      	str	r3, [r1, #8]
 8001964:	e006      	b.n	8001974 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	43db      	mvns	r3, r3
 800196e:	4928      	ldr	r1, [pc, #160]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001970:	4013      	ands	r3, r2
 8001972:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d006      	beq.n	800198e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001980:	4b23      	ldr	r3, [pc, #140]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001982:	68da      	ldr	r2, [r3, #12]
 8001984:	4922      	ldr	r1, [pc, #136]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	60cb      	str	r3, [r1, #12]
 800198c:	e006      	b.n	800199c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001990:	68da      	ldr	r2, [r3, #12]
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	43db      	mvns	r3, r3
 8001996:	491e      	ldr	r1, [pc, #120]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 8001998:	4013      	ands	r3, r2
 800199a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d006      	beq.n	80019b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019a8:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4918      	ldr	r1, [pc, #96]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	43db      	mvns	r3, r3
 80019be:	4914      	ldr	r1, [pc, #80]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019c0:	4013      	ands	r3, r2
 80019c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d021      	beq.n	8001a14 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	490e      	ldr	r1, [pc, #56]	@ (8001a10 <HAL_GPIO_Init+0x2d0>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	4313      	orrs	r3, r2
 80019da:	600b      	str	r3, [r1, #0]
 80019dc:	e021      	b.n	8001a22 <HAL_GPIO_Init+0x2e2>
 80019de:	bf00      	nop
 80019e0:	10320000 	.word	0x10320000
 80019e4:	10310000 	.word	0x10310000
 80019e8:	10220000 	.word	0x10220000
 80019ec:	10210000 	.word	0x10210000
 80019f0:	10120000 	.word	0x10120000
 80019f4:	10110000 	.word	0x10110000
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	40010800 	.word	0x40010800
 8001a04:	40010c00 	.word	0x40010c00
 8001a08:	40011000 	.word	0x40011000
 8001a0c:	40011400 	.word	0x40011400
 8001a10:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a14:	4b0b      	ldr	r3, [pc, #44]	@ (8001a44 <HAL_GPIO_Init+0x304>)
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	4909      	ldr	r1, [pc, #36]	@ (8001a44 <HAL_GPIO_Init+0x304>)
 8001a1e:	4013      	ands	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a24:	3301      	adds	r3, #1
 8001a26:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	f47f ae8e 	bne.w	8001754 <HAL_GPIO_Init+0x14>
  }
}
 8001a38:	bf00      	nop
 8001a3a:	bf00      	nop
 8001a3c:	372c      	adds	r7, #44	@ 0x2c
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001a64:	e003      	b.n	8001a6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a66:	887b      	ldrh	r3, [r7, #2]
 8001a68:	041a      	lsls	r2, r3, #16
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	611a      	str	r2, [r3, #16]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr

08001a78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d101      	bne.n	8001a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e272      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	f000 8087 	beq.w	8001ba6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a98:	4b92      	ldr	r3, [pc, #584]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 030c 	and.w	r3, r3, #12
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d00c      	beq.n	8001abe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aa4:	4b8f      	ldr	r3, [pc, #572]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 030c 	and.w	r3, r3, #12
 8001aac:	2b08      	cmp	r3, #8
 8001aae:	d112      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
 8001ab0:	4b8c      	ldr	r3, [pc, #560]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001abc:	d10b      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001abe:	4b89      	ldr	r3, [pc, #548]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d06c      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d168      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e24c      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ade:	d106      	bne.n	8001aee <HAL_RCC_OscConfig+0x76>
 8001ae0:	4b80      	ldr	r3, [pc, #512]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a7f      	ldr	r2, [pc, #508]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001ae6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001aea:	6013      	str	r3, [r2, #0]
 8001aec:	e02e      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10c      	bne.n	8001b10 <HAL_RCC_OscConfig+0x98>
 8001af6:	4b7b      	ldr	r3, [pc, #492]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a7a      	ldr	r2, [pc, #488]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001afc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b00:	6013      	str	r3, [r2, #0]
 8001b02:	4b78      	ldr	r3, [pc, #480]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a77      	ldr	r2, [pc, #476]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b08:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0xbc>
 8001b1a:	4b72      	ldr	r3, [pc, #456]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a71      	ldr	r2, [pc, #452]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a6e      	ldr	r2, [pc, #440]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xd4>
 8001b34:	4b6b      	ldr	r3, [pc, #428]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a6a      	ldr	r2, [pc, #424]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b68      	ldr	r3, [pc, #416]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a67      	ldr	r2, [pc, #412]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff fc58 	bl	8001408 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff fc54 	bl	8001408 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e200      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b5d      	ldr	r3, [pc, #372]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xe4>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff fc44 	bl	8001408 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff fc40 	bl	8001408 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	@ 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1ec      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b53      	ldr	r3, [pc, #332]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x10c>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bb2:	4b4c      	ldr	r3, [pc, #304]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001bbe:	4b49      	ldr	r3, [pc, #292]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
 8001bca:	4b46      	ldr	r3, [pc, #280]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b43      	ldr	r3, [pc, #268]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691b      	ldr	r3, [r3, #16]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1c0      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b3d      	ldr	r3, [pc, #244]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4939      	ldr	r1, [pc, #228]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b36      	ldr	r3, [pc, #216]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff fbf9 	bl	8001408 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fbf5 	bl	8001408 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e1a1      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4927      	ldr	r1, [pc, #156]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b26      	ldr	r3, [pc, #152]	@ (8001ce8 <HAL_RCC_OscConfig+0x270>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fbd8 	bl	8001408 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff fbd4 	bl	8001408 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e180      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d03a      	beq.n	8001cfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d019      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b17      	ldr	r3, [pc, #92]	@ (8001cec <HAL_RCC_OscConfig+0x274>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c94:	f7ff fbb8 	bl	8001408 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff fbb4 	bl	8001408 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e160      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ce4 <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001cba:	2001      	movs	r0, #1
 8001cbc:	f000 fafe 	bl	80022bc <RCC_Delay>
 8001cc0:	e01c      	b.n	8001cfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <HAL_RCC_OscConfig+0x274>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc8:	f7ff fb9e 	bl	8001408 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cce:	e00f      	b.n	8001cf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff fb9a 	bl	8001408 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d908      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e146      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	42420000 	.word	0x42420000
 8001cec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4b92      	ldr	r3, [pc, #584]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf4:	f003 0302 	and.w	r3, r3, #2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e9      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80a6 	beq.w	8001e56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0e:	4b8b      	ldr	r3, [pc, #556]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d10:	69db      	ldr	r3, [r3, #28]
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10d      	bne.n	8001d36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1a:	4b88      	ldr	r3, [pc, #544]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	69db      	ldr	r3, [r3, #28]
 8001d1e:	4a87      	ldr	r2, [pc, #540]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d24:	61d3      	str	r3, [r2, #28]
 8001d26:	4b85      	ldr	r3, [pc, #532]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d32:	2301      	movs	r3, #1
 8001d34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d36:	4b82      	ldr	r3, [pc, #520]	@ (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d118      	bne.n	8001d74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d42:	4b7f      	ldr	r3, [pc, #508]	@ (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7e      	ldr	r2, [pc, #504]	@ (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d4e:	f7ff fb5b 	bl	8001408 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d56:	f7ff fb57 	bl	8001408 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b64      	cmp	r3, #100	@ 0x64
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e103      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d68:	4b75      	ldr	r3, [pc, #468]	@ (8001f40 <HAL_RCC_OscConfig+0x4c8>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d0f0      	beq.n	8001d56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x312>
 8001d7c:	4b6f      	ldr	r3, [pc, #444]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a6e      	ldr	r2, [pc, #440]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	f043 0301 	orr.w	r3, r3, #1
 8001d86:	6213      	str	r3, [r2, #32]
 8001d88:	e02d      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x334>
 8001d92:	4b6a      	ldr	r3, [pc, #424]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	6a1b      	ldr	r3, [r3, #32]
 8001d96:	4a69      	ldr	r2, [pc, #420]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6213      	str	r3, [r2, #32]
 8001d9e:	4b67      	ldr	r3, [pc, #412]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	4a66      	ldr	r2, [pc, #408]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6213      	str	r3, [r2, #32]
 8001daa:	e01c      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d10c      	bne.n	8001dce <HAL_RCC_OscConfig+0x356>
 8001db4:	4b61      	ldr	r3, [pc, #388]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001db6:	6a1b      	ldr	r3, [r3, #32]
 8001db8:	4a60      	ldr	r2, [pc, #384]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	f043 0304 	orr.w	r3, r3, #4
 8001dbe:	6213      	str	r3, [r2, #32]
 8001dc0:	4b5e      	ldr	r3, [pc, #376]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a5d      	ldr	r2, [pc, #372]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6213      	str	r3, [r2, #32]
 8001dcc:	e00b      	b.n	8001de6 <HAL_RCC_OscConfig+0x36e>
 8001dce:	4b5b      	ldr	r3, [pc, #364]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dd0:	6a1b      	ldr	r3, [r3, #32]
 8001dd2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001dd4:	f023 0301 	bic.w	r3, r3, #1
 8001dd8:	6213      	str	r3, [r2, #32]
 8001dda:	4b58      	ldr	r3, [pc, #352]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a57      	ldr	r2, [pc, #348]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001de0:	f023 0304 	bic.w	r3, r3, #4
 8001de4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d015      	beq.n	8001e1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dee:	f7ff fb0b 	bl	8001408 <HAL_GetTick>
 8001df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e00a      	b.n	8001e0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff fb07 	bl	8001408 <HAL_GetTick>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	1ad3      	subs	r3, r2, r3
 8001e00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e0b1      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e0c:	4b4b      	ldr	r3, [pc, #300]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ee      	beq.n	8001df6 <HAL_RCC_OscConfig+0x37e>
 8001e18:	e014      	b.n	8001e44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff faf5 	bl	8001408 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff faf1 	bl	8001408 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e09b      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e38:	4b40      	ldr	r3, [pc, #256]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1ee      	bne.n	8001e22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e44:	7dfb      	ldrb	r3, [r7, #23]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b3c      	ldr	r3, [pc, #240]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	4a3b      	ldr	r2, [pc, #236]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8087 	beq.w	8001f6e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e60:	4b36      	ldr	r3, [pc, #216]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d061      	beq.n	8001f30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	69db      	ldr	r3, [r3, #28]
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d146      	bne.n	8001f02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e74:	4b33      	ldr	r3, [pc, #204]	@ (8001f44 <HAL_RCC_OscConfig+0x4cc>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e7a:	f7ff fac5 	bl	8001408 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e82:	f7ff fac1 	bl	8001408 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e06d      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e94:	4b29      	ldr	r3, [pc, #164]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1f0      	bne.n	8001e82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea8:	d108      	bne.n	8001ebc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eaa:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	4921      	ldr	r1, [pc, #132]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ebc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a19      	ldr	r1, [r3, #32]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ecc:	430b      	orrs	r3, r1
 8001ece:	491b      	ldr	r1, [pc, #108]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_RCC_OscConfig+0x4cc>)
 8001ed6:	2201      	movs	r2, #1
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff fa95 	bl	8001408 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff fa91 	bl	8001408 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e03d      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ef4:	4b11      	ldr	r3, [pc, #68]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d0f0      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x46a>
 8001f00:	e035      	b.n	8001f6e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_RCC_OscConfig+0x4cc>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f08:	f7ff fa7e 	bl	8001408 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f10:	f7ff fa7a 	bl	8001408 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e026      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d1f0      	bne.n	8001f10 <HAL_RCC_OscConfig+0x498>
 8001f2e:	e01e      	b.n	8001f6e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d107      	bne.n	8001f48 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e019      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
 8001f44:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f48:	4b0b      	ldr	r3, [pc, #44]	@ (8001f78 <HAL_RCC_OscConfig+0x500>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d106      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000

08001f7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0d0      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b6a      	ldr	r3, [pc, #424]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0307 	and.w	r3, r3, #7
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d910      	bls.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b67      	ldr	r3, [pc, #412]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f023 0207 	bic.w	r2, r3, #7
 8001fa6:	4965      	ldr	r1, [pc, #404]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fae:	4b63      	ldr	r3, [pc, #396]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	683a      	ldr	r2, [r7, #0]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e0b8      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d020      	beq.n	800200e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0304 	and.w	r3, r3, #4
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d005      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd8:	4b59      	ldr	r3, [pc, #356]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4a58      	ldr	r2, [pc, #352]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001fde:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fe2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0308 	and.w	r3, r3, #8
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d005      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff0:	4b53      	ldr	r3, [pc, #332]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	4a52      	ldr	r2, [pc, #328]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001ffa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ffc:	4b50      	ldr	r3, [pc, #320]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	494d      	ldr	r1, [pc, #308]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800200a:	4313      	orrs	r3, r2
 800200c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d040      	beq.n	800209c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d107      	bne.n	8002032 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002022:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d115      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e07f      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b41      	ldr	r3, [pc, #260]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e073      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	4b3d      	ldr	r3, [pc, #244]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4936      	ldr	r1, [pc, #216]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002068:	4313      	orrs	r3, r2
 800206a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206c:	f7ff f9cc 	bl	8001408 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7ff f9c8 	bl	8001408 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e053      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b27      	ldr	r3, [pc, #156]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d210      	bcs.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b24      	ldr	r3, [pc, #144]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f023 0207 	bic.w	r2, r3, #7
 80020b2:	4922      	ldr	r1, [pc, #136]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ba:	4b20      	ldr	r3, [pc, #128]	@ (800213c <HAL_RCC_ClockConfig+0x1c0>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d001      	beq.n	80020cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e032      	b.n	8002132 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d008      	beq.n	80020ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d8:	4b19      	ldr	r3, [pc, #100]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4916      	ldr	r1, [pc, #88]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020e6:	4313      	orrs	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0308 	and.w	r3, r3, #8
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80020f6:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	490e      	ldr	r1, [pc, #56]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002106:	4313      	orrs	r3, r2
 8002108:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800210a:	f000 f821 	bl	8002150 <HAL_RCC_GetSysClockFreq>
 800210e:	4602      	mov	r2, r0
 8002110:	4b0b      	ldr	r3, [pc, #44]	@ (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	091b      	lsrs	r3, r3, #4
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	490a      	ldr	r1, [pc, #40]	@ (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	5ccb      	ldrb	r3, [r1, r3]
 800211e:	fa22 f303 	lsr.w	r3, r2, r3
 8002122:	4a09      	ldr	r2, [pc, #36]	@ (8002148 <HAL_RCC_ClockConfig+0x1cc>)
 8002124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_RCC_ClockConfig+0x1d0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4618      	mov	r0, r3
 800212c:	f7ff f836 	bl	800119c <HAL_InitTick>

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40022000 	.word	0x40022000
 8002140:	40021000 	.word	0x40021000
 8002144:	08007374 	.word	0x08007374
 8002148:	2000013c 	.word	0x2000013c
 800214c:	20000140 	.word	0x20000140

08002150 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	b087      	sub	sp, #28
 8002154:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	2300      	movs	r3, #0
 800215c:	60bb      	str	r3, [r7, #8]
 800215e:	2300      	movs	r3, #0
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	2300      	movs	r3, #0
 8002164:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800216a:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b04      	cmp	r3, #4
 8002178:	d002      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0x30>
 800217a:	2b08      	cmp	r3, #8
 800217c:	d003      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x36>
 800217e:	e027      	b.n	80021d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002182:	613b      	str	r3, [r7, #16]
      break;
 8002184:	e027      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	0c9b      	lsrs	r3, r3, #18
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	4a17      	ldr	r2, [pc, #92]	@ (80021ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8002190:	5cd3      	ldrb	r3, [r2, r3]
 8002192:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800219e:	4b11      	ldr	r3, [pc, #68]	@ (80021e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	0c5b      	lsrs	r3, r3, #17
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80021aa:	5cd3      	ldrb	r3, [r2, r3]
 80021ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a0d      	ldr	r2, [pc, #52]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021b2:	fb03 f202 	mul.w	r2, r3, r2
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	e004      	b.n	80021ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a0c      	ldr	r2, [pc, #48]	@ (80021f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80021c4:	fb02 f303 	mul.w	r3, r2, r3
 80021c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	613b      	str	r3, [r7, #16]
      break;
 80021ce:	e002      	b.n	80021d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80021d2:	613b      	str	r3, [r7, #16]
      break;
 80021d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d6:	693b      	ldr	r3, [r7, #16]
}
 80021d8:	4618      	mov	r0, r3
 80021da:	371c      	adds	r7, #28
 80021dc:	46bd      	mov	sp, r7
 80021de:	bc80      	pop	{r7}
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000
 80021e8:	007a1200 	.word	0x007a1200
 80021ec:	0800738c 	.word	0x0800738c
 80021f0:	0800739c 	.word	0x0800739c
 80021f4:	003d0900 	.word	0x003d0900

080021f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021fc:	4b02      	ldr	r3, [pc, #8]	@ (8002208 <HAL_RCC_GetHCLKFreq+0x10>)
 80021fe:	681b      	ldr	r3, [r3, #0]
}
 8002200:	4618      	mov	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	2000013c 	.word	0x2000013c

0800220c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002210:	f7ff fff2 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 8002214:	4602      	mov	r2, r0
 8002216:	4b05      	ldr	r3, [pc, #20]	@ (800222c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	4903      	ldr	r1, [pc, #12]	@ (8002230 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002222:	5ccb      	ldrb	r3, [r1, r3]
 8002224:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002228:	4618      	mov	r0, r3
 800222a:	bd80      	pop	{r7, pc}
 800222c:	40021000 	.word	0x40021000
 8002230:	08007384 	.word	0x08007384

08002234 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002238:	f7ff ffde 	bl	80021f8 <HAL_RCC_GetHCLKFreq>
 800223c:	4602      	mov	r2, r0
 800223e:	4b05      	ldr	r3, [pc, #20]	@ (8002254 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	0adb      	lsrs	r3, r3, #11
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	4903      	ldr	r1, [pc, #12]	@ (8002258 <HAL_RCC_GetPCLK2Freq+0x24>)
 800224a:	5ccb      	ldrb	r3, [r1, r3]
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08007384 	.word	0x08007384

0800225c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	220f      	movs	r2, #15
 800226a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800226c:	4b11      	ldr	r3, [pc, #68]	@ (80022b4 <HAL_RCC_GetClockConfig+0x58>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f003 0203 	and.w	r2, r3, #3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002278:	4b0e      	ldr	r3, [pc, #56]	@ (80022b4 <HAL_RCC_GetClockConfig+0x58>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002284:	4b0b      	ldr	r3, [pc, #44]	@ (80022b4 <HAL_RCC_GetClockConfig+0x58>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002290:	4b08      	ldr	r3, [pc, #32]	@ (80022b4 <HAL_RCC_GetClockConfig+0x58>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_RCC_GetClockConfig+0x5c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0207 	and.w	r2, r3, #7
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bc80      	pop	{r7}
 80022b2:	4770      	bx	lr
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40022000 	.word	0x40022000

080022bc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <RCC_Delay+0x34>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a0a      	ldr	r2, [pc, #40]	@ (80022f4 <RCC_Delay+0x38>)
 80022ca:	fba2 2303 	umull	r2, r3, r2, r3
 80022ce:	0a5b      	lsrs	r3, r3, #9
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	fb02 f303 	mul.w	r3, r2, r3
 80022d6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022d8:	bf00      	nop
  }
  while (Delay --);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e5a      	subs	r2, r3, #1
 80022de:	60fa      	str	r2, [r7, #12]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1f9      	bne.n	80022d8 <RCC_Delay+0x1c>
}
 80022e4:	bf00      	nop
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bc80      	pop	{r7}
 80022ee:	4770      	bx	lr
 80022f0:	2000013c 	.word	0x2000013c
 80022f4:	10624dd3 	.word	0x10624dd3

080022f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e041      	b.n	800238e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d106      	bne.n	8002324 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f7fe fdfc 	bl	8000f1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2202      	movs	r2, #2
 8002328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3304      	adds	r3, #4
 8002334:	4619      	mov	r1, r3
 8002336:	4610      	mov	r0, r2
 8002338:	f000 fd48 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2201      	movs	r2, #1
 8002340:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2201      	movs	r2, #1
 8002350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
	...

08002398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002398:	b480      	push	{r7}
 800239a:	b085      	sub	sp, #20
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d001      	beq.n	80023b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	e03a      	b.n	8002426 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f042 0201 	orr.w	r2, r2, #1
 80023c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a18      	ldr	r2, [pc, #96]	@ (8002430 <HAL_TIM_Base_Start_IT+0x98>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d00e      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x58>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023da:	d009      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x58>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a14      	ldr	r2, [pc, #80]	@ (8002434 <HAL_TIM_Base_Start_IT+0x9c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d004      	beq.n	80023f0 <HAL_TIM_Base_Start_IT+0x58>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a13      	ldr	r2, [pc, #76]	@ (8002438 <HAL_TIM_Base_Start_IT+0xa0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2b06      	cmp	r3, #6
 8002400:	d010      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f042 0201 	orr.w	r2, r2, #1
 8002410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002412:	e007      	b.n	8002424 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr
 8002430:	40012c00 	.word	0x40012c00
 8002434:	40000400 	.word	0x40000400
 8002438:	40000800 	.word	0x40000800

0800243c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e041      	b.n	80024d2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d106      	bne.n	8002468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 f839 	bl	80024da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2202      	movs	r2, #2
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3304      	adds	r3, #4
 8002478:	4619      	mov	r1, r3
 800247a:	4610      	mov	r0, r2
 800247c:	f000 fca6 	bl	8002dcc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2201      	movs	r2, #1
 80024c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024da:	b480      	push	{r7}
 80024dc:	b083      	sub	sp, #12
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
 80024f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d109      	bne.n	8002510 <HAL_TIM_PWM_Start+0x24>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e022      	b.n	8002556 <HAL_TIM_PWM_Start+0x6a>
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b04      	cmp	r3, #4
 8002514:	d109      	bne.n	800252a <HAL_TIM_PWM_Start+0x3e>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b01      	cmp	r3, #1
 8002520:	bf14      	ite	ne
 8002522:	2301      	movne	r3, #1
 8002524:	2300      	moveq	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	e015      	b.n	8002556 <HAL_TIM_PWM_Start+0x6a>
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b08      	cmp	r3, #8
 800252e:	d109      	bne.n	8002544 <HAL_TIM_PWM_Start+0x58>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	e008      	b.n	8002556 <HAL_TIM_PWM_Start+0x6a>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800254a:	b2db      	uxtb	r3, r3
 800254c:	2b01      	cmp	r3, #1
 800254e:	bf14      	ite	ne
 8002550:	2301      	movne	r3, #1
 8002552:	2300      	moveq	r3, #0
 8002554:	b2db      	uxtb	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e05e      	b.n	800261c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d104      	bne.n	800256e <HAL_TIM_PWM_Start+0x82>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800256c:	e013      	b.n	8002596 <HAL_TIM_PWM_Start+0xaa>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b04      	cmp	r3, #4
 8002572:	d104      	bne.n	800257e <HAL_TIM_PWM_Start+0x92>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800257c:	e00b      	b.n	8002596 <HAL_TIM_PWM_Start+0xaa>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	2b08      	cmp	r3, #8
 8002582:	d104      	bne.n	800258e <HAL_TIM_PWM_Start+0xa2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800258c:	e003      	b.n	8002596 <HAL_TIM_PWM_Start+0xaa>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2202      	movs	r2, #2
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2201      	movs	r2, #1
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 fea0 	bl	80032e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a1e      	ldr	r2, [pc, #120]	@ (8002624 <HAL_TIM_PWM_Start+0x138>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d107      	bne.n	80025be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a18      	ldr	r2, [pc, #96]	@ (8002624 <HAL_TIM_PWM_Start+0x138>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00e      	beq.n	80025e6 <HAL_TIM_PWM_Start+0xfa>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d0:	d009      	beq.n	80025e6 <HAL_TIM_PWM_Start+0xfa>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a14      	ldr	r2, [pc, #80]	@ (8002628 <HAL_TIM_PWM_Start+0x13c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d004      	beq.n	80025e6 <HAL_TIM_PWM_Start+0xfa>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a12      	ldr	r2, [pc, #72]	@ (800262c <HAL_TIM_PWM_Start+0x140>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d111      	bne.n	800260a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2b06      	cmp	r3, #6
 80025f6:	d010      	beq.n	800261a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002608:	e007      	b.n	800261a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f042 0201 	orr.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40012c00 	.word	0x40012c00
 8002628:	40000400 	.word	0x40000400
 800262c:	40000800 	.word	0x40000800

08002630 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b086      	sub	sp, #24
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e093      	b.n	800276c <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b00      	cmp	r3, #0
 800264e:	d106      	bne.n	800265e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2200      	movs	r2, #0
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7fe fc8f 	bl	8000f7c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2202      	movs	r2, #2
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	687a      	ldr	r2, [r7, #4]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002674:	f023 0307 	bic.w	r3, r3, #7
 8002678:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	3304      	adds	r3, #4
 8002682:	4619      	mov	r1, r3
 8002684:	4610      	mov	r0, r2
 8002686:	f000 fba1 	bl	8002dcc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	6a1b      	ldr	r3, [r3, #32]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026b2:	f023 0303 	bic.w	r3, r3, #3
 80026b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	699b      	ldr	r3, [r3, #24]
 80026c0:	021b      	lsls	r3, r3, #8
 80026c2:	4313      	orrs	r3, r2
 80026c4:	693a      	ldr	r2, [r7, #16]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80026d0:	f023 030c 	bic.w	r3, r3, #12
 80026d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80026dc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80026e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	68da      	ldr	r2, [r3, #12]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	69db      	ldr	r3, [r3, #28]
 80026ea:	021b      	lsls	r3, r3, #8
 80026ec:	4313      	orrs	r3, r2
 80026ee:	693a      	ldr	r2, [r7, #16]
 80026f0:	4313      	orrs	r3, r2
 80026f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	011a      	lsls	r2, r3, #4
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	6a1b      	ldr	r3, [r3, #32]
 80026fe:	031b      	lsls	r3, r3, #12
 8002700:	4313      	orrs	r3, r2
 8002702:	693a      	ldr	r2, [r7, #16]
 8002704:	4313      	orrs	r3, r2
 8002706:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800270e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4313      	orrs	r3, r2
 800271c:	68fa      	ldr	r2, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	697a      	ldr	r2, [r7, #20]
 8002728:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	693a      	ldr	r2, [r7, #16]
 8002730:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2201      	movs	r2, #1
 800273e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2201      	movs	r2, #1
 800274e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2201      	movs	r2, #1
 8002756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2201      	movs	r2, #1
 800275e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002784:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800278c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002794:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800279c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d110      	bne.n	80027c6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d102      	bne.n	80027b0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80027aa:	7b7b      	ldrb	r3, [r7, #13]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d001      	beq.n	80027b4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e069      	b.n	8002888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2202      	movs	r2, #2
 80027c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027c4:	e031      	b.n	800282a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d110      	bne.n	80027ee <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027cc:	7bbb      	ldrb	r3, [r7, #14]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d102      	bne.n	80027d8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80027d2:	7b3b      	ldrb	r3, [r7, #12]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d001      	beq.n	80027dc <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e055      	b.n	8002888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2202      	movs	r2, #2
 80027e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2202      	movs	r2, #2
 80027e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027ec:	e01d      	b.n	800282a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d108      	bne.n	8002806 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80027f4:	7bbb      	ldrb	r3, [r7, #14]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80027fa:	7b7b      	ldrb	r3, [r7, #13]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d102      	bne.n	8002806 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002800:	7b3b      	ldrb	r3, [r7, #12]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d001      	beq.n	800280a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e03e      	b.n	8002888 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2202      	movs	r2, #2
 8002816:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2202      	movs	r2, #2
 800281e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2202      	movs	r2, #2
 8002826:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <HAL_TIM_Encoder_Start+0xc4>
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	2b04      	cmp	r3, #4
 8002834:	d008      	beq.n	8002848 <HAL_TIM_Encoder_Start+0xd4>
 8002836:	e00f      	b.n	8002858 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2201      	movs	r2, #1
 800283e:	2100      	movs	r1, #0
 8002840:	4618      	mov	r0, r3
 8002842:	f000 fd4f 	bl	80032e4 <TIM_CCxChannelCmd>
      break;
 8002846:	e016      	b.n	8002876 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2201      	movs	r2, #1
 800284e:	2104      	movs	r1, #4
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fd47 	bl	80032e4 <TIM_CCxChannelCmd>
      break;
 8002856:	e00e      	b.n	8002876 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2201      	movs	r2, #1
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f000 fd3f 	bl	80032e4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2201      	movs	r2, #1
 800286c:	2104      	movs	r1, #4
 800286e:	4618      	mov	r0, r3
 8002870:	f000 fd38 	bl	80032e4 <TIM_CCxChannelCmd>
      break;
 8002874:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f042 0201 	orr.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	4618      	mov	r0, r3
 800288a:	3710      	adds	r7, #16
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d020      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f003 0302 	and.w	r3, r3, #2
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d01b      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f06f 0202 	mvn.w	r2, #2
 80028c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fa5a 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 80028e0:	e005      	b.n	80028ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 fa4d 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 fa5c 	bl	8002da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2200      	movs	r2, #0
 80028f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0204 	mvn.w	r2, #4
 8002910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2202      	movs	r2, #2
 8002916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 fa34 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 fa27 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa36 	bl	8002da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0208 	mvn.w	r2, #8
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2204      	movs	r2, #4
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	f003 0303 	and.w	r3, r3, #3
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fa0e 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 fa01 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fa10 	bl	8002da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0210 	mvn.w	r2, #16
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2208      	movs	r2, #8
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f9e8 	bl	8002d94 <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f9db 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f9ea 	bl	8002da6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00c      	beq.n	80029fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d007      	beq.n	80029fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0201 	mvn.w	r2, #1
 80029f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fa40 	bl	8000e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00c      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d007      	beq.n	8002a20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 fd3e 	bl	800349c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00c      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 f9ba 	bl	8002db8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00c      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	f003 0320 	and.w	r3, r3, #32
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d007      	beq.n	8002a68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f06f 0220 	mvn.w	r2, #32
 8002a60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 fd11 	bl	800348a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a68:	bf00      	nop
 8002a6a:	3710      	adds	r7, #16
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}

08002a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d101      	bne.n	8002a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	e0ae      	b.n	8002bec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2b0c      	cmp	r3, #12
 8002a9a:	f200 809f 	bhi.w	8002bdc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8002aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aa4:	08002ad9 	.word	0x08002ad9
 8002aa8:	08002bdd 	.word	0x08002bdd
 8002aac:	08002bdd 	.word	0x08002bdd
 8002ab0:	08002bdd 	.word	0x08002bdd
 8002ab4:	08002b19 	.word	0x08002b19
 8002ab8:	08002bdd 	.word	0x08002bdd
 8002abc:	08002bdd 	.word	0x08002bdd
 8002ac0:	08002bdd 	.word	0x08002bdd
 8002ac4:	08002b5b 	.word	0x08002b5b
 8002ac8:	08002bdd 	.word	0x08002bdd
 8002acc:	08002bdd 	.word	0x08002bdd
 8002ad0:	08002bdd 	.word	0x08002bdd
 8002ad4:	08002b9b 	.word	0x08002b9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68b9      	ldr	r1, [r7, #8]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 f9e2 	bl	8002ea8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699a      	ldr	r2, [r3, #24]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0208 	orr.w	r2, r2, #8
 8002af2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f022 0204 	bic.w	r2, r2, #4
 8002b02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6999      	ldr	r1, [r3, #24]
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	619a      	str	r2, [r3, #24]
      break;
 8002b16:	e064      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fa28 	bl	8002f74 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	699a      	ldr	r2, [r3, #24]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699a      	ldr	r2, [r3, #24]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6999      	ldr	r1, [r3, #24]
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	021a      	lsls	r2, r3, #8
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	619a      	str	r2, [r3, #24]
      break;
 8002b58:	e043      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68b9      	ldr	r1, [r7, #8]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fa71 	bl	8003048 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	69da      	ldr	r2, [r3, #28]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f042 0208 	orr.w	r2, r2, #8
 8002b74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	69da      	ldr	r2, [r3, #28]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0204 	bic.w	r2, r2, #4
 8002b84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	69d9      	ldr	r1, [r3, #28]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	61da      	str	r2, [r3, #28]
      break;
 8002b98:	e023      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f000 fabb 	bl	800311c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	69da      	ldr	r2, [r3, #28]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	69d9      	ldr	r1, [r3, #28]
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	021a      	lsls	r2, r3, #8
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	430a      	orrs	r2, r1
 8002bd8:	61da      	str	r2, [r3, #28]
      break;
 8002bda:	e002      	b.n	8002be2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	75fb      	strb	r3, [r7, #23]
      break;
 8002be0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d101      	bne.n	8002c10 <HAL_TIM_ConfigClockSource+0x1c>
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	e0b4      	b.n	8002d7a <HAL_TIM_ConfigClockSource+0x186>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2201      	movs	r2, #1
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002c2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002c36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68ba      	ldr	r2, [r7, #8]
 8002c3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c48:	d03e      	beq.n	8002cc8 <HAL_TIM_ConfigClockSource+0xd4>
 8002c4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c4e:	f200 8087 	bhi.w	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c56:	f000 8086 	beq.w	8002d66 <HAL_TIM_ConfigClockSource+0x172>
 8002c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c5e:	d87f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c60:	2b70      	cmp	r3, #112	@ 0x70
 8002c62:	d01a      	beq.n	8002c9a <HAL_TIM_ConfigClockSource+0xa6>
 8002c64:	2b70      	cmp	r3, #112	@ 0x70
 8002c66:	d87b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c68:	2b60      	cmp	r3, #96	@ 0x60
 8002c6a:	d050      	beq.n	8002d0e <HAL_TIM_ConfigClockSource+0x11a>
 8002c6c:	2b60      	cmp	r3, #96	@ 0x60
 8002c6e:	d877      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c70:	2b50      	cmp	r3, #80	@ 0x50
 8002c72:	d03c      	beq.n	8002cee <HAL_TIM_ConfigClockSource+0xfa>
 8002c74:	2b50      	cmp	r3, #80	@ 0x50
 8002c76:	d873      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c78:	2b40      	cmp	r3, #64	@ 0x40
 8002c7a:	d058      	beq.n	8002d2e <HAL_TIM_ConfigClockSource+0x13a>
 8002c7c:	2b40      	cmp	r3, #64	@ 0x40
 8002c7e:	d86f      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c80:	2b30      	cmp	r3, #48	@ 0x30
 8002c82:	d064      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c84:	2b30      	cmp	r3, #48	@ 0x30
 8002c86:	d86b      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c88:	2b20      	cmp	r3, #32
 8002c8a:	d060      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c8c:	2b20      	cmp	r3, #32
 8002c8e:	d867      	bhi.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d05c      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c94:	2b10      	cmp	r3, #16
 8002c96:	d05a      	beq.n	8002d4e <HAL_TIM_ConfigClockSource+0x15a>
 8002c98:	e062      	b.n	8002d60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002caa:	f000 fafc 	bl	80032a6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002cbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68ba      	ldr	r2, [r7, #8]
 8002cc4:	609a      	str	r2, [r3, #8]
      break;
 8002cc6:	e04f      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002cd8:	f000 fae5 	bl	80032a6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002cea:	609a      	str	r2, [r3, #8]
      break;
 8002cec:	e03c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	f000 fa5c 	bl	80031b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2150      	movs	r1, #80	@ 0x50
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fab3 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d0c:	e02c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	f000 fa7a 	bl	8003214 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2160      	movs	r1, #96	@ 0x60
 8002d26:	4618      	mov	r0, r3
 8002d28:	f000 faa3 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d2c:	e01c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f000 fa3c 	bl	80031b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	2140      	movs	r1, #64	@ 0x40
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fa93 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d4c:	e00c      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	4610      	mov	r0, r2
 8002d5a:	f000 fa8a 	bl	8003272 <TIM_ITRx_SetConfig>
      break;
 8002d5e:	e003      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d60:	2301      	movs	r3, #1
 8002d62:	73fb      	strb	r3, [r7, #15]
      break;
 8002d64:	e000      	b.n	8002d68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dae:	bf00      	nop
 8002db0:	370c      	adds	r7, #12
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr
	...

08002dcc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a2f      	ldr	r2, [pc, #188]	@ (8002e9c <TIM_Base_SetConfig+0xd0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00b      	beq.n	8002dfc <TIM_Base_SetConfig+0x30>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dea:	d007      	beq.n	8002dfc <TIM_Base_SetConfig+0x30>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <TIM_Base_SetConfig+0xd4>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d003      	beq.n	8002dfc <TIM_Base_SetConfig+0x30>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a2b      	ldr	r2, [pc, #172]	@ (8002ea4 <TIM_Base_SetConfig+0xd8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d108      	bne.n	8002e0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a22      	ldr	r2, [pc, #136]	@ (8002e9c <TIM_Base_SetConfig+0xd0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d00b      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	@ (8002ea0 <TIM_Base_SetConfig+0xd4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x62>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1e      	ldr	r2, [pc, #120]	@ (8002ea4 <TIM_Base_SetConfig+0xd8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	695b      	ldr	r3, [r3, #20]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	689a      	ldr	r2, [r3, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a0d      	ldr	r2, [pc, #52]	@ (8002e9c <TIM_Base_SetConfig+0xd0>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d103      	bne.n	8002e74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f023 0201 	bic.w	r2, r3, #1
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  }
}
 8002e92:	bf00      	nop
 8002e94:	3714      	adds	r7, #20
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr
 8002e9c:	40012c00 	.word	0x40012c00
 8002ea0:	40000400 	.word	0x40000400
 8002ea4:	40000800 	.word	0x40000800

08002ea8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b087      	sub	sp, #28
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	f023 0201 	bic.w	r2, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	f023 0303 	bic.w	r3, r3, #3
 8002ede:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68fa      	ldr	r2, [r7, #12]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	f023 0302 	bic.w	r3, r3, #2
 8002ef0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a1c      	ldr	r2, [pc, #112]	@ (8002f70 <TIM_OC1_SetConfig+0xc8>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d10c      	bne.n	8002f1e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	f023 0308 	bic.w	r3, r3, #8
 8002f0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a13      	ldr	r2, [pc, #76]	@ (8002f70 <TIM_OC1_SetConfig+0xc8>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d111      	bne.n	8002f4a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	693a      	ldr	r2, [r7, #16]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	621a      	str	r2, [r3, #32]
}
 8002f64:	bf00      	nop
 8002f66:	371c      	adds	r7, #28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bc80      	pop	{r7}
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop
 8002f70:	40012c00 	.word	0x40012c00

08002f74 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b087      	sub	sp, #28
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a1b      	ldr	r3, [r3, #32]
 8002f88:	f023 0210 	bic.w	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f023 0320 	bic.w	r3, r3, #32
 8002fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	@ (8003044 <TIM_OC2_SetConfig+0xd0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d10d      	bne.n	8002ff0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	4a14      	ldr	r2, [pc, #80]	@ (8003044 <TIM_OC2_SetConfig+0xd0>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d113      	bne.n	8003020 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002ffe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003006:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	4313      	orrs	r3, r2
 8003012:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	693a      	ldr	r2, [r7, #16]
 8003024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68fa      	ldr	r2, [r7, #12]
 800302a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	40012c00 	.word	0x40012c00

08003048 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003048:	b480      	push	{r7}
 800304a:	b087      	sub	sp, #28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003076:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 0303 	bic.w	r3, r3, #3
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003090:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	021b      	lsls	r3, r3, #8
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	4313      	orrs	r3, r2
 800309c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003118 <TIM_OC3_SetConfig+0xd0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d10d      	bne.n	80030c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80030ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80030c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a14      	ldr	r2, [pc, #80]	@ (8003118 <TIM_OC3_SetConfig+0xd0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d113      	bne.n	80030f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80030d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80030d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	011b      	lsls	r3, r3, #4
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	621a      	str	r2, [r3, #32]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	40012c00 	.word	0x40012c00

0800311c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800311c:	b480      	push	{r7}
 800311e:	b087      	sub	sp, #28
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69db      	ldr	r3, [r3, #28]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800314a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a0f      	ldr	r2, [pc, #60]	@ (80031b4 <TIM_OC4_SetConfig+0x98>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d109      	bne.n	8003190 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	019b      	lsls	r3, r3, #6
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	4313      	orrs	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68fa      	ldr	r2, [r7, #12]
 800319a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	693a      	ldr	r2, [r7, #16]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	f023 0201 	bic.w	r2, r3, #1
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80031e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	f023 030a 	bic.w	r3, r3, #10
 80031f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	693a      	ldr	r2, [r7, #16]
 8003202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	bf00      	nop
 800320c:	371c      	adds	r7, #28
 800320e:	46bd      	mov	sp, r7
 8003210:	bc80      	pop	{r7}
 8003212:	4770      	bx	lr

08003214 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003214:	b480      	push	{r7}
 8003216:	b087      	sub	sp, #28
 8003218:	af00      	add	r7, sp, #0
 800321a:	60f8      	str	r0, [r7, #12]
 800321c:	60b9      	str	r1, [r7, #8]
 800321e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6a1b      	ldr	r3, [r3, #32]
 800322a:	f023 0210 	bic.w	r2, r3, #16
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800323e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	031b      	lsls	r3, r3, #12
 8003244:	693a      	ldr	r2, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003250:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	697a      	ldr	r2, [r7, #20]
 8003258:	4313      	orrs	r3, r2
 800325a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	697a      	ldr	r2, [r7, #20]
 8003266:	621a      	str	r2, [r3, #32]
}
 8003268:	bf00      	nop
 800326a:	371c      	adds	r7, #28
 800326c:	46bd      	mov	sp, r7
 800326e:	bc80      	pop	{r7}
 8003270:	4770      	bx	lr

08003272 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003272:	b480      	push	{r7}
 8003274:	b085      	sub	sp, #20
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
 800327a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003288:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4313      	orrs	r3, r2
 8003290:	f043 0307 	orr.w	r3, r3, #7
 8003294:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68fa      	ldr	r2, [r7, #12]
 800329a:	609a      	str	r2, [r3, #8]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b087      	sub	sp, #28
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	60f8      	str	r0, [r7, #12]
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80032c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	021a      	lsls	r2, r3, #8
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	431a      	orrs	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	4313      	orrs	r3, r2
 80032ce:	697a      	ldr	r2, [r7, #20]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	609a      	str	r2, [r3, #8]
}
 80032da:	bf00      	nop
 80032dc:	371c      	adds	r7, #28
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b087      	sub	sp, #28
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	f003 031f 	and.w	r3, r3, #31
 80032f6:	2201      	movs	r2, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6a1a      	ldr	r2, [r3, #32]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	43db      	mvns	r3, r3
 8003306:	401a      	ands	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6a1a      	ldr	r2, [r3, #32]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	f003 031f 	and.w	r3, r3, #31
 8003316:	6879      	ldr	r1, [r7, #4]
 8003318:	fa01 f303 	lsl.w	r3, r1, r3
 800331c:	431a      	orrs	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	621a      	str	r2, [r3, #32]
}
 8003322:	bf00      	nop
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800333c:	2b01      	cmp	r3, #1
 800333e:	d101      	bne.n	8003344 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003340:	2302      	movs	r3, #2
 8003342:	e046      	b.n	80033d2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2202      	movs	r2, #2
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800336a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003390:	d009      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a12      	ldr	r2, [pc, #72]	@ (80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a10      	ldr	r2, [pc, #64]	@ (80033e4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d10c      	bne.n	80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80033ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68ba      	ldr	r2, [r7, #8]
 80033be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3714      	adds	r7, #20
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bc80      	pop	{r7}
 80033da:	4770      	bx	lr
 80033dc:	40012c00 	.word	0x40012c00
 80033e0:	40000400 	.word	0x40000400
 80033e4:	40000800 	.word	0x40000800

080033e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003400:	2302      	movs	r3, #2
 8003402:	e03d      	b.n	8003480 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	4313      	orrs	r3, r2
 8003418:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	4313      	orrs	r3, r2
 8003426:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	4313      	orrs	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	bc80      	pop	{r7}
 8003488:	4770      	bx	lr

0800348a <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003492:	bf00      	nop
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr

0800349c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr

080034ae <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b082      	sub	sp, #8
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e042      	b.n	8003546 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7fd fe0f 	bl	80010f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2224      	movs	r2, #36	@ 0x24
 80034de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68da      	ldr	r2, [r3, #12]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034f0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fdb8 	bl	8004068 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003506:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	695a      	ldr	r2, [r3, #20]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003516:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003526:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2200      	movs	r2, #0
 800352c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2220      	movs	r2, #32
 8003532:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2220      	movs	r2, #32
 800353a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b08a      	sub	sp, #40	@ 0x28
 8003552:	af02      	add	r7, sp, #8
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b20      	cmp	r3, #32
 800356c:	d175      	bne.n	800365a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <HAL_UART_Transmit+0x2c>
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d101      	bne.n	800357e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e06e      	b.n	800365c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2221      	movs	r2, #33	@ 0x21
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800358c:	f7fd ff3c 	bl	8001408 <HAL_GetTick>
 8003590:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	88fa      	ldrh	r2, [r7, #6]
 800359c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a6:	d108      	bne.n	80035ba <HAL_UART_Transmit+0x6c>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	691b      	ldr	r3, [r3, #16]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035b0:	2300      	movs	r3, #0
 80035b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	e003      	b.n	80035c2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035c2:	e02e      	b.n	8003622 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	9300      	str	r3, [sp, #0]
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	2200      	movs	r2, #0
 80035cc:	2180      	movs	r1, #128	@ 0x80
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 fb1d 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2220      	movs	r2, #32
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e03a      	b.n	800365c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d10b      	bne.n	8003604 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	881b      	ldrh	r3, [r3, #0]
 80035f0:	461a      	mov	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035fa:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035fc:	69bb      	ldr	r3, [r7, #24]
 80035fe:	3302      	adds	r3, #2
 8003600:	61bb      	str	r3, [r7, #24]
 8003602:	e007      	b.n	8003614 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3301      	adds	r3, #1
 8003612:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003626:	b29b      	uxth	r3, r3
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1cb      	bne.n	80035c4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	2200      	movs	r2, #0
 8003634:	2140      	movs	r1, #64	@ 0x40
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f000 fae9 	bl	8003c0e <UART_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2220      	movs	r2, #32
 8003646:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e006      	b.n	800365c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	e000      	b.n	800365c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800365a:	2302      	movs	r3, #2
  }
}
 800365c:	4618      	mov	r0, r3
 800365e:	3720      	adds	r7, #32
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b084      	sub	sp, #16
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	4613      	mov	r3, r2
 8003670:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b20      	cmp	r3, #32
 800367c:	d112      	bne.n	80036a4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_UART_Receive_IT+0x26>
 8003684:	88fb      	ldrh	r3, [r7, #6]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e00b      	b.n	80036a6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003694:	88fb      	ldrh	r3, [r7, #6]
 8003696:	461a      	mov	r2, r3
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 fb10 	bl	8003cc0 <UART_Start_Receive_IT>
 80036a0:	4603      	mov	r3, r0
 80036a2:	e000      	b.n	80036a6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80036a4:	2302      	movs	r3, #2
  }
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0ba      	sub	sp, #232	@ 0xe8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036d6:	2300      	movs	r3, #0
 80036d8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036dc:	2300      	movs	r3, #0
 80036de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10f      	bne.n	8003716 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036fa:	f003 0320 	and.w	r3, r3, #32
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d009      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
 8003702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 fbec 	bl	8003eec <UART_Receive_IT>
      return;
 8003714:	e25b      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003716:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 80de 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
 8003720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003724:	f003 0301 	and.w	r3, r3, #1
 8003728:	2b00      	cmp	r3, #0
 800372a:	d106      	bne.n	800373a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800372c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003730:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003734:	2b00      	cmp	r3, #0
 8003736:	f000 80d1 	beq.w	80038dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800373a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00b      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
 8003746:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800374a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374e:	2b00      	cmp	r3, #0
 8003750:	d005      	beq.n	800375e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003756:	f043 0201 	orr.w	r2, r3, #1
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800375e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003762:	f003 0304 	and.w	r3, r3, #4
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00b      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
 800376a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800376e:	f003 0301 	and.w	r3, r3, #1
 8003772:	2b00      	cmp	r3, #0
 8003774:	d005      	beq.n	8003782 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377a:	f043 0202 	orr.w	r2, r3, #2
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
 800378e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003792:	f003 0301 	and.w	r3, r3, #1
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037aa:	f003 0308 	and.w	r3, r3, #8
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d011      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
 80037b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d105      	bne.n	80037ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ce:	f043 0208 	orr.w	r2, r3, #8
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 81f2 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
 80037ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d002      	beq.n	80037fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 fb77 	bl	8003eec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	bf14      	ite	ne
 800380c:	2301      	movne	r3, #1
 800380e:	2300      	moveq	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800381a:	f003 0308 	and.w	r3, r3, #8
 800381e:	2b00      	cmp	r3, #0
 8003820:	d103      	bne.n	800382a <HAL_UART_IRQHandler+0x17a>
 8003822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003826:	2b00      	cmp	r3, #0
 8003828:	d04f      	beq.n	80038ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fa81 	bl	8003d32 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	695b      	ldr	r3, [r3, #20]
 8003836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800383a:	2b00      	cmp	r3, #0
 800383c:	d041      	beq.n	80038c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	3314      	adds	r3, #20
 8003844:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003848:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800384c:	e853 3f00 	ldrex	r3, [r3]
 8003850:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003854:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003858:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800385c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	3314      	adds	r3, #20
 8003866:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800386a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800386e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003872:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003876:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800387a:	e841 2300 	strex	r3, r2, [r1]
 800387e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003882:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1d9      	bne.n	800383e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	2b00      	cmp	r3, #0
 8003890:	d013      	beq.n	80038ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	4a7e      	ldr	r2, [pc, #504]	@ (8003a90 <HAL_UART_IRQHandler+0x3e0>)
 8003898:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800389e:	4618      	mov	r0, r3
 80038a0:	f7fd fed6 	bl	8001650 <HAL_DMA_Abort_IT>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d016      	beq.n	80038d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038b4:	4610      	mov	r0, r2
 80038b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00e      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f993 	bl	8003be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e00a      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f98f 	bl	8003be6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	e006      	b.n	80038d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f98b 	bl	8003be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038d6:	e175      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d8:	bf00      	nop
    return;
 80038da:	e173      	b.n	8003bc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	f040 814f 	bne.w	8003b84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 8148 	beq.w	8003b84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f8:	f003 0310 	and.w	r3, r3, #16
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	f000 8141 	beq.w	8003b84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	60bb      	str	r3, [r7, #8]
 8003916:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003922:	2b00      	cmp	r3, #0
 8003924:	f000 80b6 	beq.w	8003a94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003934:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 8145 	beq.w	8003bc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003942:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003946:	429a      	cmp	r2, r3
 8003948:	f080 813e 	bcs.w	8003bc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003952:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b20      	cmp	r3, #32
 800395c:	f000 8088 	beq.w	8003a70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	330c      	adds	r3, #12
 8003966:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003976:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800397a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800397e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	330c      	adds	r3, #12
 8003988:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800398c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003990:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003998:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800399c:	e841 2300 	strex	r3, r2, [r1]
 80039a0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80039a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d1d9      	bne.n	8003960 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	3314      	adds	r3, #20
 80039b2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039be:	f023 0301 	bic.w	r3, r3, #1
 80039c2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	3314      	adds	r3, #20
 80039cc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039d0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e1      	bne.n	80039ac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3314      	adds	r3, #20
 80039ee:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039f2:	e853 3f00 	ldrex	r3, [r3]
 80039f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a0c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a0e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a10:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a14:	e841 2300 	strex	r3, r2, [r1]
 8003a18:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1e3      	bne.n	80039e8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	330c      	adds	r3, #12
 8003a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a38:	e853 3f00 	ldrex	r3, [r3]
 8003a3c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a3e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a40:	f023 0310 	bic.w	r3, r3, #16
 8003a44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a52:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a54:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a56:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a58:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a5a:	e841 2300 	strex	r3, r2, [r1]
 8003a5e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1e3      	bne.n	8003a2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd fdb5 	bl	80015da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2202      	movs	r2, #2
 8003a74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	4619      	mov	r1, r3
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f8b6 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a8c:	e09c      	b.n	8003bc8 <HAL_UART_IRQHandler+0x518>
 8003a8e:	bf00      	nop
 8003a90:	08003df7 	.word	0x08003df7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	f000 808e 	beq.w	8003bcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003ab0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 8089 	beq.w	8003bcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	330c      	adds	r3, #12
 8003ac0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ac4:	e853 3f00 	ldrex	r3, [r3]
 8003ac8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003acc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ad0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	330c      	adds	r3, #12
 8003ada:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ade:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ae0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e3      	bne.n	8003aba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3314      	adds	r3, #20
 8003af8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	623b      	str	r3, [r7, #32]
   return(result);
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3314      	adds	r3, #20
 8003b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b16:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e3      	bne.n	8003af2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2220      	movs	r2, #32
 8003b2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	330c      	adds	r3, #12
 8003b3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	e853 3f00 	ldrex	r3, [r3]
 8003b46:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f023 0310 	bic.w	r3, r3, #16
 8003b4e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	330c      	adds	r3, #12
 8003b58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b5c:	61fa      	str	r2, [r7, #28]
 8003b5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b60:	69b9      	ldr	r1, [r7, #24]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	e841 2300 	strex	r3, r2, [r1]
 8003b68:	617b      	str	r3, [r7, #20]
   return(result);
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1e3      	bne.n	8003b38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2202      	movs	r2, #2
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f83b 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b82:	e023      	b.n	8003bcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d009      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x4f4>
 8003b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f93e 	bl	8003e1e <UART_Transmit_IT>
    return;
 8003ba2:	e014      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00e      	beq.n	8003bce <HAL_UART_IRQHandler+0x51e>
 8003bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d008      	beq.n	8003bce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f000 f97d 	bl	8003ebc <UART_EndTransmit_IT>
    return;
 8003bc2:	e004      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
    return;
 8003bc4:	bf00      	nop
 8003bc6:	e002      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
      return;
 8003bc8:	bf00      	nop
 8003bca:	e000      	b.n	8003bce <HAL_UART_IRQHandler+0x51e>
      return;
 8003bcc:	bf00      	nop
  }
}
 8003bce:	37e8      	adds	r7, #232	@ 0xe8
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b083      	sub	sp, #12
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bc80      	pop	{r7}
 8003be4:	4770      	bx	lr

08003be6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003be6:	b480      	push	{r7}
 8003be8:	b083      	sub	sp, #12
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003bee:	bf00      	nop
 8003bf0:	370c      	adds	r7, #12
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bc80      	pop	{r7}
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	460b      	mov	r3, r1
 8003c02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr

08003c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c0e:	b580      	push	{r7, lr}
 8003c10:	b086      	sub	sp, #24
 8003c12:	af00      	add	r7, sp, #0
 8003c14:	60f8      	str	r0, [r7, #12]
 8003c16:	60b9      	str	r1, [r7, #8]
 8003c18:	603b      	str	r3, [r7, #0]
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c1e:	e03b      	b.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c20:	6a3b      	ldr	r3, [r7, #32]
 8003c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c26:	d037      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c28:	f7fd fbee 	bl	8001408 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	1ad3      	subs	r3, r2, r3
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d302      	bcc.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8003c38:	6a3b      	ldr	r3, [r7, #32]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e03a      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0304 	and.w	r3, r3, #4
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d023      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	2b80      	cmp	r3, #128	@ 0x80
 8003c54:	d020      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	2b40      	cmp	r3, #64	@ 0x40
 8003c5a:	d01d      	beq.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0308 	and.w	r3, r3, #8
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d116      	bne.n	8003c98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	617b      	str	r3, [r7, #20]
 8003c7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f856 	bl	8003d32 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2208      	movs	r2, #8
 8003c8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e00f      	b.n	8003cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	bf0c      	ite	eq
 8003ca8:	2301      	moveq	r3, #1
 8003caa:	2300      	movne	r3, #0
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	461a      	mov	r2, r3
 8003cb0:	79fb      	ldrb	r3, [r7, #7]
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d0b4      	beq.n	8003c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3718      	adds	r7, #24
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	88fa      	ldrh	r2, [r7, #6]
 8003cd8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	88fa      	ldrh	r2, [r7, #6]
 8003cde:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2222      	movs	r2, #34	@ 0x22
 8003cea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d007      	beq.n	8003d06 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68da      	ldr	r2, [r3, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d04:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	695a      	ldr	r2, [r3, #20]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f042 0201 	orr.w	r2, r2, #1
 8003d14:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	68da      	ldr	r2, [r3, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f042 0220 	orr.w	r2, r2, #32
 8003d24:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bc80      	pop	{r7}
 8003d30:	4770      	bx	lr

08003d32 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d32:	b480      	push	{r7}
 8003d34:	b095      	sub	sp, #84	@ 0x54
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	330c      	adds	r3, #12
 8003d40:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d44:	e853 3f00 	ldrex	r3, [r3]
 8003d48:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d50:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	330c      	adds	r3, #12
 8003d58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d5a:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e5      	bne.n	8003d3a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a3b      	ldr	r3, [r7, #32]
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d8e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d92:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d96:	e841 2300 	strex	r3, r2, [r1]
 8003d9a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1e5      	bne.n	8003d6e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d119      	bne.n	8003dde <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	330c      	adds	r3, #12
 8003db0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	e853 3f00 	ldrex	r3, [r3]
 8003db8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 0310 	bic.w	r3, r3, #16
 8003dc0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	330c      	adds	r3, #12
 8003dc8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dca:	61ba      	str	r2, [r7, #24]
 8003dcc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dce:	6979      	ldr	r1, [r7, #20]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	e841 2300 	strex	r3, r2, [r1]
 8003dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1e5      	bne.n	8003daa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003dec:	bf00      	nop
 8003dee:	3754      	adds	r7, #84	@ 0x54
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bc80      	pop	{r7}
 8003df4:	4770      	bx	lr

08003df6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b084      	sub	sp, #16
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f7ff fee8 	bl	8003be6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b085      	sub	sp, #20
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	2b21      	cmp	r3, #33	@ 0x21
 8003e30:	d13e      	bne.n	8003eb0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e3a:	d114      	bne.n	8003e66 <UART_Transmit_IT+0x48>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d110      	bne.n	8003e66 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a1b      	ldr	r3, [r3, #32]
 8003e48:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	881b      	ldrh	r3, [r3, #0]
 8003e4e:	461a      	mov	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e58:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	1c9a      	adds	r2, r3, #2
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	621a      	str	r2, [r3, #32]
 8003e64:	e008      	b.n	8003e78 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	1c59      	adds	r1, r3, #1
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	6211      	str	r1, [r2, #32]
 8003e70:	781a      	ldrb	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	4619      	mov	r1, r3
 8003e86:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10f      	bne.n	8003eac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68da      	ldr	r2, [r3, #12]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	e000      	b.n	8003eb2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003eb0:	2302      	movs	r3, #2
  }
}
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	3714      	adds	r7, #20
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bc80      	pop	{r7}
 8003eba:	4770      	bx	lr

08003ebc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ed2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff fe79 	bl	8003bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3708      	adds	r7, #8
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b08c      	sub	sp, #48	@ 0x30
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b22      	cmp	r3, #34	@ 0x22
 8003efe:	f040 80ae 	bne.w	800405e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f0a:	d117      	bne.n	8003f3c <UART_Receive_IT+0x50>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d113      	bne.n	8003f3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f34:	1c9a      	adds	r2, r3, #2
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f3a:	e026      	b.n	8003f8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f42:	2300      	movs	r3, #0
 8003f44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f4e:	d007      	beq.n	8003f60 <UART_Receive_IT+0x74>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <UART_Receive_IT+0x82>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d106      	bne.n	8003f6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	b2da      	uxtb	r2, r3
 8003f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f6a:	701a      	strb	r2, [r3, #0]
 8003f6c:	e008      	b.n	8003f80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f84:	1c5a      	adds	r2, r3, #1
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	3b01      	subs	r3, #1
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	4619      	mov	r1, r3
 8003f98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d15d      	bne.n	800405a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68da      	ldr	r2, [r3, #12]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 0220 	bic.w	r2, r2, #32
 8003fac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68da      	ldr	r2, [r3, #12]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fbc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	695a      	ldr	r2, [r3, #20]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f022 0201 	bic.w	r2, r2, #1
 8003fcc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d135      	bne.n	8004050 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	330c      	adds	r3, #12
 8003ff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f023 0310 	bic.w	r3, r3, #16
 8004000:	627b      	str	r3, [r7, #36]	@ 0x24
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	330c      	adds	r3, #12
 8004008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800400a:	623a      	str	r2, [r7, #32]
 800400c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800400e:	69f9      	ldr	r1, [r7, #28]
 8004010:	6a3a      	ldr	r2, [r7, #32]
 8004012:	e841 2300 	strex	r3, r2, [r1]
 8004016:	61bb      	str	r3, [r7, #24]
   return(result);
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1e5      	bne.n	8003fea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0310 	and.w	r3, r3, #16
 8004028:	2b10      	cmp	r3, #16
 800402a:	d10a      	bne.n	8004042 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800402c:	2300      	movs	r3, #0
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]
 8004040:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff fdd5 	bl	8003bf8 <HAL_UARTEx_RxEventCallback>
 800404e:	e002      	b.n	8004056 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f7fc fe6f 	bl	8000d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e002      	b.n	8004060 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800405e:	2302      	movs	r3, #2
  }
}
 8004060:	4618      	mov	r0, r3
 8004062:	3730      	adds	r7, #48	@ 0x30
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689a      	ldr	r2, [r3, #8]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80040a2:	f023 030c 	bic.w	r3, r3, #12
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	6812      	ldr	r2, [r2, #0]
 80040aa:	68b9      	ldr	r1, [r7, #8]
 80040ac:	430b      	orrs	r3, r1
 80040ae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	699a      	ldr	r2, [r3, #24]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2c      	ldr	r2, [pc, #176]	@ (800417c <UART_SetConfig+0x114>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d103      	bne.n	80040d8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040d0:	f7fe f8b0 	bl	8002234 <HAL_RCC_GetPCLK2Freq>
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	e002      	b.n	80040de <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d8:	f7fe f898 	bl	800220c <HAL_RCC_GetPCLK1Freq>
 80040dc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	4613      	mov	r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	441a      	add	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	4a22      	ldr	r2, [pc, #136]	@ (8004180 <UART_SetConfig+0x118>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	095b      	lsrs	r3, r3, #5
 80040fc:	0119      	lsls	r1, r3, #4
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4613      	mov	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	4413      	add	r3, r2
 8004106:	009a      	lsls	r2, r3, #2
 8004108:	441a      	add	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4b1a      	ldr	r3, [pc, #104]	@ (8004180 <UART_SetConfig+0x118>)
 8004116:	fba3 0302 	umull	r0, r3, r3, r2
 800411a:	095b      	lsrs	r3, r3, #5
 800411c:	2064      	movs	r0, #100	@ 0x64
 800411e:	fb00 f303 	mul.w	r3, r0, r3
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	3332      	adds	r3, #50	@ 0x32
 8004128:	4a15      	ldr	r2, [pc, #84]	@ (8004180 <UART_SetConfig+0x118>)
 800412a:	fba2 2303 	umull	r2, r3, r2, r3
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004134:	4419      	add	r1, r3
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009a      	lsls	r2, r3, #2
 8004140:	441a      	add	r2, r3
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	fbb2 f2f3 	udiv	r2, r2, r3
 800414c:	4b0c      	ldr	r3, [pc, #48]	@ (8004180 <UART_SetConfig+0x118>)
 800414e:	fba3 0302 	umull	r0, r3, r3, r2
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2064      	movs	r0, #100	@ 0x64
 8004156:	fb00 f303 	mul.w	r3, r0, r3
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	3332      	adds	r3, #50	@ 0x32
 8004160:	4a07      	ldr	r2, [pc, #28]	@ (8004180 <UART_SetConfig+0x118>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	095b      	lsrs	r3, r3, #5
 8004168:	f003 020f 	and.w	r2, r3, #15
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	440a      	add	r2, r1
 8004172:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}
 800417c:	40013800 	.word	0x40013800
 8004180:	51eb851f 	.word	0x51eb851f

08004184 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004184:	b480      	push	{r7}
 8004186:	b085      	sub	sp, #20
 8004188:	af00      	add	r7, sp, #0
 800418a:	4603      	mov	r3, r0
 800418c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800418e:	2300      	movs	r3, #0
 8004190:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004196:	2b84      	cmp	r3, #132	@ 0x84
 8004198:	d005      	beq.n	80041a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800419a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	4413      	add	r3, r2
 80041a2:	3303      	adds	r3, #3
 80041a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041a6:	68fb      	ldr	r3, [r7, #12]
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bc80      	pop	{r7}
 80041b0:	4770      	bx	lr

080041b2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b8:	f3ef 8305 	mrs	r3, IPSR
 80041bc:	607b      	str	r3, [r7, #4]
  return(result);
 80041be:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	bf14      	ite	ne
 80041c4:	2301      	movne	r3, #1
 80041c6:	2300      	moveq	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041d8:	f001 f924 	bl	8005424 <vTaskStartScheduler>
  
  return osOK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041e4:	b089      	sub	sp, #36	@ 0x24
 80041e6:	af04      	add	r7, sp, #16
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d020      	beq.n	8004236 <osThreadCreate+0x54>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01c      	beq.n	8004236 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685c      	ldr	r4, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691e      	ldr	r6, [r3, #16]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff ffb8 	bl	8004184 <makeFreeRtosPriority>
 8004214:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	695b      	ldr	r3, [r3, #20]
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800421e:	9202      	str	r2, [sp, #8]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	9100      	str	r1, [sp, #0]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	4632      	mov	r2, r6
 8004228:	4629      	mov	r1, r5
 800422a:	4620      	mov	r0, r4
 800422c:	f000 ff2d 	bl	800508a <xTaskCreateStatic>
 8004230:	4603      	mov	r3, r0
 8004232:	60fb      	str	r3, [r7, #12]
 8004234:	e01c      	b.n	8004270 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685c      	ldr	r4, [r3, #4]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004242:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800424a:	4618      	mov	r0, r3
 800424c:	f7ff ff9a 	bl	8004184 <makeFreeRtosPriority>
 8004250:	4602      	mov	r2, r0
 8004252:	f107 030c 	add.w	r3, r7, #12
 8004256:	9301      	str	r3, [sp, #4]
 8004258:	9200      	str	r2, [sp, #0]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	4632      	mov	r2, r6
 800425e:	4629      	mov	r1, r5
 8004260:	4620      	mov	r0, r4
 8004262:	f000 ff72 	bl	800514a <xTaskCreate>
 8004266:	4603      	mov	r3, r0
 8004268:	2b01      	cmp	r3, #1
 800426a:	d001      	beq.n	8004270 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800426c:	2300      	movs	r3, #0
 800426e:	e000      	b.n	8004272 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004270:	68fb      	ldr	r3, [r7, #12]
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800427a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800427a:	b580      	push	{r7, lr}
 800427c:	b084      	sub	sp, #16
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <osDelay+0x16>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	e000      	b.n	8004292 <osDelay+0x18>
 8004290:	2301      	movs	r3, #1
 8004292:	4618      	mov	r0, r3
 8004294:	f001 f890 	bl	80053b8 <vTaskDelay>
  
  return osOK;
 8004298:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800429a:	4618      	mov	r0, r3
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af02      	add	r7, sp, #8
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00f      	beq.n	80042d4 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d10a      	bne.n	80042d0 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2203      	movs	r2, #3
 80042c0:	9200      	str	r2, [sp, #0]
 80042c2:	2200      	movs	r2, #0
 80042c4:	2100      	movs	r1, #0
 80042c6:	2001      	movs	r0, #1
 80042c8:	f000 f9bc 	bl	8004644 <xQueueGenericCreateStatic>
 80042cc:	4603      	mov	r3, r0
 80042ce:	e016      	b.n	80042fe <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e014      	b.n	80042fe <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d110      	bne.n	80042fc <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80042da:	2203      	movs	r2, #3
 80042dc:	2100      	movs	r1, #0
 80042de:	2001      	movs	r0, #1
 80042e0:	f000 fa2d 	bl	800473e <xQueueGenericCreate>
 80042e4:	60f8      	str	r0, [r7, #12]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d005      	beq.n	80042f8 <osSemaphoreCreate+0x56>
 80042ec:	2300      	movs	r3, #0
 80042ee:	2200      	movs	r2, #0
 80042f0:	2100      	movs	r1, #0
 80042f2:	68f8      	ldr	r0, [r7, #12]
 80042f4:	f000 fa7e 	bl	80047f4 <xQueueGenericSend>
      return sema;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	e000      	b.n	80042fe <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80042fc:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}
	...

08004308 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004312:	2300      	movs	r3, #0
 8004314:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800431c:	2380      	movs	r3, #128	@ 0x80
 800431e:	e03a      	b.n	8004396 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800432a:	d103      	bne.n	8004334 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800432c:	f04f 33ff 	mov.w	r3, #4294967295
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	e009      	b.n	8004348 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d006      	beq.n	8004348 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d101      	bne.n	8004348 <osSemaphoreWait+0x40>
      ticks = 1;
 8004344:	2301      	movs	r3, #1
 8004346:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004348:	f7ff ff33 	bl	80041b2 <inHandlerMode>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d017      	beq.n	8004382 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	461a      	mov	r2, r3
 8004358:	2100      	movs	r1, #0
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 fcec 	bl	8004d38 <xQueueReceiveFromISR>
 8004360:	4603      	mov	r3, r0
 8004362:	2b01      	cmp	r3, #1
 8004364:	d001      	beq.n	800436a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004366:	23ff      	movs	r3, #255	@ 0xff
 8004368:	e015      	b.n	8004396 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d011      	beq.n	8004394 <osSemaphoreWait+0x8c>
 8004370:	4b0b      	ldr	r3, [pc, #44]	@ (80043a0 <osSemaphoreWait+0x98>)
 8004372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	e008      	b.n	8004394 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 fbc7 	bl	8004b18 <xQueueSemaphoreTake>
 800438a:	4603      	mov	r3, r0
 800438c:	2b01      	cmp	r3, #1
 800438e:	d001      	beq.n	8004394 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004390:	23ff      	movs	r3, #255	@ 0xff
 8004392:	e000      	b.n	8004396 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3710      	adds	r7, #16
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	e000ed04 	.word	0xe000ed04

080043a4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80043b4:	f7ff fefd 	bl	80041b2 <inHandlerMode>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d016      	beq.n	80043ec <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80043be:	f107 0308 	add.w	r3, r7, #8
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 fb17 	bl	80049f8 <xQueueGiveFromISR>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d001      	beq.n	80043d4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80043d0:	23ff      	movs	r3, #255	@ 0xff
 80043d2:	e017      	b.n	8004404 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d013      	beq.n	8004402 <osSemaphoreRelease+0x5e>
 80043da:	4b0c      	ldr	r3, [pc, #48]	@ (800440c <osSemaphoreRelease+0x68>)
 80043dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043e0:	601a      	str	r2, [r3, #0]
 80043e2:	f3bf 8f4f 	dsb	sy
 80043e6:	f3bf 8f6f 	isb	sy
 80043ea:	e00a      	b.n	8004402 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80043ec:	2300      	movs	r3, #0
 80043ee:	2200      	movs	r2, #0
 80043f0:	2100      	movs	r1, #0
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f9fe 	bl	80047f4 <xQueueGenericSend>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d001      	beq.n	8004402 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80043fe:	23ff      	movs	r3, #255	@ 0xff
 8004400:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004402:	68fb      	ldr	r3, [r7, #12]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f103 0208 	add.w	r2, r3, #8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f103 0208 	add.w	r2, r3, #8
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f103 0208 	add.w	r2, r3, #8
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	1c5a      	adds	r2, r3, #1
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	601a      	str	r2, [r3, #0]
}
 80044a2:	bf00      	nop
 80044a4:	3714      	adds	r7, #20
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044c2:	d103      	bne.n	80044cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e00c      	b.n	80044e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	3308      	adds	r3, #8
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e002      	b.n	80044da <vListInsert+0x2e>
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	60fb      	str	r3, [r7, #12]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d2f6      	bcs.n	80044d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685a      	ldr	r2, [r3, #4]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68fa      	ldr	r2, [r7, #12]
 80044fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	1c5a      	adds	r2, r3, #1
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	601a      	str	r2, [r3, #0]
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6892      	ldr	r2, [r2, #8]
 8004532:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6852      	ldr	r2, [r2, #4]
 800453c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d103      	bne.n	8004550 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	1e5a      	subs	r2, r3, #1
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
}
 8004564:	4618      	mov	r0, r3
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	4770      	bx	lr
	...

08004570 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10b      	bne.n	800459c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004588:	f383 8811 	msr	BASEPRI, r3
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	e7fd      	b.n	8004598 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800459c:	f001 fe66 	bl	800626c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045a8:	68f9      	ldr	r1, [r7, #12]
 80045aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045ac:	fb01 f303 	mul.w	r3, r1, r3
 80045b0:	441a      	add	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045cc:	3b01      	subs	r3, #1
 80045ce:	68f9      	ldr	r1, [r7, #12]
 80045d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045d2:	fb01 f303 	mul.w	r3, r1, r3
 80045d6:	441a      	add	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	22ff      	movs	r2, #255	@ 0xff
 80045e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	22ff      	movs	r2, #255	@ 0xff
 80045e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d114      	bne.n	800461c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01a      	beq.n	8004630 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	3310      	adds	r3, #16
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f95a 	bl	80058b8 <xTaskRemoveFromEventList>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d012      	beq.n	8004630 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800460a:	4b0d      	ldr	r3, [pc, #52]	@ (8004640 <xQueueGenericReset+0xd0>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	e009      	b.n	8004630 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	3310      	adds	r3, #16
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fef5 	bl	8004410 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	3324      	adds	r3, #36	@ 0x24
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff fef0 	bl	8004410 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004630:	f001 fe4c 	bl	80062cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004634:	2301      	movs	r3, #1
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	e000ed04 	.word	0xe000ed04

08004644 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004644:	b580      	push	{r7, lr}
 8004646:	b08e      	sub	sp, #56	@ 0x38
 8004648:	af02      	add	r7, sp, #8
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]
 8004650:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10b      	bne.n	8004670 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465c:	f383 8811 	msr	BASEPRI, r3
 8004660:	f3bf 8f6f 	isb	sy
 8004664:	f3bf 8f4f 	dsb	sy
 8004668:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800466a:	bf00      	nop
 800466c:	bf00      	nop
 800466e:	e7fd      	b.n	800466c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467a:	f383 8811 	msr	BASEPRI, r3
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f3bf 8f4f 	dsb	sy
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004688:	bf00      	nop
 800468a:	bf00      	nop
 800468c:	e7fd      	b.n	800468a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <xQueueGenericCreateStatic+0x56>
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <xQueueGenericCreateStatic+0x5a>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <xQueueGenericCreateStatic+0x5c>
 800469e:	2300      	movs	r3, #0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d10b      	bne.n	80046bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a8:	f383 8811 	msr	BASEPRI, r3
 80046ac:	f3bf 8f6f 	isb	sy
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	623b      	str	r3, [r7, #32]
}
 80046b6:	bf00      	nop
 80046b8:	bf00      	nop
 80046ba:	e7fd      	b.n	80046b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d102      	bne.n	80046c8 <xQueueGenericCreateStatic+0x84>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <xQueueGenericCreateStatic+0x88>
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <xQueueGenericCreateStatic+0x8a>
 80046cc:	2300      	movs	r3, #0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	61fb      	str	r3, [r7, #28]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046ea:	2348      	movs	r3, #72	@ 0x48
 80046ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	2b48      	cmp	r3, #72	@ 0x48
 80046f2:	d00b      	beq.n	800470c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80046f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f8:	f383 8811 	msr	BASEPRI, r3
 80046fc:	f3bf 8f6f 	isb	sy
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	61bb      	str	r3, [r7, #24]
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800470c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00d      	beq.n	8004734 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004720:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 f840 	bl	80047b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004736:	4618      	mov	r0, r3
 8004738:	3730      	adds	r7, #48	@ 0x30
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800473e:	b580      	push	{r7, lr}
 8004740:	b08a      	sub	sp, #40	@ 0x28
 8004742:	af02      	add	r7, sp, #8
 8004744:	60f8      	str	r0, [r7, #12]
 8004746:	60b9      	str	r1, [r7, #8]
 8004748:	4613      	mov	r3, r2
 800474a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10b      	bne.n	800476a <xQueueGenericCreate+0x2c>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	613b      	str	r3, [r7, #16]
}
 8004764:	bf00      	nop
 8004766:	bf00      	nop
 8004768:	e7fd      	b.n	8004766 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	fb02 f303 	mul.w	r3, r2, r3
 8004772:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	3348      	adds	r3, #72	@ 0x48
 8004778:	4618      	mov	r0, r3
 800477a:	f001 fe79 	bl	8006470 <pvPortMalloc>
 800477e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d011      	beq.n	80047aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004786:	69bb      	ldr	r3, [r7, #24]
 8004788:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	3348      	adds	r3, #72	@ 0x48
 800478e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004798:	79fa      	ldrb	r2, [r7, #7]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	4613      	mov	r3, r2
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	68b9      	ldr	r1, [r7, #8]
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 f805 	bl	80047b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047aa:	69bb      	ldr	r3, [r7, #24]
	}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3720      	adds	r7, #32
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}

080047b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d103      	bne.n	80047d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	e002      	b.n	80047d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80047e2:	2101      	movs	r1, #1
 80047e4:	69b8      	ldr	r0, [r7, #24]
 80047e6:	f7ff fec3 	bl	8004570 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	@ 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004802:	2300      	movs	r3, #0
 8004804:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800480a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <xQueueGenericSend+0x34>
	__asm volatile
 8004810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004822:	bf00      	nop
 8004824:	bf00      	nop
 8004826:	e7fd      	b.n	8004824 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d103      	bne.n	8004836 <xQueueGenericSend+0x42>
 800482e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <xQueueGenericSend+0x46>
 8004836:	2301      	movs	r3, #1
 8004838:	e000      	b.n	800483c <xQueueGenericSend+0x48>
 800483a:	2300      	movs	r3, #0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10b      	bne.n	8004858 <xQueueGenericSend+0x64>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004852:	bf00      	nop
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d103      	bne.n	8004866 <xQueueGenericSend+0x72>
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	2b01      	cmp	r3, #1
 8004864:	d101      	bne.n	800486a <xQueueGenericSend+0x76>
 8004866:	2301      	movs	r3, #1
 8004868:	e000      	b.n	800486c <xQueueGenericSend+0x78>
 800486a:	2300      	movs	r3, #0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10b      	bne.n	8004888 <xQueueGenericSend+0x94>
	__asm volatile
 8004870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004874:	f383 8811 	msr	BASEPRI, r3
 8004878:	f3bf 8f6f 	isb	sy
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	623b      	str	r3, [r7, #32]
}
 8004882:	bf00      	nop
 8004884:	bf00      	nop
 8004886:	e7fd      	b.n	8004884 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004888:	f001 f9d6 	bl	8005c38 <xTaskGetSchedulerState>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	d102      	bne.n	8004898 <xQueueGenericSend+0xa4>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <xQueueGenericSend+0xa8>
 8004898:	2301      	movs	r3, #1
 800489a:	e000      	b.n	800489e <xQueueGenericSend+0xaa>
 800489c:	2300      	movs	r3, #0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d10b      	bne.n	80048ba <xQueueGenericSend+0xc6>
	__asm volatile
 80048a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a6:	f383 8811 	msr	BASEPRI, r3
 80048aa:	f3bf 8f6f 	isb	sy
 80048ae:	f3bf 8f4f 	dsb	sy
 80048b2:	61fb      	str	r3, [r7, #28]
}
 80048b4:	bf00      	nop
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048ba:	f001 fcd7 	bl	800626c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048c6:	429a      	cmp	r2, r3
 80048c8:	d302      	bcc.n	80048d0 <xQueueGenericSend+0xdc>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d129      	bne.n	8004924 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048d6:	f000 fac8 	bl	8004e6a <prvCopyDataToQueue>
 80048da:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e6:	3324      	adds	r3, #36	@ 0x24
 80048e8:	4618      	mov	r0, r3
 80048ea:	f000 ffe5 	bl	80058b8 <xTaskRemoveFromEventList>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d013      	beq.n	800491c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80048f4:	4b3f      	ldr	r3, [pc, #252]	@ (80049f4 <xQueueGenericSend+0x200>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
 8004904:	e00a      	b.n	800491c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800490c:	4b39      	ldr	r3, [pc, #228]	@ (80049f4 <xQueueGenericSend+0x200>)
 800490e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004912:	601a      	str	r2, [r3, #0]
 8004914:	f3bf 8f4f 	dsb	sy
 8004918:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800491c:	f001 fcd6 	bl	80062cc <vPortExitCritical>
				return pdPASS;
 8004920:	2301      	movs	r3, #1
 8004922:	e063      	b.n	80049ec <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d103      	bne.n	8004932 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800492a:	f001 fccf 	bl	80062cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800492e:	2300      	movs	r3, #0
 8004930:	e05c      	b.n	80049ec <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004934:	2b00      	cmp	r3, #0
 8004936:	d106      	bne.n	8004946 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004938:	f107 0314 	add.w	r3, r7, #20
 800493c:	4618      	mov	r0, r3
 800493e:	f001 f81f 	bl	8005980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004942:	2301      	movs	r3, #1
 8004944:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004946:	f001 fcc1 	bl	80062cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800494a:	f000 fdcd 	bl	80054e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800494e:	f001 fc8d 	bl	800626c <vPortEnterCritical>
 8004952:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004954:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004958:	b25b      	sxtb	r3, r3
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d103      	bne.n	8004968 <xQueueGenericSend+0x174>
 8004960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800496a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800496e:	b25b      	sxtb	r3, r3
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d103      	bne.n	800497e <xQueueGenericSend+0x18a>
 8004976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004978:	2200      	movs	r2, #0
 800497a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800497e:	f001 fca5 	bl	80062cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004982:	1d3a      	adds	r2, r7, #4
 8004984:	f107 0314 	add.w	r3, r7, #20
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f001 f80e 	bl	80059ac <xTaskCheckForTimeOut>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d124      	bne.n	80049e0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004996:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004998:	f000 fb5f 	bl	800505a <prvIsQueueFull>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d018      	beq.n	80049d4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049a4:	3310      	adds	r3, #16
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 ff5e 	bl	800586c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049b0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049b2:	f000 faea 	bl	8004f8a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049b6:	f000 fda5 	bl	8005504 <xTaskResumeAll>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	f47f af7c 	bne.w	80048ba <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80049c2:	4b0c      	ldr	r3, [pc, #48]	@ (80049f4 <xQueueGenericSend+0x200>)
 80049c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	e772      	b.n	80048ba <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049d6:	f000 fad8 	bl	8004f8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049da:	f000 fd93 	bl	8005504 <xTaskResumeAll>
 80049de:	e76c      	b.n	80048ba <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80049e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049e2:	f000 fad2 	bl	8004f8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80049e6:	f000 fd8d 	bl	8005504 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80049ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3738      	adds	r7, #56	@ 0x38
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	e000ed04 	.word	0xe000ed04

080049f8 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b08e      	sub	sp, #56	@ 0x38
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	61fb      	str	r3, [r7, #28]
}
 8004a3e:	bf00      	nop
 8004a40:	bf00      	nop
 8004a42:	e7fd      	b.n	8004a40 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <xQueueGiveFromISR+0x5c>
 8004a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <xQueueGiveFromISR+0x60>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <xQueueGiveFromISR+0x62>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10b      	bne.n	8004a76 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	61bb      	str	r3, [r7, #24]
}
 8004a70:	bf00      	nop
 8004a72:	bf00      	nop
 8004a74:	e7fd      	b.n	8004a72 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a76:	f001 fcbb 	bl	80063f0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8004a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a82:	f383 8811 	msr	BASEPRI, r3
 8004a86:	f3bf 8f6f 	isb	sy
 8004a8a:	f3bf 8f4f 	dsb	sy
 8004a8e:	617a      	str	r2, [r7, #20]
 8004a90:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d22b      	bcs.n	8004afe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004aa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004aac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	1c5a      	adds	r2, r3, #1
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ab6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ab8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d112      	bne.n	8004ae8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d016      	beq.n	8004af8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004acc:	3324      	adds	r3, #36	@ 0x24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fef2 	bl	80058b8 <xTaskRemoveFromEventList>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00e      	beq.n	8004af8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	601a      	str	r2, [r3, #0]
 8004ae6:	e007      	b.n	8004af8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004aec:	3301      	adds	r3, #1
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	b25a      	sxtb	r2, r3
 8004af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004af4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004af8:	2301      	movs	r3, #1
 8004afa:	637b      	str	r3, [r7, #52]	@ 0x34
 8004afc:	e001      	b.n	8004b02 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b04:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3738      	adds	r7, #56	@ 0x38
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}

08004b18 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08e      	sub	sp, #56	@ 0x38
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d10b      	bne.n	8004b4c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8004b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b38:	f383 8811 	msr	BASEPRI, r3
 8004b3c:	f3bf 8f6f 	isb	sy
 8004b40:	f3bf 8f4f 	dsb	sy
 8004b44:	623b      	str	r3, [r7, #32]
}
 8004b46:	bf00      	nop
 8004b48:	bf00      	nop
 8004b4a:	e7fd      	b.n	8004b48 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00b      	beq.n	8004b6c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	61fb      	str	r3, [r7, #28]
}
 8004b66:	bf00      	nop
 8004b68:	bf00      	nop
 8004b6a:	e7fd      	b.n	8004b68 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b6c:	f001 f864 	bl	8005c38 <xTaskGetSchedulerState>
 8004b70:	4603      	mov	r3, r0
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d102      	bne.n	8004b7c <xQueueSemaphoreTake+0x64>
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d101      	bne.n	8004b80 <xQueueSemaphoreTake+0x68>
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e000      	b.n	8004b82 <xQueueSemaphoreTake+0x6a>
 8004b80:	2300      	movs	r3, #0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d10b      	bne.n	8004b9e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8004b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8a:	f383 8811 	msr	BASEPRI, r3
 8004b8e:	f3bf 8f6f 	isb	sy
 8004b92:	f3bf 8f4f 	dsb	sy
 8004b96:	61bb      	str	r3, [r7, #24]
}
 8004b98:	bf00      	nop
 8004b9a:	bf00      	nop
 8004b9c:	e7fd      	b.n	8004b9a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b9e:	f001 fb65 	bl	800626c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d024      	beq.n	8004bf8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	1e5a      	subs	r2, r3, #1
 8004bb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d104      	bne.n	8004bc8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004bbe:	f001 f9e7 	bl	8005f90 <pvTaskIncrementMutexHeldCount>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d00f      	beq.n	8004bf0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd2:	3310      	adds	r3, #16
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fe6f 	bl	80058b8 <xTaskRemoveFromEventList>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004be0:	4b54      	ldr	r3, [pc, #336]	@ (8004d34 <xQueueSemaphoreTake+0x21c>)
 8004be2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bf0:	f001 fb6c 	bl	80062cc <vPortExitCritical>
				return pdPASS;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e098      	b.n	8004d2a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d112      	bne.n	8004c24 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00b      	beq.n	8004c1c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	617b      	str	r3, [r7, #20]
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	e7fd      	b.n	8004c18 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c1c:	f001 fb56 	bl	80062cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e082      	b.n	8004d2a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d106      	bne.n	8004c38 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c2a:	f107 030c 	add.w	r3, r7, #12
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 fea6 	bl	8005980 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c38:	f001 fb48 	bl	80062cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c3c:	f000 fc54 	bl	80054e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c40:	f001 fb14 	bl	800626c <vPortEnterCritical>
 8004c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c4a:	b25b      	sxtb	r3, r3
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d103      	bne.n	8004c5a <xQueueSemaphoreTake+0x142>
 8004c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c60:	b25b      	sxtb	r3, r3
 8004c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c66:	d103      	bne.n	8004c70 <xQueueSemaphoreTake+0x158>
 8004c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c70:	f001 fb2c 	bl	80062cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c74:	463a      	mov	r2, r7
 8004c76:	f107 030c 	add.w	r3, r7, #12
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	f000 fe95 	bl	80059ac <xTaskCheckForTimeOut>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d132      	bne.n	8004cee <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c88:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c8a:	f000 f9d0 	bl	800502e <prvIsQueueEmpty>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d026      	beq.n	8004ce2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d109      	bne.n	8004cb0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8004c9c:	f001 fae6 	bl	800626c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ca0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 ffe5 	bl	8005c74 <xTaskPriorityInherit>
 8004caa:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8004cac:	f001 fb0e 	bl	80062cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb2:	3324      	adds	r3, #36	@ 0x24
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fdd7 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cbe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cc0:	f000 f963 	bl	8004f8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cc4:	f000 fc1e 	bl	8005504 <xTaskResumeAll>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	f47f af67 	bne.w	8004b9e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8004cd0:	4b18      	ldr	r3, [pc, #96]	@ (8004d34 <xQueueSemaphoreTake+0x21c>)
 8004cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	f3bf 8f6f 	isb	sy
 8004ce0:	e75d      	b.n	8004b9e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004ce2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004ce4:	f000 f951 	bl	8004f8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ce8:	f000 fc0c 	bl	8005504 <xTaskResumeAll>
 8004cec:	e757      	b.n	8004b9e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004cee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cf0:	f000 f94b 	bl	8004f8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cf4:	f000 fc06 	bl	8005504 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cf8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004cfa:	f000 f998 	bl	800502e <prvIsQueueEmpty>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f43f af4c 	beq.w	8004b9e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00d      	beq.n	8004d28 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8004d0c:	f001 faae 	bl	800626c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d12:	f000 f893 	bl	8004e3c <prvGetDisinheritPriorityAfterTimeout>
 8004d16:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1a:	689b      	ldr	r3, [r3, #8]
 8004d1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f001 f8a6 	bl	8005e70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d24:	f001 fad2 	bl	80062cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d28:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3738      	adds	r7, #56	@ 0x38
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
 8004d32:	bf00      	nop
 8004d34:	e000ed04 	.word	0xe000ed04

08004d38 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08e      	sub	sp, #56	@ 0x38
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d10b      	bne.n	8004d66 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8004d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d52:	f383 8811 	msr	BASEPRI, r3
 8004d56:	f3bf 8f6f 	isb	sy
 8004d5a:	f3bf 8f4f 	dsb	sy
 8004d5e:	623b      	str	r3, [r7, #32]
}
 8004d60:	bf00      	nop
 8004d62:	bf00      	nop
 8004d64:	e7fd      	b.n	8004d62 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d103      	bne.n	8004d74 <xQueueReceiveFromISR+0x3c>
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <xQueueReceiveFromISR+0x40>
 8004d74:	2301      	movs	r3, #1
 8004d76:	e000      	b.n	8004d7a <xQueueReceiveFromISR+0x42>
 8004d78:	2300      	movs	r3, #0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10b      	bne.n	8004d96 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	61fb      	str	r3, [r7, #28]
}
 8004d90:	bf00      	nop
 8004d92:	bf00      	nop
 8004d94:	e7fd      	b.n	8004d92 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d96:	f001 fb2b 	bl	80063f0 <vPortValidateInterruptPriority>
	__asm volatile
 8004d9a:	f3ef 8211 	mrs	r2, BASEPRI
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	61ba      	str	r2, [r7, #24]
 8004db0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004db2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dba:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d02f      	beq.n	8004e22 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dc8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004dcc:	68b9      	ldr	r1, [r7, #8]
 8004dce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004dd0:	f000 f8b5 	bl	8004f3e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd6:	1e5a      	subs	r2, r3, #1
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004ddc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8004de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de4:	d112      	bne.n	8004e0c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004de6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d016      	beq.n	8004e1c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df0:	3310      	adds	r3, #16
 8004df2:	4618      	mov	r0, r3
 8004df4:	f000 fd60 	bl	80058b8 <xTaskRemoveFromEventList>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00e      	beq.n	8004e1c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00b      	beq.n	8004e1c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	601a      	str	r2, [r3, #0]
 8004e0a:	e007      	b.n	8004e1c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004e10:	3301      	adds	r3, #1
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	b25a      	sxtb	r2, r3
 8004e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e20:	e001      	b.n	8004e26 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8004e22:	2300      	movs	r3, #0
 8004e24:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	f383 8811 	msr	BASEPRI, r3
}
 8004e30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3738      	adds	r7, #56	@ 0x38
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b085      	sub	sp, #20
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d006      	beq.n	8004e5a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f1c3 0307 	rsb	r3, r3, #7
 8004e56:	60fb      	str	r3, [r7, #12]
 8004e58:	e001      	b.n	8004e5e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004e5e:	68fb      	ldr	r3, [r7, #12]
	}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3714      	adds	r7, #20
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc80      	pop	{r7}
 8004e68:	4770      	bx	lr

08004e6a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b086      	sub	sp, #24
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	60f8      	str	r0, [r7, #12]
 8004e72:	60b9      	str	r1, [r7, #8]
 8004e74:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004e76:	2300      	movs	r3, #0
 8004e78:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e7e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d10d      	bne.n	8004ea4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d14d      	bne.n	8004f2c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 ff63 	bl	8005d60 <xTaskPriorityDisinherit>
 8004e9a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	609a      	str	r2, [r3, #8]
 8004ea2:	e043      	b.n	8004f2c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d119      	bne.n	8004ede <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6858      	ldr	r0, [r3, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	f001 fda3 	bl	8006a00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	685a      	ldr	r2, [r3, #4]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec2:	441a      	add	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d32b      	bcc.n	8004f2c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	605a      	str	r2, [r3, #4]
 8004edc:	e026      	b.n	8004f2c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	68d8      	ldr	r0, [r3, #12]
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	f001 fd89 	bl	8006a00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	425b      	negs	r3, r3
 8004ef8:	441a      	add	r2, r3
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d207      	bcs.n	8004f1a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	689a      	ldr	r2, [r3, #8]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f12:	425b      	negs	r3, r3
 8004f14:	441a      	add	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d105      	bne.n	8004f2c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d002      	beq.n	8004f2c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004f34:	697b      	ldr	r3, [r7, #20]
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b082      	sub	sp, #8
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
 8004f46:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d018      	beq.n	8004f82 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	68da      	ldr	r2, [r3, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	441a      	add	r2, r3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68da      	ldr	r2, [r3, #12]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d303      	bcc.n	8004f72 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68d9      	ldr	r1, [r3, #12]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	6838      	ldr	r0, [r7, #0]
 8004f7e:	f001 fd3f 	bl	8006a00 <memcpy>
	}
}
 8004f82:	bf00      	nop
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004f92:	f001 f96b 	bl	800626c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f9c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f9e:	e011      	b.n	8004fc4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d012      	beq.n	8004fce <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3324      	adds	r3, #36	@ 0x24
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fc83 	bl	80058b8 <xTaskRemoveFromEventList>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004fb8:	f000 fd5c 	bl	8005a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004fbc:	7bfb      	ldrb	r3, [r7, #15]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	dce9      	bgt.n	8004fa0 <prvUnlockQueue+0x16>
 8004fcc:	e000      	b.n	8004fd0 <prvUnlockQueue+0x46>
					break;
 8004fce:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	22ff      	movs	r2, #255	@ 0xff
 8004fd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004fd8:	f001 f978 	bl	80062cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004fdc:	f001 f946 	bl	800626c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fe6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fe8:	e011      	b.n	800500e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fc5e 	bl	80058b8 <xTaskRemoveFromEventList>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d001      	beq.n	8005006 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005002:	f000 fd37 	bl	8005a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005006:	7bbb      	ldrb	r3, [r7, #14]
 8005008:	3b01      	subs	r3, #1
 800500a:	b2db      	uxtb	r3, r3
 800500c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800500e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005012:	2b00      	cmp	r3, #0
 8005014:	dce9      	bgt.n	8004fea <prvUnlockQueue+0x60>
 8005016:	e000      	b.n	800501a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005018:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	22ff      	movs	r2, #255	@ 0xff
 800501e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005022:	f001 f953 	bl	80062cc <vPortExitCritical>
}
 8005026:	bf00      	nop
 8005028:	3710      	adds	r7, #16
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}

0800502e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005036:	f001 f919 	bl	800626c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800503e:	2b00      	cmp	r3, #0
 8005040:	d102      	bne.n	8005048 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005042:	2301      	movs	r3, #1
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e001      	b.n	800504c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005048:	2300      	movs	r3, #0
 800504a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800504c:	f001 f93e 	bl	80062cc <vPortExitCritical>

	return xReturn;
 8005050:	68fb      	ldr	r3, [r7, #12]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b084      	sub	sp, #16
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005062:	f001 f903 	bl	800626c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800506e:	429a      	cmp	r2, r3
 8005070:	d102      	bne.n	8005078 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005072:	2301      	movs	r3, #1
 8005074:	60fb      	str	r3, [r7, #12]
 8005076:	e001      	b.n	800507c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005078:	2300      	movs	r3, #0
 800507a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800507c:	f001 f926 	bl	80062cc <vPortExitCritical>

	return xReturn;
 8005080:	68fb      	ldr	r3, [r7, #12]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08e      	sub	sp, #56	@ 0x38
 800508e:	af04      	add	r7, sp, #16
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	607a      	str	r2, [r7, #4]
 8005096:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800509a:	2b00      	cmp	r3, #0
 800509c:	d10b      	bne.n	80050b6 <xTaskCreateStatic+0x2c>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	623b      	str	r3, [r7, #32]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80050b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d10b      	bne.n	80050d4 <xTaskCreateStatic+0x4a>
	__asm volatile
 80050bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c0:	f383 8811 	msr	BASEPRI, r3
 80050c4:	f3bf 8f6f 	isb	sy
 80050c8:	f3bf 8f4f 	dsb	sy
 80050cc:	61fb      	str	r3, [r7, #28]
}
 80050ce:	bf00      	nop
 80050d0:	bf00      	nop
 80050d2:	e7fd      	b.n	80050d0 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80050d4:	2354      	movs	r3, #84	@ 0x54
 80050d6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	2b54      	cmp	r3, #84	@ 0x54
 80050dc:	d00b      	beq.n	80050f6 <xTaskCreateStatic+0x6c>
	__asm volatile
 80050de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e2:	f383 8811 	msr	BASEPRI, r3
 80050e6:	f3bf 8f6f 	isb	sy
 80050ea:	f3bf 8f4f 	dsb	sy
 80050ee:	61bb      	str	r3, [r7, #24]
}
 80050f0:	bf00      	nop
 80050f2:	bf00      	nop
 80050f4:	e7fd      	b.n	80050f2 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80050f6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80050f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d01e      	beq.n	800513c <xTaskCreateStatic+0xb2>
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	2b00      	cmp	r3, #0
 8005102:	d01b      	beq.n	800513c <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800510c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800510e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005116:	2300      	movs	r3, #0
 8005118:	9303      	str	r3, [sp, #12]
 800511a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511c:	9302      	str	r3, [sp, #8]
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	9301      	str	r3, [sp, #4]
 8005124:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005126:	9300      	str	r3, [sp, #0]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	68b9      	ldr	r1, [r7, #8]
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f850 	bl	80051d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005134:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005136:	f000 f8d5 	bl	80052e4 <prvAddNewTaskToReadyList>
 800513a:	e001      	b.n	8005140 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800513c:	2300      	movs	r3, #0
 800513e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005140:	697b      	ldr	r3, [r7, #20]
	}
 8005142:	4618      	mov	r0, r3
 8005144:	3728      	adds	r7, #40	@ 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800514a:	b580      	push	{r7, lr}
 800514c:	b08c      	sub	sp, #48	@ 0x30
 800514e:	af04      	add	r7, sp, #16
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	603b      	str	r3, [r7, #0]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800515a:	88fb      	ldrh	r3, [r7, #6]
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4618      	mov	r0, r3
 8005160:	f001 f986 	bl	8006470 <pvPortMalloc>
 8005164:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d00e      	beq.n	800518a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800516c:	2054      	movs	r0, #84	@ 0x54
 800516e:	f001 f97f 	bl	8006470 <pvPortMalloc>
 8005172:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005180:	e005      	b.n	800518e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f001 fa42 	bl	800660c <vPortFree>
 8005188:	e001      	b.n	800518e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800518a:	2300      	movs	r3, #0
 800518c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d017      	beq.n	80051c4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800519c:	88fa      	ldrh	r2, [r7, #6]
 800519e:	2300      	movs	r3, #0
 80051a0:	9303      	str	r3, [sp, #12]
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	9302      	str	r3, [sp, #8]
 80051a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051ac:	9300      	str	r3, [sp, #0]
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68b9      	ldr	r1, [r7, #8]
 80051b2:	68f8      	ldr	r0, [r7, #12]
 80051b4:	f000 f80e 	bl	80051d4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80051b8:	69f8      	ldr	r0, [r7, #28]
 80051ba:	f000 f893 	bl	80052e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80051be:	2301      	movs	r3, #1
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e002      	b.n	80051ca <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051c4:	f04f 33ff 	mov.w	r3, #4294967295
 80051c8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80051ca:	69bb      	ldr	r3, [r7, #24]
	}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3720      	adds	r7, #32
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80051ec:	3b01      	subs	r3, #1
 80051ee:	009b      	lsls	r3, r3, #2
 80051f0:	4413      	add	r3, r2
 80051f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	f023 0307 	bic.w	r3, r3, #7
 80051fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f003 0307 	and.w	r3, r3, #7
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00b      	beq.n	800521e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8005206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520a:	f383 8811 	msr	BASEPRI, r3
 800520e:	f3bf 8f6f 	isb	sy
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	617b      	str	r3, [r7, #20]
}
 8005218:	bf00      	nop
 800521a:	bf00      	nop
 800521c:	e7fd      	b.n	800521a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01f      	beq.n	8005264 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005224:	2300      	movs	r3, #0
 8005226:	61fb      	str	r3, [r7, #28]
 8005228:	e012      	b.n	8005250 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800522a:	68ba      	ldr	r2, [r7, #8]
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	7819      	ldrb	r1, [r3, #0]
 8005232:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	4413      	add	r3, r2
 8005238:	3334      	adds	r3, #52	@ 0x34
 800523a:	460a      	mov	r2, r1
 800523c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	4413      	add	r3, r2
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800524a:	69fb      	ldr	r3, [r7, #28]
 800524c:	3301      	adds	r3, #1
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	2b0f      	cmp	r3, #15
 8005254:	d9e9      	bls.n	800522a <prvInitialiseNewTask+0x56>
 8005256:	e000      	b.n	800525a <prvInitialiseNewTask+0x86>
			{
				break;
 8005258:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800525a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005262:	e003      	b.n	800526c <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005266:	2200      	movs	r2, #0
 8005268:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	2b06      	cmp	r3, #6
 8005270:	d901      	bls.n	8005276 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005272:	2306      	movs	r3, #6
 8005274:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800527a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800527c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800527e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005280:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005284:	2200      	movs	r2, #0
 8005286:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800528a:	3304      	adds	r3, #4
 800528c:	4618      	mov	r0, r3
 800528e:	f7ff f8de 	bl	800444e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005292:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005294:	3318      	adds	r3, #24
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff f8d9 	bl	800444e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800529c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052a0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a4:	f1c3 0207 	rsb	r2, r3, #7
 80052a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052aa:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052b0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80052b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b4:	2200      	movs	r2, #0
 80052b6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80052b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80052c0:	683a      	ldr	r2, [r7, #0]
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	69b8      	ldr	r0, [r7, #24]
 80052c6:	f000 fedd 	bl	8006084 <pxPortInitialiseStack>
 80052ca:	4602      	mov	r2, r0
 80052cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80052d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80052d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052dc:	bf00      	nop
 80052de:	3720      	adds	r7, #32
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80052ec:	f000 ffbe 	bl	800626c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80052f0:	4b2a      	ldr	r3, [pc, #168]	@ (800539c <prvAddNewTaskToReadyList+0xb8>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	3301      	adds	r3, #1
 80052f6:	4a29      	ldr	r2, [pc, #164]	@ (800539c <prvAddNewTaskToReadyList+0xb8>)
 80052f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80052fa:	4b29      	ldr	r3, [pc, #164]	@ (80053a0 <prvAddNewTaskToReadyList+0xbc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d109      	bne.n	8005316 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005302:	4a27      	ldr	r2, [pc, #156]	@ (80053a0 <prvAddNewTaskToReadyList+0xbc>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005308:	4b24      	ldr	r3, [pc, #144]	@ (800539c <prvAddNewTaskToReadyList+0xb8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d110      	bne.n	8005332 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005310:	f000 fbd4 	bl	8005abc <prvInitialiseTaskLists>
 8005314:	e00d      	b.n	8005332 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005316:	4b23      	ldr	r3, [pc, #140]	@ (80053a4 <prvAddNewTaskToReadyList+0xc0>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800531e:	4b20      	ldr	r3, [pc, #128]	@ (80053a0 <prvAddNewTaskToReadyList+0xbc>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005328:	429a      	cmp	r2, r3
 800532a:	d802      	bhi.n	8005332 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800532c:	4a1c      	ldr	r2, [pc, #112]	@ (80053a0 <prvAddNewTaskToReadyList+0xbc>)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005332:	4b1d      	ldr	r3, [pc, #116]	@ (80053a8 <prvAddNewTaskToReadyList+0xc4>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3301      	adds	r3, #1
 8005338:	4a1b      	ldr	r2, [pc, #108]	@ (80053a8 <prvAddNewTaskToReadyList+0xc4>)
 800533a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005340:	2201      	movs	r2, #1
 8005342:	409a      	lsls	r2, r3
 8005344:	4b19      	ldr	r3, [pc, #100]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4313      	orrs	r3, r2
 800534a:	4a18      	ldr	r2, [pc, #96]	@ (80053ac <prvAddNewTaskToReadyList+0xc8>)
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005352:	4613      	mov	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	4413      	add	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4a15      	ldr	r2, [pc, #84]	@ (80053b0 <prvAddNewTaskToReadyList+0xcc>)
 800535c:	441a      	add	r2, r3
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	4619      	mov	r1, r3
 8005364:	4610      	mov	r0, r2
 8005366:	f7ff f87e 	bl	8004466 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800536a:	f000 ffaf 	bl	80062cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800536e:	4b0d      	ldr	r3, [pc, #52]	@ (80053a4 <prvAddNewTaskToReadyList+0xc0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005376:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <prvAddNewTaskToReadyList+0xbc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005380:	429a      	cmp	r2, r3
 8005382:	d207      	bcs.n	8005394 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005384:	4b0b      	ldr	r3, [pc, #44]	@ (80053b4 <prvAddNewTaskToReadyList+0xd0>)
 8005386:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800538a:	601a      	str	r2, [r3, #0]
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	20000690 	.word	0x20000690
 80053a0:	20000590 	.word	0x20000590
 80053a4:	2000069c 	.word	0x2000069c
 80053a8:	200006ac 	.word	0x200006ac
 80053ac:	20000698 	.word	0x20000698
 80053b0:	20000594 	.word	0x20000594
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b084      	sub	sp, #16
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d018      	beq.n	80053fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80053ca:	4b14      	ldr	r3, [pc, #80]	@ (800541c <vTaskDelay+0x64>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00b      	beq.n	80053ea <vTaskDelay+0x32>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	60bb      	str	r3, [r7, #8]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80053ea:	f000 f87d 	bl	80054e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80053ee:	2100      	movs	r1, #0
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fde1 	bl	8005fb8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80053f6:	f000 f885 	bl	8005504 <xTaskResumeAll>
 80053fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005402:	4b07      	ldr	r3, [pc, #28]	@ (8005420 <vTaskDelay+0x68>)
 8005404:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005412:	bf00      	nop
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200006b8 	.word	0x200006b8
 8005420:	e000ed04 	.word	0xe000ed04

08005424 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b08a      	sub	sp, #40	@ 0x28
 8005428:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800542a:	2300      	movs	r3, #0
 800542c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800542e:	2300      	movs	r3, #0
 8005430:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005432:	463a      	mov	r2, r7
 8005434:	1d39      	adds	r1, r7, #4
 8005436:	f107 0308 	add.w	r3, r7, #8
 800543a:	4618      	mov	r0, r3
 800543c:	f7fb f872 	bl	8000524 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005440:	6839      	ldr	r1, [r7, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68ba      	ldr	r2, [r7, #8]
 8005446:	9202      	str	r2, [sp, #8]
 8005448:	9301      	str	r3, [sp, #4]
 800544a:	2300      	movs	r3, #0
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	2300      	movs	r3, #0
 8005450:	460a      	mov	r2, r1
 8005452:	491f      	ldr	r1, [pc, #124]	@ (80054d0 <vTaskStartScheduler+0xac>)
 8005454:	481f      	ldr	r0, [pc, #124]	@ (80054d4 <vTaskStartScheduler+0xb0>)
 8005456:	f7ff fe18 	bl	800508a <xTaskCreateStatic>
 800545a:	4603      	mov	r3, r0
 800545c:	4a1e      	ldr	r2, [pc, #120]	@ (80054d8 <vTaskStartScheduler+0xb4>)
 800545e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005460:	4b1d      	ldr	r3, [pc, #116]	@ (80054d8 <vTaskStartScheduler+0xb4>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
 800546c:	e001      	b.n	8005472 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	2b01      	cmp	r3, #1
 8005476:	d116      	bne.n	80054a6 <vTaskStartScheduler+0x82>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	613b      	str	r3, [r7, #16]
}
 800548a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800548c:	4b13      	ldr	r3, [pc, #76]	@ (80054dc <vTaskStartScheduler+0xb8>)
 800548e:	f04f 32ff 	mov.w	r2, #4294967295
 8005492:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005494:	4b12      	ldr	r3, [pc, #72]	@ (80054e0 <vTaskStartScheduler+0xbc>)
 8005496:	2201      	movs	r2, #1
 8005498:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800549a:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <vTaskStartScheduler+0xc0>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80054a0:	f000 fe72 	bl	8006188 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80054a4:	e00f      	b.n	80054c6 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ac:	d10b      	bne.n	80054c6 <vTaskStartScheduler+0xa2>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vTaskStartScheduler+0x9e>
}
 80054c6:	bf00      	nop
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	0800736c 	.word	0x0800736c
 80054d4:	08005a8d 	.word	0x08005a8d
 80054d8:	200006b4 	.word	0x200006b4
 80054dc:	200006b0 	.word	0x200006b0
 80054e0:	2000069c 	.word	0x2000069c
 80054e4:	20000694 	.word	0x20000694

080054e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054ec:	4b04      	ldr	r3, [pc, #16]	@ (8005500 <vTaskSuspendAll+0x18>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3301      	adds	r3, #1
 80054f2:	4a03      	ldr	r2, [pc, #12]	@ (8005500 <vTaskSuspendAll+0x18>)
 80054f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054f6:	bf00      	nop
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bc80      	pop	{r7}
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	200006b8 	.word	0x200006b8

08005504 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800550a:	2300      	movs	r3, #0
 800550c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800550e:	2300      	movs	r3, #0
 8005510:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005512:	4b42      	ldr	r3, [pc, #264]	@ (800561c <xTaskResumeAll+0x118>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10b      	bne.n	8005532 <xTaskResumeAll+0x2e>
	__asm volatile
 800551a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551e:	f383 8811 	msr	BASEPRI, r3
 8005522:	f3bf 8f6f 	isb	sy
 8005526:	f3bf 8f4f 	dsb	sy
 800552a:	603b      	str	r3, [r7, #0]
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	e7fd      	b.n	800552e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005532:	f000 fe9b 	bl	800626c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005536:	4b39      	ldr	r3, [pc, #228]	@ (800561c <xTaskResumeAll+0x118>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	3b01      	subs	r3, #1
 800553c:	4a37      	ldr	r2, [pc, #220]	@ (800561c <xTaskResumeAll+0x118>)
 800553e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005540:	4b36      	ldr	r3, [pc, #216]	@ (800561c <xTaskResumeAll+0x118>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d161      	bne.n	800560c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005548:	4b35      	ldr	r3, [pc, #212]	@ (8005620 <xTaskResumeAll+0x11c>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d05d      	beq.n	800560c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005550:	e02e      	b.n	80055b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005552:	4b34      	ldr	r3, [pc, #208]	@ (8005624 <xTaskResumeAll+0x120>)
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	3318      	adds	r3, #24
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe ffdc 	bl	800451c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe ffd7 	bl	800451c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005572:	2201      	movs	r2, #1
 8005574:	409a      	lsls	r2, r3
 8005576:	4b2c      	ldr	r3, [pc, #176]	@ (8005628 <xTaskResumeAll+0x124>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4313      	orrs	r3, r2
 800557c:	4a2a      	ldr	r2, [pc, #168]	@ (8005628 <xTaskResumeAll+0x124>)
 800557e:	6013      	str	r3, [r2, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005584:	4613      	mov	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	4413      	add	r3, r2
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4a27      	ldr	r2, [pc, #156]	@ (800562c <xTaskResumeAll+0x128>)
 800558e:	441a      	add	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3304      	adds	r3, #4
 8005594:	4619      	mov	r1, r3
 8005596:	4610      	mov	r0, r2
 8005598:	f7fe ff65 	bl	8004466 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a0:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <xTaskResumeAll+0x12c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d302      	bcc.n	80055b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80055aa:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <xTaskResumeAll+0x130>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005624 <xTaskResumeAll+0x120>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1cc      	bne.n	8005552 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80055be:	f000 fb1b 	bl	8005bf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80055c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005638 <xTaskResumeAll+0x134>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d010      	beq.n	80055f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80055ce:	f000 f837 	bl	8005640 <xTaskIncrementTick>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d002      	beq.n	80055de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055d8:	4b16      	ldr	r3, [pc, #88]	@ (8005634 <xTaskResumeAll+0x130>)
 80055da:	2201      	movs	r2, #1
 80055dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	3b01      	subs	r3, #1
 80055e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f1      	bne.n	80055ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055ea:	4b13      	ldr	r3, [pc, #76]	@ (8005638 <xTaskResumeAll+0x134>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055f0:	4b10      	ldr	r3, [pc, #64]	@ (8005634 <xTaskResumeAll+0x130>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d009      	beq.n	800560c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055f8:	2301      	movs	r3, #1
 80055fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055fc:	4b0f      	ldr	r3, [pc, #60]	@ (800563c <xTaskResumeAll+0x138>)
 80055fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005602:	601a      	str	r2, [r3, #0]
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800560c:	f000 fe5e 	bl	80062cc <vPortExitCritical>

	return xAlreadyYielded;
 8005610:	68bb      	ldr	r3, [r7, #8]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3710      	adds	r7, #16
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	200006b8 	.word	0x200006b8
 8005620:	20000690 	.word	0x20000690
 8005624:	20000650 	.word	0x20000650
 8005628:	20000698 	.word	0x20000698
 800562c:	20000594 	.word	0x20000594
 8005630:	20000590 	.word	0x20000590
 8005634:	200006a4 	.word	0x200006a4
 8005638:	200006a0 	.word	0x200006a0
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b086      	sub	sp, #24
 8005644:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005646:	2300      	movs	r3, #0
 8005648:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800564a:	4b4f      	ldr	r3, [pc, #316]	@ (8005788 <xTaskIncrementTick+0x148>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	2b00      	cmp	r3, #0
 8005650:	f040 808f 	bne.w	8005772 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005654:	4b4d      	ldr	r3, [pc, #308]	@ (800578c <xTaskIncrementTick+0x14c>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800565c:	4a4b      	ldr	r2, [pc, #300]	@ (800578c <xTaskIncrementTick+0x14c>)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d121      	bne.n	80056ac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005668:	4b49      	ldr	r3, [pc, #292]	@ (8005790 <xTaskIncrementTick+0x150>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005676:	f383 8811 	msr	BASEPRI, r3
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	603b      	str	r3, [r7, #0]
}
 8005684:	bf00      	nop
 8005686:	bf00      	nop
 8005688:	e7fd      	b.n	8005686 <xTaskIncrementTick+0x46>
 800568a:	4b41      	ldr	r3, [pc, #260]	@ (8005790 <xTaskIncrementTick+0x150>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	4b40      	ldr	r3, [pc, #256]	@ (8005794 <xTaskIncrementTick+0x154>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a3e      	ldr	r2, [pc, #248]	@ (8005790 <xTaskIncrementTick+0x150>)
 8005696:	6013      	str	r3, [r2, #0]
 8005698:	4a3e      	ldr	r2, [pc, #248]	@ (8005794 <xTaskIncrementTick+0x154>)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6013      	str	r3, [r2, #0]
 800569e:	4b3e      	ldr	r3, [pc, #248]	@ (8005798 <xTaskIncrementTick+0x158>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	4a3c      	ldr	r2, [pc, #240]	@ (8005798 <xTaskIncrementTick+0x158>)
 80056a6:	6013      	str	r3, [r2, #0]
 80056a8:	f000 faa6 	bl	8005bf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80056ac:	4b3b      	ldr	r3, [pc, #236]	@ (800579c <xTaskIncrementTick+0x15c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d348      	bcc.n	8005748 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056b6:	4b36      	ldr	r3, [pc, #216]	@ (8005790 <xTaskIncrementTick+0x150>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d104      	bne.n	80056ca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	4b36      	ldr	r3, [pc, #216]	@ (800579c <xTaskIncrementTick+0x15c>)
 80056c2:	f04f 32ff 	mov.w	r2, #4294967295
 80056c6:	601a      	str	r2, [r3, #0]
					break;
 80056c8:	e03e      	b.n	8005748 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056ca:	4b31      	ldr	r3, [pc, #196]	@ (8005790 <xTaskIncrementTick+0x150>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	68db      	ldr	r3, [r3, #12]
 80056d2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056da:	693a      	ldr	r2, [r7, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d203      	bcs.n	80056ea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056e2:	4a2e      	ldr	r2, [pc, #184]	@ (800579c <xTaskIncrementTick+0x15c>)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056e8:	e02e      	b.n	8005748 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe ff14 	bl	800451c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	3318      	adds	r3, #24
 8005700:	4618      	mov	r0, r3
 8005702:	f7fe ff0b 	bl	800451c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800570a:	2201      	movs	r2, #1
 800570c:	409a      	lsls	r2, r3
 800570e:	4b24      	ldr	r3, [pc, #144]	@ (80057a0 <xTaskIncrementTick+0x160>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4313      	orrs	r3, r2
 8005714:	4a22      	ldr	r2, [pc, #136]	@ (80057a0 <xTaskIncrementTick+0x160>)
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	4a1f      	ldr	r2, [pc, #124]	@ (80057a4 <xTaskIncrementTick+0x164>)
 8005726:	441a      	add	r2, r3
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	3304      	adds	r3, #4
 800572c:	4619      	mov	r1, r3
 800572e:	4610      	mov	r0, r2
 8005730:	f7fe fe99 	bl	8004466 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005738:	4b1b      	ldr	r3, [pc, #108]	@ (80057a8 <xTaskIncrementTick+0x168>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800573e:	429a      	cmp	r2, r3
 8005740:	d3b9      	bcc.n	80056b6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005742:	2301      	movs	r3, #1
 8005744:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005746:	e7b6      	b.n	80056b6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005748:	4b17      	ldr	r3, [pc, #92]	@ (80057a8 <xTaskIncrementTick+0x168>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800574e:	4915      	ldr	r1, [pc, #84]	@ (80057a4 <xTaskIncrementTick+0x164>)
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d901      	bls.n	8005764 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005764:	4b11      	ldr	r3, [pc, #68]	@ (80057ac <xTaskIncrementTick+0x16c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d007      	beq.n	800577c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800576c:	2301      	movs	r3, #1
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e004      	b.n	800577c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005772:	4b0f      	ldr	r3, [pc, #60]	@ (80057b0 <xTaskIncrementTick+0x170>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3301      	adds	r3, #1
 8005778:	4a0d      	ldr	r2, [pc, #52]	@ (80057b0 <xTaskIncrementTick+0x170>)
 800577a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800577c:	697b      	ldr	r3, [r7, #20]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200006b8 	.word	0x200006b8
 800578c:	20000694 	.word	0x20000694
 8005790:	20000648 	.word	0x20000648
 8005794:	2000064c 	.word	0x2000064c
 8005798:	200006a8 	.word	0x200006a8
 800579c:	200006b0 	.word	0x200006b0
 80057a0:	20000698 	.word	0x20000698
 80057a4:	20000594 	.word	0x20000594
 80057a8:	20000590 	.word	0x20000590
 80057ac:	200006a4 	.word	0x200006a4
 80057b0:	200006a0 	.word	0x200006a0

080057b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057ba:	4b27      	ldr	r3, [pc, #156]	@ (8005858 <vTaskSwitchContext+0xa4>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057c2:	4b26      	ldr	r3, [pc, #152]	@ (800585c <vTaskSwitchContext+0xa8>)
 80057c4:	2201      	movs	r2, #1
 80057c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057c8:	e040      	b.n	800584c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80057ca:	4b24      	ldr	r3, [pc, #144]	@ (800585c <vTaskSwitchContext+0xa8>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d0:	4b23      	ldr	r3, [pc, #140]	@ (8005860 <vTaskSwitchContext+0xac>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	fab3 f383 	clz	r3, r3
 80057dc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f1c3 031f 	rsb	r3, r3, #31
 80057e4:	617b      	str	r3, [r7, #20]
 80057e6:	491f      	ldr	r1, [pc, #124]	@ (8005864 <vTaskSwitchContext+0xb0>)
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <vTaskSwitchContext+0x5e>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	607b      	str	r3, [r7, #4]
}
 800580c:	bf00      	nop
 800580e:	bf00      	nop
 8005810:	e7fd      	b.n	800580e <vTaskSwitchContext+0x5a>
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4613      	mov	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4a11      	ldr	r2, [pc, #68]	@ (8005864 <vTaskSwitchContext+0xb0>)
 800581e:	4413      	add	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	605a      	str	r2, [r3, #4]
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	3308      	adds	r3, #8
 8005834:	429a      	cmp	r2, r3
 8005836:	d104      	bne.n	8005842 <vTaskSwitchContext+0x8e>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	685a      	ldr	r2, [r3, #4]
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	605a      	str	r2, [r3, #4]
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	4a07      	ldr	r2, [pc, #28]	@ (8005868 <vTaskSwitchContext+0xb4>)
 800584a:	6013      	str	r3, [r2, #0]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	bc80      	pop	{r7}
 8005854:	4770      	bx	lr
 8005856:	bf00      	nop
 8005858:	200006b8 	.word	0x200006b8
 800585c:	200006a4 	.word	0x200006a4
 8005860:	20000698 	.word	0x20000698
 8005864:	20000594 	.word	0x20000594
 8005868:	20000590 	.word	0x20000590

0800586c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10b      	bne.n	8005894 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	bf00      	nop
 8005892:	e7fd      	b.n	8005890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005894:	4b07      	ldr	r3, [pc, #28]	@ (80058b4 <vTaskPlaceOnEventList+0x48>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3318      	adds	r3, #24
 800589a:	4619      	mov	r1, r3
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f7fe fe05 	bl	80044ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a2:	2101      	movs	r1, #1
 80058a4:	6838      	ldr	r0, [r7, #0]
 80058a6:	f000 fb87 	bl	8005fb8 <prvAddCurrentTaskToDelayedList>
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	20000590 	.word	0x20000590

080058b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10b      	bne.n	80058e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	60fb      	str	r3, [r7, #12]
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	e7fd      	b.n	80058e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	3318      	adds	r3, #24
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fe fe16 	bl	800451c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005968 <xTaskRemoveFromEventList+0xb0>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d11c      	bne.n	8005932 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	3304      	adds	r3, #4
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7fe fe0d 	bl	800451c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005906:	2201      	movs	r2, #1
 8005908:	409a      	lsls	r2, r3
 800590a:	4b18      	ldr	r3, [pc, #96]	@ (800596c <xTaskRemoveFromEventList+0xb4>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4313      	orrs	r3, r2
 8005910:	4a16      	ldr	r2, [pc, #88]	@ (800596c <xTaskRemoveFromEventList+0xb4>)
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005918:	4613      	mov	r3, r2
 800591a:	009b      	lsls	r3, r3, #2
 800591c:	4413      	add	r3, r2
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	4a13      	ldr	r2, [pc, #76]	@ (8005970 <xTaskRemoveFromEventList+0xb8>)
 8005922:	441a      	add	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	3304      	adds	r3, #4
 8005928:	4619      	mov	r1, r3
 800592a:	4610      	mov	r0, r2
 800592c:	f7fe fd9b 	bl	8004466 <vListInsertEnd>
 8005930:	e005      	b.n	800593e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005932:	693b      	ldr	r3, [r7, #16]
 8005934:	3318      	adds	r3, #24
 8005936:	4619      	mov	r1, r3
 8005938:	480e      	ldr	r0, [pc, #56]	@ (8005974 <xTaskRemoveFromEventList+0xbc>)
 800593a:	f7fe fd94 	bl	8004466 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005942:	4b0d      	ldr	r3, [pc, #52]	@ (8005978 <xTaskRemoveFromEventList+0xc0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005948:	429a      	cmp	r2, r3
 800594a:	d905      	bls.n	8005958 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005950:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <xTaskRemoveFromEventList+0xc4>)
 8005952:	2201      	movs	r2, #1
 8005954:	601a      	str	r2, [r3, #0]
 8005956:	e001      	b.n	800595c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800595c:	697b      	ldr	r3, [r7, #20]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3718      	adds	r7, #24
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	200006b8 	.word	0x200006b8
 800596c:	20000698 	.word	0x20000698
 8005970:	20000594 	.word	0x20000594
 8005974:	20000650 	.word	0x20000650
 8005978:	20000590 	.word	0x20000590
 800597c:	200006a4 	.word	0x200006a4

08005980 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005988:	4b06      	ldr	r3, [pc, #24]	@ (80059a4 <vTaskInternalSetTimeOutState+0x24>)
 800598a:	681a      	ldr	r2, [r3, #0]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005990:	4b05      	ldr	r3, [pc, #20]	@ (80059a8 <vTaskInternalSetTimeOutState+0x28>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	605a      	str	r2, [r3, #4]
}
 8005998:	bf00      	nop
 800599a:	370c      	adds	r7, #12
 800599c:	46bd      	mov	sp, r7
 800599e:	bc80      	pop	{r7}
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	200006a8 	.word	0x200006a8
 80059a8:	20000694 	.word	0x20000694

080059ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
 80059b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10b      	bne.n	80059d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80059bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059c0:	f383 8811 	msr	BASEPRI, r3
 80059c4:	f3bf 8f6f 	isb	sy
 80059c8:	f3bf 8f4f 	dsb	sy
 80059cc:	613b      	str	r3, [r7, #16]
}
 80059ce:	bf00      	nop
 80059d0:	bf00      	nop
 80059d2:	e7fd      	b.n	80059d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10b      	bne.n	80059f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80059da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059de:	f383 8811 	msr	BASEPRI, r3
 80059e2:	f3bf 8f6f 	isb	sy
 80059e6:	f3bf 8f4f 	dsb	sy
 80059ea:	60fb      	str	r3, [r7, #12]
}
 80059ec:	bf00      	nop
 80059ee:	bf00      	nop
 80059f0:	e7fd      	b.n	80059ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80059f2:	f000 fc3b 	bl	800626c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80059f6:	4b1d      	ldr	r3, [pc, #116]	@ (8005a6c <xTaskCheckForTimeOut+0xc0>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	69ba      	ldr	r2, [r7, #24]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a0e:	d102      	bne.n	8005a16 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a10:	2300      	movs	r3, #0
 8005a12:	61fb      	str	r3, [r7, #28]
 8005a14:	e023      	b.n	8005a5e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	4b15      	ldr	r3, [pc, #84]	@ (8005a70 <xTaskCheckForTimeOut+0xc4>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d007      	beq.n	8005a32 <xTaskCheckForTimeOut+0x86>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d302      	bcc.n	8005a32 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	61fb      	str	r3, [r7, #28]
 8005a30:	e015      	b.n	8005a5e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d20b      	bcs.n	8005a54 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	1ad2      	subs	r2, r2, r3
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f7ff ff99 	bl	8005980 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	e004      	b.n	8005a5e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	2200      	movs	r2, #0
 8005a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005a5e:	f000 fc35 	bl	80062cc <vPortExitCritical>

	return xReturn;
 8005a62:	69fb      	ldr	r3, [r7, #28]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3720      	adds	r7, #32
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	20000694 	.word	0x20000694
 8005a70:	200006a8 	.word	0x200006a8

08005a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a74:	b480      	push	{r7}
 8005a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a78:	4b03      	ldr	r3, [pc, #12]	@ (8005a88 <vTaskMissedYield+0x14>)
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
}
 8005a7e:	bf00      	nop
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bc80      	pop	{r7}
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	200006a4 	.word	0x200006a4

08005a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005a94:	f000 f852 	bl	8005b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005a98:	4b06      	ldr	r3, [pc, #24]	@ (8005ab4 <prvIdleTask+0x28>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d9f9      	bls.n	8005a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005aa0:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <prvIdleTask+0x2c>)
 8005aa2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ab0:	e7f0      	b.n	8005a94 <prvIdleTask+0x8>
 8005ab2:	bf00      	nop
 8005ab4:	20000594 	.word	0x20000594
 8005ab8:	e000ed04 	.word	0xe000ed04

08005abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	607b      	str	r3, [r7, #4]
 8005ac6:	e00c      	b.n	8005ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	4613      	mov	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4a12      	ldr	r2, [pc, #72]	@ (8005b1c <prvInitialiseTaskLists+0x60>)
 8005ad4:	4413      	add	r3, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe fc9a 	bl	8004410 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	607b      	str	r3, [r7, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b06      	cmp	r3, #6
 8005ae6:	d9ef      	bls.n	8005ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ae8:	480d      	ldr	r0, [pc, #52]	@ (8005b20 <prvInitialiseTaskLists+0x64>)
 8005aea:	f7fe fc91 	bl	8004410 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005aee:	480d      	ldr	r0, [pc, #52]	@ (8005b24 <prvInitialiseTaskLists+0x68>)
 8005af0:	f7fe fc8e 	bl	8004410 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005af4:	480c      	ldr	r0, [pc, #48]	@ (8005b28 <prvInitialiseTaskLists+0x6c>)
 8005af6:	f7fe fc8b 	bl	8004410 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005afa:	480c      	ldr	r0, [pc, #48]	@ (8005b2c <prvInitialiseTaskLists+0x70>)
 8005afc:	f7fe fc88 	bl	8004410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b00:	480b      	ldr	r0, [pc, #44]	@ (8005b30 <prvInitialiseTaskLists+0x74>)
 8005b02:	f7fe fc85 	bl	8004410 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b06:	4b0b      	ldr	r3, [pc, #44]	@ (8005b34 <prvInitialiseTaskLists+0x78>)
 8005b08:	4a05      	ldr	r2, [pc, #20]	@ (8005b20 <prvInitialiseTaskLists+0x64>)
 8005b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b38 <prvInitialiseTaskLists+0x7c>)
 8005b0e:	4a05      	ldr	r2, [pc, #20]	@ (8005b24 <prvInitialiseTaskLists+0x68>)
 8005b10:	601a      	str	r2, [r3, #0]
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20000594 	.word	0x20000594
 8005b20:	20000620 	.word	0x20000620
 8005b24:	20000634 	.word	0x20000634
 8005b28:	20000650 	.word	0x20000650
 8005b2c:	20000664 	.word	0x20000664
 8005b30:	2000067c 	.word	0x2000067c
 8005b34:	20000648 	.word	0x20000648
 8005b38:	2000064c 	.word	0x2000064c

08005b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b082      	sub	sp, #8
 8005b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b42:	e019      	b.n	8005b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b44:	f000 fb92 	bl	800626c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b48:	4b10      	ldr	r3, [pc, #64]	@ (8005b8c <prvCheckTasksWaitingTermination+0x50>)
 8005b4a:	68db      	ldr	r3, [r3, #12]
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	3304      	adds	r3, #4
 8005b54:	4618      	mov	r0, r3
 8005b56:	f7fe fce1 	bl	800451c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b90 <prvCheckTasksWaitingTermination+0x54>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	4a0b      	ldr	r2, [pc, #44]	@ (8005b90 <prvCheckTasksWaitingTermination+0x54>)
 8005b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b64:	4b0b      	ldr	r3, [pc, #44]	@ (8005b94 <prvCheckTasksWaitingTermination+0x58>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3b01      	subs	r3, #1
 8005b6a:	4a0a      	ldr	r2, [pc, #40]	@ (8005b94 <prvCheckTasksWaitingTermination+0x58>)
 8005b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005b6e:	f000 fbad 	bl	80062cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f810 	bl	8005b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b78:	4b06      	ldr	r3, [pc, #24]	@ (8005b94 <prvCheckTasksWaitingTermination+0x58>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e1      	bne.n	8005b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b80:	bf00      	nop
 8005b82:	bf00      	nop
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000664 	.word	0x20000664
 8005b90:	20000690 	.word	0x20000690
 8005b94:	20000678 	.word	0x20000678

08005b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d108      	bne.n	8005bbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd2c 	bl	800660c <vPortFree>
				vPortFree( pxTCB );
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fd29 	bl	800660c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bba:	e019      	b.n	8005bf0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d103      	bne.n	8005bce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fd20 	bl	800660c <vPortFree>
	}
 8005bcc:	e010      	b.n	8005bf0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d00b      	beq.n	8005bf0 <prvDeleteTCB+0x58>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <prvDeleteTCB+0x54>
	}
 8005bf0:	bf00      	nop
 8005bf2:	3710      	adds	r7, #16
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8005c30 <prvResetNextTaskUnblockTime+0x38>)
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c08:	4b0a      	ldr	r3, [pc, #40]	@ (8005c34 <prvResetNextTaskUnblockTime+0x3c>)
 8005c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c10:	e008      	b.n	8005c24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c12:	4b07      	ldr	r3, [pc, #28]	@ (8005c30 <prvResetNextTaskUnblockTime+0x38>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	4a04      	ldr	r2, [pc, #16]	@ (8005c34 <prvResetNextTaskUnblockTime+0x3c>)
 8005c22:	6013      	str	r3, [r2, #0]
}
 8005c24:	bf00      	nop
 8005c26:	370c      	adds	r7, #12
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bc80      	pop	{r7}
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	20000648 	.word	0x20000648
 8005c34:	200006b0 	.word	0x200006b0

08005c38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c6c <xTaskGetSchedulerState+0x34>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d102      	bne.n	8005c4c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c46:	2301      	movs	r3, #1
 8005c48:	607b      	str	r3, [r7, #4]
 8005c4a:	e008      	b.n	8005c5e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c4c:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <xTaskGetSchedulerState+0x38>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c54:	2302      	movs	r3, #2
 8005c56:	607b      	str	r3, [r7, #4]
 8005c58:	e001      	b.n	8005c5e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c5e:	687b      	ldr	r3, [r7, #4]
	}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bc80      	pop	{r7}
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	2000069c 	.word	0x2000069c
 8005c70:	200006b8 	.word	0x200006b8

08005c74 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c80:	2300      	movs	r3, #0
 8005c82:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d05e      	beq.n	8005d48 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c8e:	4b31      	ldr	r3, [pc, #196]	@ (8005d54 <xTaskPriorityInherit+0xe0>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d24e      	bcs.n	8005d36 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	db06      	blt.n	8005cae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ca0:	4b2c      	ldr	r3, [pc, #176]	@ (8005d54 <xTaskPriorityInherit+0xe0>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca6:	f1c3 0207 	rsb	r2, r3, #7
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	6959      	ldr	r1, [r3, #20]
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4a26      	ldr	r2, [pc, #152]	@ (8005d58 <xTaskPriorityInherit+0xe4>)
 8005cc0:	4413      	add	r3, r2
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	d12f      	bne.n	8005d26 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f7fe fc26 	bl	800451c <uxListRemove>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d10a      	bne.n	8005cec <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cda:	2201      	movs	r2, #1
 8005cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce0:	43da      	mvns	r2, r3
 8005ce2:	4b1e      	ldr	r3, [pc, #120]	@ (8005d5c <xTaskPriorityInherit+0xe8>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4013      	ands	r3, r2
 8005ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8005d5c <xTaskPriorityInherit+0xe8>)
 8005cea:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005cec:	4b19      	ldr	r3, [pc, #100]	@ (8005d54 <xTaskPriorityInherit+0xe0>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cf2:	68bb      	ldr	r3, [r7, #8]
 8005cf4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	409a      	lsls	r2, r3
 8005cfe:	4b17      	ldr	r3, [pc, #92]	@ (8005d5c <xTaskPriorityInherit+0xe8>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	4a15      	ldr	r2, [pc, #84]	@ (8005d5c <xTaskPriorityInherit+0xe8>)
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4a10      	ldr	r2, [pc, #64]	@ (8005d58 <xTaskPriorityInherit+0xe4>)
 8005d16:	441a      	add	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f7fe fba1 	bl	8004466 <vListInsertEnd>
 8005d24:	e004      	b.n	8005d30 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <xTaskPriorityInherit+0xe0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	e008      	b.n	8005d48 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d3a:	4b06      	ldr	r3, [pc, #24]	@ (8005d54 <xTaskPriorityInherit+0xe0>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d201      	bcs.n	8005d48 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005d44:	2301      	movs	r3, #1
 8005d46:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d48:	68fb      	ldr	r3, [r7, #12]
	}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3710      	adds	r7, #16
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	20000590 	.word	0x20000590
 8005d58:	20000594 	.word	0x20000594
 8005d5c:	20000698 	.word	0x20000698

08005d60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d070      	beq.n	8005e58 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005d76:	4b3b      	ldr	r3, [pc, #236]	@ (8005e64 <xTaskPriorityDisinherit+0x104>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	693a      	ldr	r2, [r7, #16]
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d00b      	beq.n	8005d98 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	60fb      	str	r3, [r7, #12]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10b      	bne.n	8005db8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60bb      	str	r3, [r7, #8]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dbc:	1e5a      	subs	r2, r3, #1
 8005dbe:	693b      	ldr	r3, [r7, #16]
 8005dc0:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d044      	beq.n	8005e58 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d140      	bne.n	8005e58 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fb9e 	bl	800451c <uxListRemove>
 8005de0:	4603      	mov	r3, r0
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d115      	bne.n	8005e12 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dea:	491f      	ldr	r1, [pc, #124]	@ (8005e68 <xTaskPriorityDisinherit+0x108>)
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	440b      	add	r3, r1
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <xTaskPriorityDisinherit+0xb2>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e00:	2201      	movs	r2, #1
 8005e02:	fa02 f303 	lsl.w	r3, r2, r3
 8005e06:	43da      	mvns	r2, r3
 8005e08:	4b18      	ldr	r3, [pc, #96]	@ (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	4a17      	ldr	r2, [pc, #92]	@ (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e10:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1e:	f1c3 0207 	rsb	r2, r3, #7
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	4b0f      	ldr	r3, [pc, #60]	@ (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4313      	orrs	r3, r2
 8005e34:	4a0d      	ldr	r2, [pc, #52]	@ (8005e6c <xTaskPriorityDisinherit+0x10c>)
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	4413      	add	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4a08      	ldr	r2, [pc, #32]	@ (8005e68 <xTaskPriorityDisinherit+0x108>)
 8005e46:	441a      	add	r2, r3
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	3304      	adds	r3, #4
 8005e4c:	4619      	mov	r1, r3
 8005e4e:	4610      	mov	r0, r2
 8005e50:	f7fe fb09 	bl	8004466 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e58:	697b      	ldr	r3, [r7, #20]
	}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3718      	adds	r7, #24
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	20000590 	.word	0x20000590
 8005e68:	20000594 	.word	0x20000594
 8005e6c:	20000698 	.word	0x20000698

08005e70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b088      	sub	sp, #32
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d079      	beq.n	8005f7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10b      	bne.n	8005ea8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	60fb      	str	r3, [r7, #12]
}
 8005ea2:	bf00      	nop
 8005ea4:	bf00      	nop
 8005ea6:	e7fd      	b.n	8005ea4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d902      	bls.n	8005eb8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	61fb      	str	r3, [r7, #28]
 8005eb6:	e002      	b.n	8005ebe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005eb8:	69bb      	ldr	r3, [r7, #24]
 8005eba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ebc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ebe:	69bb      	ldr	r3, [r7, #24]
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	69fa      	ldr	r2, [r7, #28]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d059      	beq.n	8005f7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ec8:	69bb      	ldr	r3, [r7, #24]
 8005eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d154      	bne.n	8005f7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8005f84 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	69ba      	ldr	r2, [r7, #24]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d10b      	bne.n	8005ef4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8005edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee0:	f383 8811 	msr	BASEPRI, r3
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	f3bf 8f4f 	dsb	sy
 8005eec:	60bb      	str	r3, [r7, #8]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	69fa      	ldr	r2, [r7, #28]
 8005efe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f00:	69bb      	ldr	r3, [r7, #24]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	db04      	blt.n	8005f12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f08:	69fb      	ldr	r3, [r7, #28]
 8005f0a:	f1c3 0207 	rsb	r2, r3, #7
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	6959      	ldr	r1, [r3, #20]
 8005f16:	693a      	ldr	r2, [r7, #16]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4a19      	ldr	r2, [pc, #100]	@ (8005f88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f22:	4413      	add	r3, r2
 8005f24:	4299      	cmp	r1, r3
 8005f26:	d129      	bne.n	8005f7c <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	3304      	adds	r3, #4
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f7fe faf5 	bl	800451c <uxListRemove>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f42:	43da      	mvns	r2, r3
 8005f44:	4b11      	ldr	r3, [pc, #68]	@ (8005f8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	4a10      	ldr	r2, [pc, #64]	@ (8005f8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f4c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f52:	2201      	movs	r2, #1
 8005f54:	409a      	lsls	r2, r3
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	4a0b      	ldr	r2, [pc, #44]	@ (8005f8c <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8005f5e:	6013      	str	r3, [r2, #0]
 8005f60:	69bb      	ldr	r3, [r7, #24]
 8005f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f64:	4613      	mov	r3, r2
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	4413      	add	r3, r2
 8005f6a:	009b      	lsls	r3, r3, #2
 8005f6c:	4a06      	ldr	r2, [pc, #24]	@ (8005f88 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8005f6e:	441a      	add	r2, r3
 8005f70:	69bb      	ldr	r3, [r7, #24]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f7fe fa75 	bl	8004466 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f7c:	bf00      	nop
 8005f7e:	3720      	adds	r7, #32
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	20000590 	.word	0x20000590
 8005f88:	20000594 	.word	0x20000594
 8005f8c:	20000698 	.word	0x20000698

08005f90 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f90:	b480      	push	{r7}
 8005f92:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005f94:	4b07      	ldr	r3, [pc, #28]	@ (8005fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d004      	beq.n	8005fa6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005f9c:	4b05      	ldr	r3, [pc, #20]	@ (8005fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005fa2:	3201      	adds	r2, #1
 8005fa4:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 8005fa6:	4b03      	ldr	r3, [pc, #12]	@ (8005fb4 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
	}
 8005faa:	4618      	mov	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bc80      	pop	{r7}
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	20000590 	.word	0x20000590

08005fb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fc2:	4b29      	ldr	r3, [pc, #164]	@ (8006068 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fc8:	4b28      	ldr	r3, [pc, #160]	@ (800606c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe faa4 	bl	800451c <uxListRemove>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d10b      	bne.n	8005ff2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005fda:	4b24      	ldr	r3, [pc, #144]	@ (800606c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe6:	43da      	mvns	r2, r3
 8005fe8:	4b21      	ldr	r3, [pc, #132]	@ (8006070 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4013      	ands	r3, r2
 8005fee:	4a20      	ldr	r2, [pc, #128]	@ (8006070 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ff0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ff8:	d10a      	bne.n	8006010 <prvAddCurrentTaskToDelayedList+0x58>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d007      	beq.n	8006010 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006000:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	481a      	ldr	r0, [pc, #104]	@ (8006074 <prvAddCurrentTaskToDelayedList+0xbc>)
 800600a:	f7fe fa2c 	bl	8004466 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800600e:	e026      	b.n	800605e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006010:	68fa      	ldr	r2, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006018:	4b14      	ldr	r3, [pc, #80]	@ (800606c <prvAddCurrentTaskToDelayedList+0xb4>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68ba      	ldr	r2, [r7, #8]
 800601e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006020:	68ba      	ldr	r2, [r7, #8]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	429a      	cmp	r2, r3
 8006026:	d209      	bcs.n	800603c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006028:	4b13      	ldr	r3, [pc, #76]	@ (8006078 <prvAddCurrentTaskToDelayedList+0xc0>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b0f      	ldr	r3, [pc, #60]	@ (800606c <prvAddCurrentTaskToDelayedList+0xb4>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	3304      	adds	r3, #4
 8006032:	4619      	mov	r1, r3
 8006034:	4610      	mov	r0, r2
 8006036:	f7fe fa39 	bl	80044ac <vListInsert>
}
 800603a:	e010      	b.n	800605e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800603c:	4b0f      	ldr	r3, [pc, #60]	@ (800607c <prvAddCurrentTaskToDelayedList+0xc4>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b0a      	ldr	r3, [pc, #40]	@ (800606c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f7fe fa2f 	bl	80044ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800604e:	4b0c      	ldr	r3, [pc, #48]	@ (8006080 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	429a      	cmp	r2, r3
 8006056:	d202      	bcs.n	800605e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006058:	4a09      	ldr	r2, [pc, #36]	@ (8006080 <prvAddCurrentTaskToDelayedList+0xc8>)
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	6013      	str	r3, [r2, #0]
}
 800605e:	bf00      	nop
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	20000694 	.word	0x20000694
 800606c:	20000590 	.word	0x20000590
 8006070:	20000698 	.word	0x20000698
 8006074:	2000067c 	.word	0x2000067c
 8006078:	2000064c 	.word	0x2000064c
 800607c:	20000648 	.word	0x20000648
 8006080:	200006b0 	.word	0x200006b0

08006084 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3b04      	subs	r3, #4
 8006094:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800609c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3b04      	subs	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	f023 0201 	bic.w	r2, r3, #1
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3b04      	subs	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80060b4:	4a08      	ldr	r2, [pc, #32]	@ (80060d8 <pxPortInitialiseStack+0x54>)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3b14      	subs	r3, #20
 80060be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	3b20      	subs	r3, #32
 80060ca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80060cc:	68fb      	ldr	r3, [r7, #12]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bc80      	pop	{r7}
 80060d6:	4770      	bx	lr
 80060d8:	080060dd 	.word	0x080060dd

080060dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80060dc:	b480      	push	{r7}
 80060de:	b085      	sub	sp, #20
 80060e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80060e6:	4b12      	ldr	r3, [pc, #72]	@ (8006130 <prvTaskExitError+0x54>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ee:	d00b      	beq.n	8006108 <prvTaskExitError+0x2c>
	__asm volatile
 80060f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f4:	f383 8811 	msr	BASEPRI, r3
 80060f8:	f3bf 8f6f 	isb	sy
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	60fb      	str	r3, [r7, #12]
}
 8006102:	bf00      	nop
 8006104:	bf00      	nop
 8006106:	e7fd      	b.n	8006104 <prvTaskExitError+0x28>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	60bb      	str	r3, [r7, #8]
}
 800611a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800611c:	bf00      	nop
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d0fc      	beq.n	800611e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	bc80      	pop	{r7}
 800612e:	4770      	bx	lr
 8006130:	20000148 	.word	0x20000148
	...

08006140 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006140:	4b07      	ldr	r3, [pc, #28]	@ (8006160 <pxCurrentTCBConst2>)
 8006142:	6819      	ldr	r1, [r3, #0]
 8006144:	6808      	ldr	r0, [r1, #0]
 8006146:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800614a:	f380 8809 	msr	PSP, r0
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f04f 0000 	mov.w	r0, #0
 8006156:	f380 8811 	msr	BASEPRI, r0
 800615a:	f04e 0e0d 	orr.w	lr, lr, #13
 800615e:	4770      	bx	lr

08006160 <pxCurrentTCBConst2>:
 8006160:	20000590 	.word	0x20000590
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006164:	bf00      	nop
 8006166:	bf00      	nop

08006168 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006168:	4806      	ldr	r0, [pc, #24]	@ (8006184 <prvPortStartFirstTask+0x1c>)
 800616a:	6800      	ldr	r0, [r0, #0]
 800616c:	6800      	ldr	r0, [r0, #0]
 800616e:	f380 8808 	msr	MSP, r0
 8006172:	b662      	cpsie	i
 8006174:	b661      	cpsie	f
 8006176:	f3bf 8f4f 	dsb	sy
 800617a:	f3bf 8f6f 	isb	sy
 800617e:	df00      	svc	0
 8006180:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006182:	bf00      	nop
 8006184:	e000ed08 	.word	0xe000ed08

08006188 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800618e:	4b32      	ldr	r3, [pc, #200]	@ (8006258 <xPortStartScheduler+0xd0>)
 8006190:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	781b      	ldrb	r3, [r3, #0]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	22ff      	movs	r2, #255	@ 0xff
 800619e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	781b      	ldrb	r3, [r3, #0]
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80061a8:	78fb      	ldrb	r3, [r7, #3]
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	4b2a      	ldr	r3, [pc, #168]	@ (800625c <xPortStartScheduler+0xd4>)
 80061b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80061b6:	4b2a      	ldr	r3, [pc, #168]	@ (8006260 <xPortStartScheduler+0xd8>)
 80061b8:	2207      	movs	r2, #7
 80061ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061bc:	e009      	b.n	80061d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80061be:	4b28      	ldr	r3, [pc, #160]	@ (8006260 <xPortStartScheduler+0xd8>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3b01      	subs	r3, #1
 80061c4:	4a26      	ldr	r2, [pc, #152]	@ (8006260 <xPortStartScheduler+0xd8>)
 80061c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80061c8:	78fb      	ldrb	r3, [r7, #3]
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	b2db      	uxtb	r3, r3
 80061d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80061d2:	78fb      	ldrb	r3, [r7, #3]
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80061da:	2b80      	cmp	r3, #128	@ 0x80
 80061dc:	d0ef      	beq.n	80061be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80061de:	4b20      	ldr	r3, [pc, #128]	@ (8006260 <xPortStartScheduler+0xd8>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f1c3 0307 	rsb	r3, r3, #7
 80061e6:	2b04      	cmp	r3, #4
 80061e8:	d00b      	beq.n	8006202 <xPortStartScheduler+0x7a>
	__asm volatile
 80061ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ee:	f383 8811 	msr	BASEPRI, r3
 80061f2:	f3bf 8f6f 	isb	sy
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	60bb      	str	r3, [r7, #8]
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	e7fd      	b.n	80061fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006202:	4b17      	ldr	r3, [pc, #92]	@ (8006260 <xPortStartScheduler+0xd8>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	021b      	lsls	r3, r3, #8
 8006208:	4a15      	ldr	r2, [pc, #84]	@ (8006260 <xPortStartScheduler+0xd8>)
 800620a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800620c:	4b14      	ldr	r3, [pc, #80]	@ (8006260 <xPortStartScheduler+0xd8>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006214:	4a12      	ldr	r2, [pc, #72]	@ (8006260 <xPortStartScheduler+0xd8>)
 8006216:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	b2da      	uxtb	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006220:	4b10      	ldr	r3, [pc, #64]	@ (8006264 <xPortStartScheduler+0xdc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a0f      	ldr	r2, [pc, #60]	@ (8006264 <xPortStartScheduler+0xdc>)
 8006226:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800622a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800622c:	4b0d      	ldr	r3, [pc, #52]	@ (8006264 <xPortStartScheduler+0xdc>)
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a0c      	ldr	r2, [pc, #48]	@ (8006264 <xPortStartScheduler+0xdc>)
 8006232:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006236:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006238:	f000 f8b8 	bl	80063ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800623c:	4b0a      	ldr	r3, [pc, #40]	@ (8006268 <xPortStartScheduler+0xe0>)
 800623e:	2200      	movs	r2, #0
 8006240:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006242:	f7ff ff91 	bl	8006168 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006246:	f7ff fab5 	bl	80057b4 <vTaskSwitchContext>
	prvTaskExitError();
 800624a:	f7ff ff47 	bl	80060dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	e000e400 	.word	0xe000e400
 800625c:	200006bc 	.word	0x200006bc
 8006260:	200006c0 	.word	0x200006c0
 8006264:	e000ed20 	.word	0xe000ed20
 8006268:	20000148 	.word	0x20000148

0800626c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	607b      	str	r3, [r7, #4]
}
 8006284:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006286:	4b0f      	ldr	r3, [pc, #60]	@ (80062c4 <vPortEnterCritical+0x58>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	3301      	adds	r3, #1
 800628c:	4a0d      	ldr	r2, [pc, #52]	@ (80062c4 <vPortEnterCritical+0x58>)
 800628e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006290:	4b0c      	ldr	r3, [pc, #48]	@ (80062c4 <vPortEnterCritical+0x58>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d110      	bne.n	80062ba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006298:	4b0b      	ldr	r3, [pc, #44]	@ (80062c8 <vPortEnterCritical+0x5c>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	b2db      	uxtb	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00b      	beq.n	80062ba <vPortEnterCritical+0x4e>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	603b      	str	r3, [r7, #0]
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	e7fd      	b.n	80062b6 <vPortEnterCritical+0x4a>
	}
}
 80062ba:	bf00      	nop
 80062bc:	370c      	adds	r7, #12
 80062be:	46bd      	mov	sp, r7
 80062c0:	bc80      	pop	{r7}
 80062c2:	4770      	bx	lr
 80062c4:	20000148 	.word	0x20000148
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80062d2:	4b12      	ldr	r3, [pc, #72]	@ (800631c <vPortExitCritical+0x50>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10b      	bne.n	80062f2 <vPortExitCritical+0x26>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	607b      	str	r3, [r7, #4]
}
 80062ec:	bf00      	nop
 80062ee:	bf00      	nop
 80062f0:	e7fd      	b.n	80062ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80062f2:	4b0a      	ldr	r3, [pc, #40]	@ (800631c <vPortExitCritical+0x50>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3b01      	subs	r3, #1
 80062f8:	4a08      	ldr	r2, [pc, #32]	@ (800631c <vPortExitCritical+0x50>)
 80062fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80062fc:	4b07      	ldr	r3, [pc, #28]	@ (800631c <vPortExitCritical+0x50>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d105      	bne.n	8006310 <vPortExitCritical+0x44>
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	f383 8811 	msr	BASEPRI, r3
}
 800630e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006310:	bf00      	nop
 8006312:	370c      	adds	r7, #12
 8006314:	46bd      	mov	sp, r7
 8006316:	bc80      	pop	{r7}
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000148 	.word	0x20000148

08006320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006320:	f3ef 8009 	mrs	r0, PSP
 8006324:	f3bf 8f6f 	isb	sy
 8006328:	4b0d      	ldr	r3, [pc, #52]	@ (8006360 <pxCurrentTCBConst>)
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006330:	6010      	str	r0, [r2, #0]
 8006332:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006336:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800633a:	f380 8811 	msr	BASEPRI, r0
 800633e:	f7ff fa39 	bl	80057b4 <vTaskSwitchContext>
 8006342:	f04f 0000 	mov.w	r0, #0
 8006346:	f380 8811 	msr	BASEPRI, r0
 800634a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800634e:	6819      	ldr	r1, [r3, #0]
 8006350:	6808      	ldr	r0, [r1, #0]
 8006352:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006356:	f380 8809 	msr	PSP, r0
 800635a:	f3bf 8f6f 	isb	sy
 800635e:	4770      	bx	lr

08006360 <pxCurrentTCBConst>:
 8006360:	20000590 	.word	0x20000590
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006364:	bf00      	nop
 8006366:	bf00      	nop

08006368 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	607b      	str	r3, [r7, #4]
}
 8006380:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006382:	f7ff f95d 	bl	8005640 <xTaskIncrementTick>
 8006386:	4603      	mov	r3, r0
 8006388:	2b00      	cmp	r3, #0
 800638a:	d003      	beq.n	8006394 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800638c:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <SysTick_Handler+0x40>)
 800638e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006392:	601a      	str	r2, [r3, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	f383 8811 	msr	BASEPRI, r3
}
 800639e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	e000ed04 	.word	0xe000ed04

080063ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80063b0:	4b0a      	ldr	r3, [pc, #40]	@ (80063dc <vPortSetupTimerInterrupt+0x30>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80063b6:	4b0a      	ldr	r3, [pc, #40]	@ (80063e0 <vPortSetupTimerInterrupt+0x34>)
 80063b8:	2200      	movs	r2, #0
 80063ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80063bc:	4b09      	ldr	r3, [pc, #36]	@ (80063e4 <vPortSetupTimerInterrupt+0x38>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a09      	ldr	r2, [pc, #36]	@ (80063e8 <vPortSetupTimerInterrupt+0x3c>)
 80063c2:	fba2 2303 	umull	r2, r3, r2, r3
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	4a08      	ldr	r2, [pc, #32]	@ (80063ec <vPortSetupTimerInterrupt+0x40>)
 80063ca:	3b01      	subs	r3, #1
 80063cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80063ce:	4b03      	ldr	r3, [pc, #12]	@ (80063dc <vPortSetupTimerInterrupt+0x30>)
 80063d0:	2207      	movs	r2, #7
 80063d2:	601a      	str	r2, [r3, #0]
}
 80063d4:	bf00      	nop
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bc80      	pop	{r7}
 80063da:	4770      	bx	lr
 80063dc:	e000e010 	.word	0xe000e010
 80063e0:	e000e018 	.word	0xe000e018
 80063e4:	2000013c 	.word	0x2000013c
 80063e8:	10624dd3 	.word	0x10624dd3
 80063ec:	e000e014 	.word	0xe000e014

080063f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063f6:	f3ef 8305 	mrs	r3, IPSR
 80063fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2b0f      	cmp	r3, #15
 8006400:	d915      	bls.n	800642e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006402:	4a17      	ldr	r2, [pc, #92]	@ (8006460 <vPortValidateInterruptPriority+0x70>)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	4413      	add	r3, r2
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800640c:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <vPortValidateInterruptPriority+0x74>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	7afa      	ldrb	r2, [r7, #11]
 8006412:	429a      	cmp	r2, r3
 8006414:	d20b      	bcs.n	800642e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	607b      	str	r3, [r7, #4]
}
 8006428:	bf00      	nop
 800642a:	bf00      	nop
 800642c:	e7fd      	b.n	800642a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800642e:	4b0e      	ldr	r3, [pc, #56]	@ (8006468 <vPortValidateInterruptPriority+0x78>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006436:	4b0d      	ldr	r3, [pc, #52]	@ (800646c <vPortValidateInterruptPriority+0x7c>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	429a      	cmp	r2, r3
 800643c:	d90b      	bls.n	8006456 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800643e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006442:	f383 8811 	msr	BASEPRI, r3
 8006446:	f3bf 8f6f 	isb	sy
 800644a:	f3bf 8f4f 	dsb	sy
 800644e:	603b      	str	r3, [r7, #0]
}
 8006450:	bf00      	nop
 8006452:	bf00      	nop
 8006454:	e7fd      	b.n	8006452 <vPortValidateInterruptPriority+0x62>
	}
 8006456:	bf00      	nop
 8006458:	3714      	adds	r7, #20
 800645a:	46bd      	mov	sp, r7
 800645c:	bc80      	pop	{r7}
 800645e:	4770      	bx	lr
 8006460:	e000e3f0 	.word	0xe000e3f0
 8006464:	200006bc 	.word	0x200006bc
 8006468:	e000ed0c 	.word	0xe000ed0c
 800646c:	200006c0 	.word	0x200006c0

08006470 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	@ 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800647c:	f7ff f834 	bl	80054e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006480:	4b5c      	ldr	r3, [pc, #368]	@ (80065f4 <pvPortMalloc+0x184>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006488:	f000 f924 	bl	80066d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800648c:	4b5a      	ldr	r3, [pc, #360]	@ (80065f8 <pvPortMalloc+0x188>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	f040 8095 	bne.w	80065c4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d01e      	beq.n	80064de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80064a0:	2208      	movs	r2, #8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	4413      	add	r3, r2
 80064a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f003 0307 	and.w	r3, r3, #7
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d015      	beq.n	80064de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f023 0307 	bic.w	r3, r3, #7
 80064b8:	3308      	adds	r3, #8
 80064ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00b      	beq.n	80064de <pvPortMalloc+0x6e>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
}
 80064d8:	bf00      	nop
 80064da:	bf00      	nop
 80064dc:	e7fd      	b.n	80064da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d06f      	beq.n	80065c4 <pvPortMalloc+0x154>
 80064e4:	4b45      	ldr	r3, [pc, #276]	@ (80065fc <pvPortMalloc+0x18c>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	687a      	ldr	r2, [r7, #4]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d86a      	bhi.n	80065c4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064ee:	4b44      	ldr	r3, [pc, #272]	@ (8006600 <pvPortMalloc+0x190>)
 80064f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064f2:	4b43      	ldr	r3, [pc, #268]	@ (8006600 <pvPortMalloc+0x190>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064f8:	e004      	b.n	8006504 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80064fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	429a      	cmp	r2, r3
 800650c:	d903      	bls.n	8006516 <pvPortMalloc+0xa6>
 800650e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d1f1      	bne.n	80064fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006516:	4b37      	ldr	r3, [pc, #220]	@ (80065f4 <pvPortMalloc+0x184>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800651c:	429a      	cmp	r2, r3
 800651e:	d051      	beq.n	80065c4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2208      	movs	r2, #8
 8006526:	4413      	add	r3, r2
 8006528:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800652a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	1ad2      	subs	r2, r2, r3
 800653a:	2308      	movs	r3, #8
 800653c:	005b      	lsls	r3, r3, #1
 800653e:	429a      	cmp	r2, r3
 8006540:	d920      	bls.n	8006584 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006542:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4413      	add	r3, r2
 8006548:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800654a:	69bb      	ldr	r3, [r7, #24]
 800654c:	f003 0307 	and.w	r3, r3, #7
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00b      	beq.n	800656c <pvPortMalloc+0xfc>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	613b      	str	r3, [r7, #16]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800656c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	1ad2      	subs	r2, r2, r3
 8006574:	69bb      	ldr	r3, [r7, #24]
 8006576:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006578:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657a:	687a      	ldr	r2, [r7, #4]
 800657c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800657e:	69b8      	ldr	r0, [r7, #24]
 8006580:	f000 f90a 	bl	8006798 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006584:	4b1d      	ldr	r3, [pc, #116]	@ (80065fc <pvPortMalloc+0x18c>)
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	1ad3      	subs	r3, r2, r3
 800658e:	4a1b      	ldr	r2, [pc, #108]	@ (80065fc <pvPortMalloc+0x18c>)
 8006590:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006592:	4b1a      	ldr	r3, [pc, #104]	@ (80065fc <pvPortMalloc+0x18c>)
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	4b1b      	ldr	r3, [pc, #108]	@ (8006604 <pvPortMalloc+0x194>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	429a      	cmp	r2, r3
 800659c:	d203      	bcs.n	80065a6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800659e:	4b17      	ldr	r3, [pc, #92]	@ (80065fc <pvPortMalloc+0x18c>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a18      	ldr	r2, [pc, #96]	@ (8006604 <pvPortMalloc+0x194>)
 80065a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80065a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	4b13      	ldr	r3, [pc, #76]	@ (80065f8 <pvPortMalloc+0x188>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	431a      	orrs	r2, r3
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80065b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b6:	2200      	movs	r2, #0
 80065b8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80065ba:	4b13      	ldr	r3, [pc, #76]	@ (8006608 <pvPortMalloc+0x198>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3301      	adds	r3, #1
 80065c0:	4a11      	ldr	r2, [pc, #68]	@ (8006608 <pvPortMalloc+0x198>)
 80065c2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80065c4:	f7fe ff9e 	bl	8005504 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	f003 0307 	and.w	r3, r3, #7
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <pvPortMalloc+0x17a>
	__asm volatile
 80065d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d6:	f383 8811 	msr	BASEPRI, r3
 80065da:	f3bf 8f6f 	isb	sy
 80065de:	f3bf 8f4f 	dsb	sy
 80065e2:	60fb      	str	r3, [r7, #12]
}
 80065e4:	bf00      	nop
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <pvPortMalloc+0x176>
	return pvReturn;
 80065ea:	69fb      	ldr	r3, [r7, #28]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3728      	adds	r7, #40	@ 0x28
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	200012cc 	.word	0x200012cc
 80065f8:	200012e0 	.word	0x200012e0
 80065fc:	200012d0 	.word	0x200012d0
 8006600:	200012c4 	.word	0x200012c4
 8006604:	200012d4 	.word	0x200012d4
 8006608:	200012d8 	.word	0x200012d8

0800660c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b086      	sub	sp, #24
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04f      	beq.n	80066be <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800661e:	2308      	movs	r3, #8
 8006620:	425b      	negs	r3, r3
 8006622:	697a      	ldr	r2, [r7, #20]
 8006624:	4413      	add	r3, r2
 8006626:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006628:	697b      	ldr	r3, [r7, #20]
 800662a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	685a      	ldr	r2, [r3, #4]
 8006630:	4b25      	ldr	r3, [pc, #148]	@ (80066c8 <vPortFree+0xbc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4013      	ands	r3, r2
 8006636:	2b00      	cmp	r3, #0
 8006638:	d10b      	bne.n	8006652 <vPortFree+0x46>
	__asm volatile
 800663a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800663e:	f383 8811 	msr	BASEPRI, r3
 8006642:	f3bf 8f6f 	isb	sy
 8006646:	f3bf 8f4f 	dsb	sy
 800664a:	60fb      	str	r3, [r7, #12]
}
 800664c:	bf00      	nop
 800664e:	bf00      	nop
 8006650:	e7fd      	b.n	800664e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00b      	beq.n	8006672 <vPortFree+0x66>
	__asm volatile
 800665a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665e:	f383 8811 	msr	BASEPRI, r3
 8006662:	f3bf 8f6f 	isb	sy
 8006666:	f3bf 8f4f 	dsb	sy
 800666a:	60bb      	str	r3, [r7, #8]
}
 800666c:	bf00      	nop
 800666e:	bf00      	nop
 8006670:	e7fd      	b.n	800666e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	685a      	ldr	r2, [r3, #4]
 8006676:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <vPortFree+0xbc>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01e      	beq.n	80066be <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11a      	bne.n	80066be <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <vPortFree+0xbc>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	43db      	mvns	r3, r3
 8006692:	401a      	ands	r2, r3
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006698:	f7fe ff26 	bl	80054e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	685a      	ldr	r2, [r3, #4]
 80066a0:	4b0a      	ldr	r3, [pc, #40]	@ (80066cc <vPortFree+0xc0>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4413      	add	r3, r2
 80066a6:	4a09      	ldr	r2, [pc, #36]	@ (80066cc <vPortFree+0xc0>)
 80066a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066aa:	6938      	ldr	r0, [r7, #16]
 80066ac:	f000 f874 	bl	8006798 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80066b0:	4b07      	ldr	r3, [pc, #28]	@ (80066d0 <vPortFree+0xc4>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	4a06      	ldr	r2, [pc, #24]	@ (80066d0 <vPortFree+0xc4>)
 80066b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80066ba:	f7fe ff23 	bl	8005504 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80066be:	bf00      	nop
 80066c0:	3718      	adds	r7, #24
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}
 80066c6:	bf00      	nop
 80066c8:	200012e0 	.word	0x200012e0
 80066cc:	200012d0 	.word	0x200012d0
 80066d0:	200012dc 	.word	0x200012dc

080066d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80066da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80066de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066e0:	4b27      	ldr	r3, [pc, #156]	@ (8006780 <prvHeapInit+0xac>)
 80066e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f003 0307 	and.w	r3, r3, #7
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d00c      	beq.n	8006708 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	3307      	adds	r3, #7
 80066f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	f023 0307 	bic.w	r3, r3, #7
 80066fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	4a1f      	ldr	r2, [pc, #124]	@ (8006780 <prvHeapInit+0xac>)
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800670c:	4a1d      	ldr	r2, [pc, #116]	@ (8006784 <prvHeapInit+0xb0>)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006712:	4b1c      	ldr	r3, [pc, #112]	@ (8006784 <prvHeapInit+0xb0>)
 8006714:	2200      	movs	r2, #0
 8006716:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	4413      	add	r3, r2
 800671e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006720:	2208      	movs	r2, #8
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0307 	bic.w	r3, r3, #7
 800672e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	4a15      	ldr	r2, [pc, #84]	@ (8006788 <prvHeapInit+0xb4>)
 8006734:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006736:	4b14      	ldr	r3, [pc, #80]	@ (8006788 <prvHeapInit+0xb4>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2200      	movs	r2, #0
 800673c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800673e:	4b12      	ldr	r3, [pc, #72]	@ (8006788 <prvHeapInit+0xb4>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	1ad2      	subs	r2, r2, r3
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006754:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <prvHeapInit+0xb4>)
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	4a0a      	ldr	r2, [pc, #40]	@ (800678c <prvHeapInit+0xb8>)
 8006762:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	4a09      	ldr	r2, [pc, #36]	@ (8006790 <prvHeapInit+0xbc>)
 800676a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800676c:	4b09      	ldr	r3, [pc, #36]	@ (8006794 <prvHeapInit+0xc0>)
 800676e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006772:	601a      	str	r2, [r3, #0]
}
 8006774:	bf00      	nop
 8006776:	3714      	adds	r7, #20
 8006778:	46bd      	mov	sp, r7
 800677a:	bc80      	pop	{r7}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop
 8006780:	200006c4 	.word	0x200006c4
 8006784:	200012c4 	.word	0x200012c4
 8006788:	200012cc 	.word	0x200012cc
 800678c:	200012d4 	.word	0x200012d4
 8006790:	200012d0 	.word	0x200012d0
 8006794:	200012e0 	.word	0x200012e0

08006798 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067a0:	4b27      	ldr	r3, [pc, #156]	@ (8006840 <prvInsertBlockIntoFreeList+0xa8>)
 80067a2:	60fb      	str	r3, [r7, #12]
 80067a4:	e002      	b.n	80067ac <prvInsertBlockIntoFreeList+0x14>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d8f7      	bhi.n	80067a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	4413      	add	r3, r2
 80067c2:	687a      	ldr	r2, [r7, #4]
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d108      	bne.n	80067da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	441a      	add	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	685b      	ldr	r3, [r3, #4]
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	441a      	add	r2, r3
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d118      	bne.n	8006820 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	4b14      	ldr	r3, [pc, #80]	@ (8006844 <prvInsertBlockIntoFreeList+0xac>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d00d      	beq.n	8006816 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	441a      	add	r2, r3
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681a      	ldr	r2, [r3, #0]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	601a      	str	r2, [r3, #0]
 8006814:	e008      	b.n	8006828 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006816:	4b0b      	ldr	r3, [pc, #44]	@ (8006844 <prvInsertBlockIntoFreeList+0xac>)
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	e003      	b.n	8006828 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d002      	beq.n	8006836 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006836:	bf00      	nop
 8006838:	3714      	adds	r7, #20
 800683a:	46bd      	mov	sp, r7
 800683c:	bc80      	pop	{r7}
 800683e:	4770      	bx	lr
 8006840:	200012c4 	.word	0x200012c4
 8006844:	200012cc 	.word	0x200012cc

08006848 <atoi>:
 8006848:	220a      	movs	r2, #10
 800684a:	2100      	movs	r1, #0
 800684c:	f000 b87a 	b.w	8006944 <strtol>

08006850 <_strtol_l.constprop.0>:
 8006850:	2b24      	cmp	r3, #36	@ 0x24
 8006852:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006856:	4686      	mov	lr, r0
 8006858:	4690      	mov	r8, r2
 800685a:	d801      	bhi.n	8006860 <_strtol_l.constprop.0+0x10>
 800685c:	2b01      	cmp	r3, #1
 800685e:	d106      	bne.n	800686e <_strtol_l.constprop.0+0x1e>
 8006860:	f000 f8a2 	bl	80069a8 <__errno>
 8006864:	2316      	movs	r3, #22
 8006866:	6003      	str	r3, [r0, #0]
 8006868:	2000      	movs	r0, #0
 800686a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800686e:	460d      	mov	r5, r1
 8006870:	4833      	ldr	r0, [pc, #204]	@ (8006940 <_strtol_l.constprop.0+0xf0>)
 8006872:	462a      	mov	r2, r5
 8006874:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006878:	5d06      	ldrb	r6, [r0, r4]
 800687a:	f016 0608 	ands.w	r6, r6, #8
 800687e:	d1f8      	bne.n	8006872 <_strtol_l.constprop.0+0x22>
 8006880:	2c2d      	cmp	r4, #45	@ 0x2d
 8006882:	d12d      	bne.n	80068e0 <_strtol_l.constprop.0+0x90>
 8006884:	2601      	movs	r6, #1
 8006886:	782c      	ldrb	r4, [r5, #0]
 8006888:	1c95      	adds	r5, r2, #2
 800688a:	f033 0210 	bics.w	r2, r3, #16
 800688e:	d109      	bne.n	80068a4 <_strtol_l.constprop.0+0x54>
 8006890:	2c30      	cmp	r4, #48	@ 0x30
 8006892:	d12a      	bne.n	80068ea <_strtol_l.constprop.0+0x9a>
 8006894:	782a      	ldrb	r2, [r5, #0]
 8006896:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800689a:	2a58      	cmp	r2, #88	@ 0x58
 800689c:	d125      	bne.n	80068ea <_strtol_l.constprop.0+0x9a>
 800689e:	2310      	movs	r3, #16
 80068a0:	786c      	ldrb	r4, [r5, #1]
 80068a2:	3502      	adds	r5, #2
 80068a4:	2200      	movs	r2, #0
 80068a6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80068aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80068ae:	fbbc f9f3 	udiv	r9, ip, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	fb03 ca19 	mls	sl, r3, r9, ip
 80068b8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80068bc:	2f09      	cmp	r7, #9
 80068be:	d81b      	bhi.n	80068f8 <_strtol_l.constprop.0+0xa8>
 80068c0:	463c      	mov	r4, r7
 80068c2:	42a3      	cmp	r3, r4
 80068c4:	dd27      	ble.n	8006916 <_strtol_l.constprop.0+0xc6>
 80068c6:	1c57      	adds	r7, r2, #1
 80068c8:	d007      	beq.n	80068da <_strtol_l.constprop.0+0x8a>
 80068ca:	4581      	cmp	r9, r0
 80068cc:	d320      	bcc.n	8006910 <_strtol_l.constprop.0+0xc0>
 80068ce:	d101      	bne.n	80068d4 <_strtol_l.constprop.0+0x84>
 80068d0:	45a2      	cmp	sl, r4
 80068d2:	db1d      	blt.n	8006910 <_strtol_l.constprop.0+0xc0>
 80068d4:	2201      	movs	r2, #1
 80068d6:	fb00 4003 	mla	r0, r0, r3, r4
 80068da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80068de:	e7eb      	b.n	80068b8 <_strtol_l.constprop.0+0x68>
 80068e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80068e2:	bf04      	itt	eq
 80068e4:	782c      	ldrbeq	r4, [r5, #0]
 80068e6:	1c95      	addeq	r5, r2, #2
 80068e8:	e7cf      	b.n	800688a <_strtol_l.constprop.0+0x3a>
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1da      	bne.n	80068a4 <_strtol_l.constprop.0+0x54>
 80068ee:	2c30      	cmp	r4, #48	@ 0x30
 80068f0:	bf0c      	ite	eq
 80068f2:	2308      	moveq	r3, #8
 80068f4:	230a      	movne	r3, #10
 80068f6:	e7d5      	b.n	80068a4 <_strtol_l.constprop.0+0x54>
 80068f8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80068fc:	2f19      	cmp	r7, #25
 80068fe:	d801      	bhi.n	8006904 <_strtol_l.constprop.0+0xb4>
 8006900:	3c37      	subs	r4, #55	@ 0x37
 8006902:	e7de      	b.n	80068c2 <_strtol_l.constprop.0+0x72>
 8006904:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8006908:	2f19      	cmp	r7, #25
 800690a:	d804      	bhi.n	8006916 <_strtol_l.constprop.0+0xc6>
 800690c:	3c57      	subs	r4, #87	@ 0x57
 800690e:	e7d8      	b.n	80068c2 <_strtol_l.constprop.0+0x72>
 8006910:	f04f 32ff 	mov.w	r2, #4294967295
 8006914:	e7e1      	b.n	80068da <_strtol_l.constprop.0+0x8a>
 8006916:	1c53      	adds	r3, r2, #1
 8006918:	d108      	bne.n	800692c <_strtol_l.constprop.0+0xdc>
 800691a:	2322      	movs	r3, #34	@ 0x22
 800691c:	4660      	mov	r0, ip
 800691e:	f8ce 3000 	str.w	r3, [lr]
 8006922:	f1b8 0f00 	cmp.w	r8, #0
 8006926:	d0a0      	beq.n	800686a <_strtol_l.constprop.0+0x1a>
 8006928:	1e69      	subs	r1, r5, #1
 800692a:	e006      	b.n	800693a <_strtol_l.constprop.0+0xea>
 800692c:	b106      	cbz	r6, 8006930 <_strtol_l.constprop.0+0xe0>
 800692e:	4240      	negs	r0, r0
 8006930:	f1b8 0f00 	cmp.w	r8, #0
 8006934:	d099      	beq.n	800686a <_strtol_l.constprop.0+0x1a>
 8006936:	2a00      	cmp	r2, #0
 8006938:	d1f6      	bne.n	8006928 <_strtol_l.constprop.0+0xd8>
 800693a:	f8c8 1000 	str.w	r1, [r8]
 800693e:	e794      	b.n	800686a <_strtol_l.constprop.0+0x1a>
 8006940:	0800739f 	.word	0x0800739f

08006944 <strtol>:
 8006944:	4613      	mov	r3, r2
 8006946:	460a      	mov	r2, r1
 8006948:	4601      	mov	r1, r0
 800694a:	4802      	ldr	r0, [pc, #8]	@ (8006954 <strtol+0x10>)
 800694c:	6800      	ldr	r0, [r0, #0]
 800694e:	f7ff bf7f 	b.w	8006850 <_strtol_l.constprop.0>
 8006952:	bf00      	nop
 8006954:	2000014c 	.word	0x2000014c

08006958 <siprintf>:
 8006958:	b40e      	push	{r1, r2, r3}
 800695a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800695e:	b500      	push	{lr}
 8006960:	b09c      	sub	sp, #112	@ 0x70
 8006962:	ab1d      	add	r3, sp, #116	@ 0x74
 8006964:	9002      	str	r0, [sp, #8]
 8006966:	9006      	str	r0, [sp, #24]
 8006968:	9107      	str	r1, [sp, #28]
 800696a:	9104      	str	r1, [sp, #16]
 800696c:	4808      	ldr	r0, [pc, #32]	@ (8006990 <siprintf+0x38>)
 800696e:	4909      	ldr	r1, [pc, #36]	@ (8006994 <siprintf+0x3c>)
 8006970:	f853 2b04 	ldr.w	r2, [r3], #4
 8006974:	9105      	str	r1, [sp, #20]
 8006976:	6800      	ldr	r0, [r0, #0]
 8006978:	a902      	add	r1, sp, #8
 800697a:	9301      	str	r3, [sp, #4]
 800697c:	f000 f9a0 	bl	8006cc0 <_svfiprintf_r>
 8006980:	2200      	movs	r2, #0
 8006982:	9b02      	ldr	r3, [sp, #8]
 8006984:	701a      	strb	r2, [r3, #0]
 8006986:	b01c      	add	sp, #112	@ 0x70
 8006988:	f85d eb04 	ldr.w	lr, [sp], #4
 800698c:	b003      	add	sp, #12
 800698e:	4770      	bx	lr
 8006990:	2000014c 	.word	0x2000014c
 8006994:	ffff0208 	.word	0xffff0208

08006998 <memset>:
 8006998:	4603      	mov	r3, r0
 800699a:	4402      	add	r2, r0
 800699c:	4293      	cmp	r3, r2
 800699e:	d100      	bne.n	80069a2 <memset+0xa>
 80069a0:	4770      	bx	lr
 80069a2:	f803 1b01 	strb.w	r1, [r3], #1
 80069a6:	e7f9      	b.n	800699c <memset+0x4>

080069a8 <__errno>:
 80069a8:	4b01      	ldr	r3, [pc, #4]	@ (80069b0 <__errno+0x8>)
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	2000014c 	.word	0x2000014c

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	2600      	movs	r6, #0
 80069b8:	4d0c      	ldr	r5, [pc, #48]	@ (80069ec <__libc_init_array+0x38>)
 80069ba:	4c0d      	ldr	r4, [pc, #52]	@ (80069f0 <__libc_init_array+0x3c>)
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	f000 fc78 	bl	80072b8 <_init>
 80069c8:	2600      	movs	r6, #0
 80069ca:	4d0a      	ldr	r5, [pc, #40]	@ (80069f4 <__libc_init_array+0x40>)
 80069cc:	4c0a      	ldr	r4, [pc, #40]	@ (80069f8 <__libc_init_array+0x44>)
 80069ce:	1b64      	subs	r4, r4, r5
 80069d0:	10a4      	asrs	r4, r4, #2
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	080074dc 	.word	0x080074dc
 80069f0:	080074dc 	.word	0x080074dc
 80069f4:	080074dc 	.word	0x080074dc
 80069f8:	080074e0 	.word	0x080074e0

080069fc <__retarget_lock_acquire_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_release_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	4291      	cmp	r1, r2
 8006a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_free_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d040      	beq.n	8006aa6 <_free_r+0x8a>
 8006a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a28:	1f0c      	subs	r4, r1, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfb8      	it	lt
 8006a2e:	18e4      	addlt	r4, r4, r3
 8006a30:	f000 f8de 	bl	8006bf0 <__malloc_lock>
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <_free_r+0x8c>)
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	b933      	cbnz	r3, 8006a48 <_free_r+0x2c>
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	6014      	str	r4, [r2, #0]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a44:	f000 b8da 	b.w	8006bfc <__malloc_unlock>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d908      	bls.n	8006a5e <_free_r+0x42>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf01      	itttt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	1809      	addeq	r1, r1, r0
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	e7ed      	b.n	8006a3a <_free_r+0x1e>
 8006a5e:	461a      	mov	r2, r3
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b10b      	cbz	r3, 8006a68 <_free_r+0x4c>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d9fa      	bls.n	8006a5e <_free_r+0x42>
 8006a68:	6811      	ldr	r1, [r2, #0]
 8006a6a:	1850      	adds	r0, r2, r1
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d10b      	bne.n	8006a88 <_free_r+0x6c>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	4401      	add	r1, r0
 8006a74:	1850      	adds	r0, r2, r1
 8006a76:	4283      	cmp	r3, r0
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	d1e0      	bne.n	8006a3e <_free_r+0x22>
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4408      	add	r0, r1
 8006a82:	6010      	str	r0, [r2, #0]
 8006a84:	6053      	str	r3, [r2, #4]
 8006a86:	e7da      	b.n	8006a3e <_free_r+0x22>
 8006a88:	d902      	bls.n	8006a90 <_free_r+0x74>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	e7d6      	b.n	8006a3e <_free_r+0x22>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	1821      	adds	r1, r4, r0
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf01      	itttt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	1809      	addeq	r1, r1, r0
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	6054      	str	r4, [r2, #4]
 8006aa4:	e7cb      	b.n	8006a3e <_free_r+0x22>
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20001428 	.word	0x20001428

08006aac <sbrk_aligned>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	4e0f      	ldr	r6, [pc, #60]	@ (8006aec <sbrk_aligned+0x40>)
 8006ab0:	460c      	mov	r4, r1
 8006ab2:	6831      	ldr	r1, [r6, #0]
 8006ab4:	4605      	mov	r5, r0
 8006ab6:	b911      	cbnz	r1, 8006abe <sbrk_aligned+0x12>
 8006ab8:	f000 fbaa 	bl	8007210 <_sbrk_r>
 8006abc:	6030      	str	r0, [r6, #0]
 8006abe:	4621      	mov	r1, r4
 8006ac0:	4628      	mov	r0, r5
 8006ac2:	f000 fba5 	bl	8007210 <_sbrk_r>
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d103      	bne.n	8006ad2 <sbrk_aligned+0x26>
 8006aca:	f04f 34ff 	mov.w	r4, #4294967295
 8006ace:	4620      	mov	r0, r4
 8006ad0:	bd70      	pop	{r4, r5, r6, pc}
 8006ad2:	1cc4      	adds	r4, r0, #3
 8006ad4:	f024 0403 	bic.w	r4, r4, #3
 8006ad8:	42a0      	cmp	r0, r4
 8006ada:	d0f8      	beq.n	8006ace <sbrk_aligned+0x22>
 8006adc:	1a21      	subs	r1, r4, r0
 8006ade:	4628      	mov	r0, r5
 8006ae0:	f000 fb96 	bl	8007210 <_sbrk_r>
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d1f2      	bne.n	8006ace <sbrk_aligned+0x22>
 8006ae8:	e7ef      	b.n	8006aca <sbrk_aligned+0x1e>
 8006aea:	bf00      	nop
 8006aec:	20001424 	.word	0x20001424

08006af0 <_malloc_r>:
 8006af0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006af4:	1ccd      	adds	r5, r1, #3
 8006af6:	f025 0503 	bic.w	r5, r5, #3
 8006afa:	3508      	adds	r5, #8
 8006afc:	2d0c      	cmp	r5, #12
 8006afe:	bf38      	it	cc
 8006b00:	250c      	movcc	r5, #12
 8006b02:	2d00      	cmp	r5, #0
 8006b04:	4606      	mov	r6, r0
 8006b06:	db01      	blt.n	8006b0c <_malloc_r+0x1c>
 8006b08:	42a9      	cmp	r1, r5
 8006b0a:	d904      	bls.n	8006b16 <_malloc_r+0x26>
 8006b0c:	230c      	movs	r3, #12
 8006b0e:	6033      	str	r3, [r6, #0]
 8006b10:	2000      	movs	r0, #0
 8006b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bec <_malloc_r+0xfc>
 8006b1a:	f000 f869 	bl	8006bf0 <__malloc_lock>
 8006b1e:	f8d8 3000 	ldr.w	r3, [r8]
 8006b22:	461c      	mov	r4, r3
 8006b24:	bb44      	cbnz	r4, 8006b78 <_malloc_r+0x88>
 8006b26:	4629      	mov	r1, r5
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7ff ffbf 	bl	8006aac <sbrk_aligned>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	4604      	mov	r4, r0
 8006b32:	d158      	bne.n	8006be6 <_malloc_r+0xf6>
 8006b34:	f8d8 4000 	ldr.w	r4, [r8]
 8006b38:	4627      	mov	r7, r4
 8006b3a:	2f00      	cmp	r7, #0
 8006b3c:	d143      	bne.n	8006bc6 <_malloc_r+0xd6>
 8006b3e:	2c00      	cmp	r4, #0
 8006b40:	d04b      	beq.n	8006bda <_malloc_r+0xea>
 8006b42:	6823      	ldr	r3, [r4, #0]
 8006b44:	4639      	mov	r1, r7
 8006b46:	4630      	mov	r0, r6
 8006b48:	eb04 0903 	add.w	r9, r4, r3
 8006b4c:	f000 fb60 	bl	8007210 <_sbrk_r>
 8006b50:	4581      	cmp	r9, r0
 8006b52:	d142      	bne.n	8006bda <_malloc_r+0xea>
 8006b54:	6821      	ldr	r1, [r4, #0]
 8006b56:	4630      	mov	r0, r6
 8006b58:	1a6d      	subs	r5, r5, r1
 8006b5a:	4629      	mov	r1, r5
 8006b5c:	f7ff ffa6 	bl	8006aac <sbrk_aligned>
 8006b60:	3001      	adds	r0, #1
 8006b62:	d03a      	beq.n	8006bda <_malloc_r+0xea>
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	442b      	add	r3, r5
 8006b68:	6023      	str	r3, [r4, #0]
 8006b6a:	f8d8 3000 	ldr.w	r3, [r8]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	bb62      	cbnz	r2, 8006bcc <_malloc_r+0xdc>
 8006b72:	f8c8 7000 	str.w	r7, [r8]
 8006b76:	e00f      	b.n	8006b98 <_malloc_r+0xa8>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	1b52      	subs	r2, r2, r5
 8006b7c:	d420      	bmi.n	8006bc0 <_malloc_r+0xd0>
 8006b7e:	2a0b      	cmp	r2, #11
 8006b80:	d917      	bls.n	8006bb2 <_malloc_r+0xc2>
 8006b82:	1961      	adds	r1, r4, r5
 8006b84:	42a3      	cmp	r3, r4
 8006b86:	6025      	str	r5, [r4, #0]
 8006b88:	bf18      	it	ne
 8006b8a:	6059      	strne	r1, [r3, #4]
 8006b8c:	6863      	ldr	r3, [r4, #4]
 8006b8e:	bf08      	it	eq
 8006b90:	f8c8 1000 	streq.w	r1, [r8]
 8006b94:	5162      	str	r2, [r4, r5]
 8006b96:	604b      	str	r3, [r1, #4]
 8006b98:	4630      	mov	r0, r6
 8006b9a:	f000 f82f 	bl	8006bfc <__malloc_unlock>
 8006b9e:	f104 000b 	add.w	r0, r4, #11
 8006ba2:	1d23      	adds	r3, r4, #4
 8006ba4:	f020 0007 	bic.w	r0, r0, #7
 8006ba8:	1ac2      	subs	r2, r0, r3
 8006baa:	bf1c      	itt	ne
 8006bac:	1a1b      	subne	r3, r3, r0
 8006bae:	50a3      	strne	r3, [r4, r2]
 8006bb0:	e7af      	b.n	8006b12 <_malloc_r+0x22>
 8006bb2:	6862      	ldr	r2, [r4, #4]
 8006bb4:	42a3      	cmp	r3, r4
 8006bb6:	bf0c      	ite	eq
 8006bb8:	f8c8 2000 	streq.w	r2, [r8]
 8006bbc:	605a      	strne	r2, [r3, #4]
 8006bbe:	e7eb      	b.n	8006b98 <_malloc_r+0xa8>
 8006bc0:	4623      	mov	r3, r4
 8006bc2:	6864      	ldr	r4, [r4, #4]
 8006bc4:	e7ae      	b.n	8006b24 <_malloc_r+0x34>
 8006bc6:	463c      	mov	r4, r7
 8006bc8:	687f      	ldr	r7, [r7, #4]
 8006bca:	e7b6      	b.n	8006b3a <_malloc_r+0x4a>
 8006bcc:	461a      	mov	r2, r3
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	42a3      	cmp	r3, r4
 8006bd2:	d1fb      	bne.n	8006bcc <_malloc_r+0xdc>
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	6053      	str	r3, [r2, #4]
 8006bd8:	e7de      	b.n	8006b98 <_malloc_r+0xa8>
 8006bda:	230c      	movs	r3, #12
 8006bdc:	4630      	mov	r0, r6
 8006bde:	6033      	str	r3, [r6, #0]
 8006be0:	f000 f80c 	bl	8006bfc <__malloc_unlock>
 8006be4:	e794      	b.n	8006b10 <_malloc_r+0x20>
 8006be6:	6005      	str	r5, [r0, #0]
 8006be8:	e7d6      	b.n	8006b98 <_malloc_r+0xa8>
 8006bea:	bf00      	nop
 8006bec:	20001428 	.word	0x20001428

08006bf0 <__malloc_lock>:
 8006bf0:	4801      	ldr	r0, [pc, #4]	@ (8006bf8 <__malloc_lock+0x8>)
 8006bf2:	f7ff bf03 	b.w	80069fc <__retarget_lock_acquire_recursive>
 8006bf6:	bf00      	nop
 8006bf8:	20001420 	.word	0x20001420

08006bfc <__malloc_unlock>:
 8006bfc:	4801      	ldr	r0, [pc, #4]	@ (8006c04 <__malloc_unlock+0x8>)
 8006bfe:	f7ff befe 	b.w	80069fe <__retarget_lock_release_recursive>
 8006c02:	bf00      	nop
 8006c04:	20001420 	.word	0x20001420

08006c08 <__ssputs_r>:
 8006c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c0c:	461f      	mov	r7, r3
 8006c0e:	688e      	ldr	r6, [r1, #8]
 8006c10:	4682      	mov	sl, r0
 8006c12:	42be      	cmp	r6, r7
 8006c14:	460c      	mov	r4, r1
 8006c16:	4690      	mov	r8, r2
 8006c18:	680b      	ldr	r3, [r1, #0]
 8006c1a:	d82d      	bhi.n	8006c78 <__ssputs_r+0x70>
 8006c1c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c20:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c24:	d026      	beq.n	8006c74 <__ssputs_r+0x6c>
 8006c26:	6965      	ldr	r5, [r4, #20]
 8006c28:	6909      	ldr	r1, [r1, #16]
 8006c2a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c2e:	eba3 0901 	sub.w	r9, r3, r1
 8006c32:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c36:	1c7b      	adds	r3, r7, #1
 8006c38:	444b      	add	r3, r9
 8006c3a:	106d      	asrs	r5, r5, #1
 8006c3c:	429d      	cmp	r5, r3
 8006c3e:	bf38      	it	cc
 8006c40:	461d      	movcc	r5, r3
 8006c42:	0553      	lsls	r3, r2, #21
 8006c44:	d527      	bpl.n	8006c96 <__ssputs_r+0x8e>
 8006c46:	4629      	mov	r1, r5
 8006c48:	f7ff ff52 	bl	8006af0 <_malloc_r>
 8006c4c:	4606      	mov	r6, r0
 8006c4e:	b360      	cbz	r0, 8006caa <__ssputs_r+0xa2>
 8006c50:	464a      	mov	r2, r9
 8006c52:	6921      	ldr	r1, [r4, #16]
 8006c54:	f7ff fed4 	bl	8006a00 <memcpy>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	6126      	str	r6, [r4, #16]
 8006c66:	444e      	add	r6, r9
 8006c68:	6026      	str	r6, [r4, #0]
 8006c6a:	463e      	mov	r6, r7
 8006c6c:	6165      	str	r5, [r4, #20]
 8006c6e:	eba5 0509 	sub.w	r5, r5, r9
 8006c72:	60a5      	str	r5, [r4, #8]
 8006c74:	42be      	cmp	r6, r7
 8006c76:	d900      	bls.n	8006c7a <__ssputs_r+0x72>
 8006c78:	463e      	mov	r6, r7
 8006c7a:	4632      	mov	r2, r6
 8006c7c:	4641      	mov	r1, r8
 8006c7e:	6820      	ldr	r0, [r4, #0]
 8006c80:	f000 faac 	bl	80071dc <memmove>
 8006c84:	2000      	movs	r0, #0
 8006c86:	68a3      	ldr	r3, [r4, #8]
 8006c88:	1b9b      	subs	r3, r3, r6
 8006c8a:	60a3      	str	r3, [r4, #8]
 8006c8c:	6823      	ldr	r3, [r4, #0]
 8006c8e:	4433      	add	r3, r6
 8006c90:	6023      	str	r3, [r4, #0]
 8006c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c96:	462a      	mov	r2, r5
 8006c98:	f000 fad8 	bl	800724c <_realloc_r>
 8006c9c:	4606      	mov	r6, r0
 8006c9e:	2800      	cmp	r0, #0
 8006ca0:	d1e0      	bne.n	8006c64 <__ssputs_r+0x5c>
 8006ca2:	4650      	mov	r0, sl
 8006ca4:	6921      	ldr	r1, [r4, #16]
 8006ca6:	f7ff feb9 	bl	8006a1c <_free_r>
 8006caa:	230c      	movs	r3, #12
 8006cac:	f8ca 3000 	str.w	r3, [sl]
 8006cb0:	89a3      	ldrh	r3, [r4, #12]
 8006cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	e7e9      	b.n	8006c92 <__ssputs_r+0x8a>
	...

08006cc0 <_svfiprintf_r>:
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	4698      	mov	r8, r3
 8006cc6:	898b      	ldrh	r3, [r1, #12]
 8006cc8:	4607      	mov	r7, r0
 8006cca:	061b      	lsls	r3, r3, #24
 8006ccc:	460d      	mov	r5, r1
 8006cce:	4614      	mov	r4, r2
 8006cd0:	b09d      	sub	sp, #116	@ 0x74
 8006cd2:	d510      	bpl.n	8006cf6 <_svfiprintf_r+0x36>
 8006cd4:	690b      	ldr	r3, [r1, #16]
 8006cd6:	b973      	cbnz	r3, 8006cf6 <_svfiprintf_r+0x36>
 8006cd8:	2140      	movs	r1, #64	@ 0x40
 8006cda:	f7ff ff09 	bl	8006af0 <_malloc_r>
 8006cde:	6028      	str	r0, [r5, #0]
 8006ce0:	6128      	str	r0, [r5, #16]
 8006ce2:	b930      	cbnz	r0, 8006cf2 <_svfiprintf_r+0x32>
 8006ce4:	230c      	movs	r3, #12
 8006ce6:	603b      	str	r3, [r7, #0]
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cec:	b01d      	add	sp, #116	@ 0x74
 8006cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cf2:	2340      	movs	r3, #64	@ 0x40
 8006cf4:	616b      	str	r3, [r5, #20]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cfa:	2320      	movs	r3, #32
 8006cfc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d00:	2330      	movs	r3, #48	@ 0x30
 8006d02:	f04f 0901 	mov.w	r9, #1
 8006d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d0a:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8006ea4 <_svfiprintf_r+0x1e4>
 8006d0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d12:	4623      	mov	r3, r4
 8006d14:	469a      	mov	sl, r3
 8006d16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d1a:	b10a      	cbz	r2, 8006d20 <_svfiprintf_r+0x60>
 8006d1c:	2a25      	cmp	r2, #37	@ 0x25
 8006d1e:	d1f9      	bne.n	8006d14 <_svfiprintf_r+0x54>
 8006d20:	ebba 0b04 	subs.w	fp, sl, r4
 8006d24:	d00b      	beq.n	8006d3e <_svfiprintf_r+0x7e>
 8006d26:	465b      	mov	r3, fp
 8006d28:	4622      	mov	r2, r4
 8006d2a:	4629      	mov	r1, r5
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	f7ff ff6b 	bl	8006c08 <__ssputs_r>
 8006d32:	3001      	adds	r0, #1
 8006d34:	f000 80a7 	beq.w	8006e86 <_svfiprintf_r+0x1c6>
 8006d38:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d3a:	445a      	add	r2, fp
 8006d3c:	9209      	str	r2, [sp, #36]	@ 0x24
 8006d3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	f000 809f 	beq.w	8006e86 <_svfiprintf_r+0x1c6>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d52:	f10a 0a01 	add.w	sl, sl, #1
 8006d56:	9304      	str	r3, [sp, #16]
 8006d58:	9307      	str	r3, [sp, #28]
 8006d5a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006d5e:	931a      	str	r3, [sp, #104]	@ 0x68
 8006d60:	4654      	mov	r4, sl
 8006d62:	2205      	movs	r2, #5
 8006d64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d68:	484e      	ldr	r0, [pc, #312]	@ (8006ea4 <_svfiprintf_r+0x1e4>)
 8006d6a:	f000 fa61 	bl	8007230 <memchr>
 8006d6e:	9a04      	ldr	r2, [sp, #16]
 8006d70:	b9d8      	cbnz	r0, 8006daa <_svfiprintf_r+0xea>
 8006d72:	06d0      	lsls	r0, r2, #27
 8006d74:	bf44      	itt	mi
 8006d76:	2320      	movmi	r3, #32
 8006d78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d7c:	0711      	lsls	r1, r2, #28
 8006d7e:	bf44      	itt	mi
 8006d80:	232b      	movmi	r3, #43	@ 0x2b
 8006d82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d86:	f89a 3000 	ldrb.w	r3, [sl]
 8006d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d8c:	d015      	beq.n	8006dba <_svfiprintf_r+0xfa>
 8006d8e:	4654      	mov	r4, sl
 8006d90:	2000      	movs	r0, #0
 8006d92:	f04f 0c0a 	mov.w	ip, #10
 8006d96:	9a07      	ldr	r2, [sp, #28]
 8006d98:	4621      	mov	r1, r4
 8006d9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d9e:	3b30      	subs	r3, #48	@ 0x30
 8006da0:	2b09      	cmp	r3, #9
 8006da2:	d94b      	bls.n	8006e3c <_svfiprintf_r+0x17c>
 8006da4:	b1b0      	cbz	r0, 8006dd4 <_svfiprintf_r+0x114>
 8006da6:	9207      	str	r2, [sp, #28]
 8006da8:	e014      	b.n	8006dd4 <_svfiprintf_r+0x114>
 8006daa:	eba0 0308 	sub.w	r3, r0, r8
 8006dae:	fa09 f303 	lsl.w	r3, r9, r3
 8006db2:	4313      	orrs	r3, r2
 8006db4:	46a2      	mov	sl, r4
 8006db6:	9304      	str	r3, [sp, #16]
 8006db8:	e7d2      	b.n	8006d60 <_svfiprintf_r+0xa0>
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	1d19      	adds	r1, r3, #4
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	9103      	str	r1, [sp, #12]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfbb      	ittet	lt
 8006dc6:	425b      	neglt	r3, r3
 8006dc8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dcc:	9307      	strge	r3, [sp, #28]
 8006dce:	9307      	strlt	r3, [sp, #28]
 8006dd0:	bfb8      	it	lt
 8006dd2:	9204      	strlt	r2, [sp, #16]
 8006dd4:	7823      	ldrb	r3, [r4, #0]
 8006dd6:	2b2e      	cmp	r3, #46	@ 0x2e
 8006dd8:	d10a      	bne.n	8006df0 <_svfiprintf_r+0x130>
 8006dda:	7863      	ldrb	r3, [r4, #1]
 8006ddc:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dde:	d132      	bne.n	8006e46 <_svfiprintf_r+0x186>
 8006de0:	9b03      	ldr	r3, [sp, #12]
 8006de2:	3402      	adds	r4, #2
 8006de4:	1d1a      	adds	r2, r3, #4
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	9203      	str	r2, [sp, #12]
 8006dea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006dee:	9305      	str	r3, [sp, #20]
 8006df0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006ea8 <_svfiprintf_r+0x1e8>
 8006df4:	2203      	movs	r2, #3
 8006df6:	4650      	mov	r0, sl
 8006df8:	7821      	ldrb	r1, [r4, #0]
 8006dfa:	f000 fa19 	bl	8007230 <memchr>
 8006dfe:	b138      	cbz	r0, 8006e10 <_svfiprintf_r+0x150>
 8006e00:	2240      	movs	r2, #64	@ 0x40
 8006e02:	9b04      	ldr	r3, [sp, #16]
 8006e04:	eba0 000a 	sub.w	r0, r0, sl
 8006e08:	4082      	lsls	r2, r0
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	3401      	adds	r4, #1
 8006e0e:	9304      	str	r3, [sp, #16]
 8006e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e14:	2206      	movs	r2, #6
 8006e16:	4825      	ldr	r0, [pc, #148]	@ (8006eac <_svfiprintf_r+0x1ec>)
 8006e18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e1c:	f000 fa08 	bl	8007230 <memchr>
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d036      	beq.n	8006e92 <_svfiprintf_r+0x1d2>
 8006e24:	4b22      	ldr	r3, [pc, #136]	@ (8006eb0 <_svfiprintf_r+0x1f0>)
 8006e26:	bb1b      	cbnz	r3, 8006e70 <_svfiprintf_r+0x1b0>
 8006e28:	9b03      	ldr	r3, [sp, #12]
 8006e2a:	3307      	adds	r3, #7
 8006e2c:	f023 0307 	bic.w	r3, r3, #7
 8006e30:	3308      	adds	r3, #8
 8006e32:	9303      	str	r3, [sp, #12]
 8006e34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e36:	4433      	add	r3, r6
 8006e38:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e3a:	e76a      	b.n	8006d12 <_svfiprintf_r+0x52>
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	2001      	movs	r0, #1
 8006e40:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e44:	e7a8      	b.n	8006d98 <_svfiprintf_r+0xd8>
 8006e46:	2300      	movs	r3, #0
 8006e48:	f04f 0c0a 	mov.w	ip, #10
 8006e4c:	4619      	mov	r1, r3
 8006e4e:	3401      	adds	r4, #1
 8006e50:	9305      	str	r3, [sp, #20]
 8006e52:	4620      	mov	r0, r4
 8006e54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e58:	3a30      	subs	r2, #48	@ 0x30
 8006e5a:	2a09      	cmp	r2, #9
 8006e5c:	d903      	bls.n	8006e66 <_svfiprintf_r+0x1a6>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d0c6      	beq.n	8006df0 <_svfiprintf_r+0x130>
 8006e62:	9105      	str	r1, [sp, #20]
 8006e64:	e7c4      	b.n	8006df0 <_svfiprintf_r+0x130>
 8006e66:	4604      	mov	r4, r0
 8006e68:	2301      	movs	r3, #1
 8006e6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e6e:	e7f0      	b.n	8006e52 <_svfiprintf_r+0x192>
 8006e70:	ab03      	add	r3, sp, #12
 8006e72:	9300      	str	r3, [sp, #0]
 8006e74:	462a      	mov	r2, r5
 8006e76:	4638      	mov	r0, r7
 8006e78:	4b0e      	ldr	r3, [pc, #56]	@ (8006eb4 <_svfiprintf_r+0x1f4>)
 8006e7a:	a904      	add	r1, sp, #16
 8006e7c:	f3af 8000 	nop.w
 8006e80:	1c42      	adds	r2, r0, #1
 8006e82:	4606      	mov	r6, r0
 8006e84:	d1d6      	bne.n	8006e34 <_svfiprintf_r+0x174>
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	065b      	lsls	r3, r3, #25
 8006e8a:	f53f af2d 	bmi.w	8006ce8 <_svfiprintf_r+0x28>
 8006e8e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e90:	e72c      	b.n	8006cec <_svfiprintf_r+0x2c>
 8006e92:	ab03      	add	r3, sp, #12
 8006e94:	9300      	str	r3, [sp, #0]
 8006e96:	462a      	mov	r2, r5
 8006e98:	4638      	mov	r0, r7
 8006e9a:	4b06      	ldr	r3, [pc, #24]	@ (8006eb4 <_svfiprintf_r+0x1f4>)
 8006e9c:	a904      	add	r1, sp, #16
 8006e9e:	f000 f87d 	bl	8006f9c <_printf_i>
 8006ea2:	e7ed      	b.n	8006e80 <_svfiprintf_r+0x1c0>
 8006ea4:	0800749f 	.word	0x0800749f
 8006ea8:	080074a5 	.word	0x080074a5
 8006eac:	080074a9 	.word	0x080074a9
 8006eb0:	00000000 	.word	0x00000000
 8006eb4:	08006c09 	.word	0x08006c09

08006eb8 <_printf_common>:
 8006eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ebc:	4616      	mov	r6, r2
 8006ebe:	4698      	mov	r8, r3
 8006ec0:	688a      	ldr	r2, [r1, #8]
 8006ec2:	690b      	ldr	r3, [r1, #16]
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	bfb8      	it	lt
 8006eca:	4613      	movlt	r3, r2
 8006ecc:	6033      	str	r3, [r6, #0]
 8006ece:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ed8:	b10a      	cbz	r2, 8006ede <_printf_common+0x26>
 8006eda:	3301      	adds	r3, #1
 8006edc:	6033      	str	r3, [r6, #0]
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	0699      	lsls	r1, r3, #26
 8006ee2:	bf42      	ittt	mi
 8006ee4:	6833      	ldrmi	r3, [r6, #0]
 8006ee6:	3302      	addmi	r3, #2
 8006ee8:	6033      	strmi	r3, [r6, #0]
 8006eea:	6825      	ldr	r5, [r4, #0]
 8006eec:	f015 0506 	ands.w	r5, r5, #6
 8006ef0:	d106      	bne.n	8006f00 <_printf_common+0x48>
 8006ef2:	f104 0a19 	add.w	sl, r4, #25
 8006ef6:	68e3      	ldr	r3, [r4, #12]
 8006ef8:	6832      	ldr	r2, [r6, #0]
 8006efa:	1a9b      	subs	r3, r3, r2
 8006efc:	42ab      	cmp	r3, r5
 8006efe:	dc2b      	bgt.n	8006f58 <_printf_common+0xa0>
 8006f00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006f04:	6822      	ldr	r2, [r4, #0]
 8006f06:	3b00      	subs	r3, #0
 8006f08:	bf18      	it	ne
 8006f0a:	2301      	movne	r3, #1
 8006f0c:	0692      	lsls	r2, r2, #26
 8006f0e:	d430      	bmi.n	8006f72 <_printf_common+0xba>
 8006f10:	4641      	mov	r1, r8
 8006f12:	4638      	mov	r0, r7
 8006f14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006f18:	47c8      	blx	r9
 8006f1a:	3001      	adds	r0, #1
 8006f1c:	d023      	beq.n	8006f66 <_printf_common+0xae>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	6922      	ldr	r2, [r4, #16]
 8006f22:	f003 0306 	and.w	r3, r3, #6
 8006f26:	2b04      	cmp	r3, #4
 8006f28:	bf14      	ite	ne
 8006f2a:	2500      	movne	r5, #0
 8006f2c:	6833      	ldreq	r3, [r6, #0]
 8006f2e:	f04f 0600 	mov.w	r6, #0
 8006f32:	bf08      	it	eq
 8006f34:	68e5      	ldreq	r5, [r4, #12]
 8006f36:	f104 041a 	add.w	r4, r4, #26
 8006f3a:	bf08      	it	eq
 8006f3c:	1aed      	subeq	r5, r5, r3
 8006f3e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006f42:	bf08      	it	eq
 8006f44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	bfc4      	itt	gt
 8006f4c:	1a9b      	subgt	r3, r3, r2
 8006f4e:	18ed      	addgt	r5, r5, r3
 8006f50:	42b5      	cmp	r5, r6
 8006f52:	d11a      	bne.n	8006f8a <_printf_common+0xd2>
 8006f54:	2000      	movs	r0, #0
 8006f56:	e008      	b.n	8006f6a <_printf_common+0xb2>
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4641      	mov	r1, r8
 8006f5e:	4638      	mov	r0, r7
 8006f60:	47c8      	blx	r9
 8006f62:	3001      	adds	r0, #1
 8006f64:	d103      	bne.n	8006f6e <_printf_common+0xb6>
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295
 8006f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f6e:	3501      	adds	r5, #1
 8006f70:	e7c1      	b.n	8006ef6 <_printf_common+0x3e>
 8006f72:	2030      	movs	r0, #48	@ 0x30
 8006f74:	18e1      	adds	r1, r4, r3
 8006f76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f7a:	1c5a      	adds	r2, r3, #1
 8006f7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f80:	4422      	add	r2, r4
 8006f82:	3302      	adds	r3, #2
 8006f84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f88:	e7c2      	b.n	8006f10 <_printf_common+0x58>
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	4622      	mov	r2, r4
 8006f8e:	4641      	mov	r1, r8
 8006f90:	4638      	mov	r0, r7
 8006f92:	47c8      	blx	r9
 8006f94:	3001      	adds	r0, #1
 8006f96:	d0e6      	beq.n	8006f66 <_printf_common+0xae>
 8006f98:	3601      	adds	r6, #1
 8006f9a:	e7d9      	b.n	8006f50 <_printf_common+0x98>

08006f9c <_printf_i>:
 8006f9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	7e0f      	ldrb	r7, [r1, #24]
 8006fa2:	4691      	mov	r9, r2
 8006fa4:	2f78      	cmp	r7, #120	@ 0x78
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	460c      	mov	r4, r1
 8006faa:	469a      	mov	sl, r3
 8006fac:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006fae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006fb2:	d807      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fb4:	2f62      	cmp	r7, #98	@ 0x62
 8006fb6:	d80a      	bhi.n	8006fce <_printf_i+0x32>
 8006fb8:	2f00      	cmp	r7, #0
 8006fba:	f000 80d3 	beq.w	8007164 <_printf_i+0x1c8>
 8006fbe:	2f58      	cmp	r7, #88	@ 0x58
 8006fc0:	f000 80ba 	beq.w	8007138 <_printf_i+0x19c>
 8006fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006fcc:	e03a      	b.n	8007044 <_printf_i+0xa8>
 8006fce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006fd2:	2b15      	cmp	r3, #21
 8006fd4:	d8f6      	bhi.n	8006fc4 <_printf_i+0x28>
 8006fd6:	a101      	add	r1, pc, #4	@ (adr r1, 8006fdc <_printf_i+0x40>)
 8006fd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006fdc:	08007035 	.word	0x08007035
 8006fe0:	08007049 	.word	0x08007049
 8006fe4:	08006fc5 	.word	0x08006fc5
 8006fe8:	08006fc5 	.word	0x08006fc5
 8006fec:	08006fc5 	.word	0x08006fc5
 8006ff0:	08006fc5 	.word	0x08006fc5
 8006ff4:	08007049 	.word	0x08007049
 8006ff8:	08006fc5 	.word	0x08006fc5
 8006ffc:	08006fc5 	.word	0x08006fc5
 8007000:	08006fc5 	.word	0x08006fc5
 8007004:	08006fc5 	.word	0x08006fc5
 8007008:	0800714b 	.word	0x0800714b
 800700c:	08007073 	.word	0x08007073
 8007010:	08007105 	.word	0x08007105
 8007014:	08006fc5 	.word	0x08006fc5
 8007018:	08006fc5 	.word	0x08006fc5
 800701c:	0800716d 	.word	0x0800716d
 8007020:	08006fc5 	.word	0x08006fc5
 8007024:	08007073 	.word	0x08007073
 8007028:	08006fc5 	.word	0x08006fc5
 800702c:	08006fc5 	.word	0x08006fc5
 8007030:	0800710d 	.word	0x0800710d
 8007034:	6833      	ldr	r3, [r6, #0]
 8007036:	1d1a      	adds	r2, r3, #4
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	6032      	str	r2, [r6, #0]
 800703c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007040:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007044:	2301      	movs	r3, #1
 8007046:	e09e      	b.n	8007186 <_printf_i+0x1ea>
 8007048:	6833      	ldr	r3, [r6, #0]
 800704a:	6820      	ldr	r0, [r4, #0]
 800704c:	1d19      	adds	r1, r3, #4
 800704e:	6031      	str	r1, [r6, #0]
 8007050:	0606      	lsls	r6, r0, #24
 8007052:	d501      	bpl.n	8007058 <_printf_i+0xbc>
 8007054:	681d      	ldr	r5, [r3, #0]
 8007056:	e003      	b.n	8007060 <_printf_i+0xc4>
 8007058:	0645      	lsls	r5, r0, #25
 800705a:	d5fb      	bpl.n	8007054 <_printf_i+0xb8>
 800705c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007060:	2d00      	cmp	r5, #0
 8007062:	da03      	bge.n	800706c <_printf_i+0xd0>
 8007064:	232d      	movs	r3, #45	@ 0x2d
 8007066:	426d      	negs	r5, r5
 8007068:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800706c:	230a      	movs	r3, #10
 800706e:	4859      	ldr	r0, [pc, #356]	@ (80071d4 <_printf_i+0x238>)
 8007070:	e011      	b.n	8007096 <_printf_i+0xfa>
 8007072:	6821      	ldr	r1, [r4, #0]
 8007074:	6833      	ldr	r3, [r6, #0]
 8007076:	0608      	lsls	r0, r1, #24
 8007078:	f853 5b04 	ldr.w	r5, [r3], #4
 800707c:	d402      	bmi.n	8007084 <_printf_i+0xe8>
 800707e:	0649      	lsls	r1, r1, #25
 8007080:	bf48      	it	mi
 8007082:	b2ad      	uxthmi	r5, r5
 8007084:	2f6f      	cmp	r7, #111	@ 0x6f
 8007086:	6033      	str	r3, [r6, #0]
 8007088:	bf14      	ite	ne
 800708a:	230a      	movne	r3, #10
 800708c:	2308      	moveq	r3, #8
 800708e:	4851      	ldr	r0, [pc, #324]	@ (80071d4 <_printf_i+0x238>)
 8007090:	2100      	movs	r1, #0
 8007092:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007096:	6866      	ldr	r6, [r4, #4]
 8007098:	2e00      	cmp	r6, #0
 800709a:	bfa8      	it	ge
 800709c:	6821      	ldrge	r1, [r4, #0]
 800709e:	60a6      	str	r6, [r4, #8]
 80070a0:	bfa4      	itt	ge
 80070a2:	f021 0104 	bicge.w	r1, r1, #4
 80070a6:	6021      	strge	r1, [r4, #0]
 80070a8:	b90d      	cbnz	r5, 80070ae <_printf_i+0x112>
 80070aa:	2e00      	cmp	r6, #0
 80070ac:	d04b      	beq.n	8007146 <_printf_i+0x1aa>
 80070ae:	4616      	mov	r6, r2
 80070b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80070b4:	fb03 5711 	mls	r7, r3, r1, r5
 80070b8:	5dc7      	ldrb	r7, [r0, r7]
 80070ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80070be:	462f      	mov	r7, r5
 80070c0:	42bb      	cmp	r3, r7
 80070c2:	460d      	mov	r5, r1
 80070c4:	d9f4      	bls.n	80070b0 <_printf_i+0x114>
 80070c6:	2b08      	cmp	r3, #8
 80070c8:	d10b      	bne.n	80070e2 <_printf_i+0x146>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	07df      	lsls	r7, r3, #31
 80070ce:	d508      	bpl.n	80070e2 <_printf_i+0x146>
 80070d0:	6923      	ldr	r3, [r4, #16]
 80070d2:	6861      	ldr	r1, [r4, #4]
 80070d4:	4299      	cmp	r1, r3
 80070d6:	bfde      	ittt	le
 80070d8:	2330      	movle	r3, #48	@ 0x30
 80070da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80070de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80070e2:	1b92      	subs	r2, r2, r6
 80070e4:	6122      	str	r2, [r4, #16]
 80070e6:	464b      	mov	r3, r9
 80070e8:	4621      	mov	r1, r4
 80070ea:	4640      	mov	r0, r8
 80070ec:	f8cd a000 	str.w	sl, [sp]
 80070f0:	aa03      	add	r2, sp, #12
 80070f2:	f7ff fee1 	bl	8006eb8 <_printf_common>
 80070f6:	3001      	adds	r0, #1
 80070f8:	d14a      	bne.n	8007190 <_printf_i+0x1f4>
 80070fa:	f04f 30ff 	mov.w	r0, #4294967295
 80070fe:	b004      	add	sp, #16
 8007100:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	f043 0320 	orr.w	r3, r3, #32
 800710a:	6023      	str	r3, [r4, #0]
 800710c:	2778      	movs	r7, #120	@ 0x78
 800710e:	4832      	ldr	r0, [pc, #200]	@ (80071d8 <_printf_i+0x23c>)
 8007110:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	6831      	ldr	r1, [r6, #0]
 8007118:	061f      	lsls	r7, r3, #24
 800711a:	f851 5b04 	ldr.w	r5, [r1], #4
 800711e:	d402      	bmi.n	8007126 <_printf_i+0x18a>
 8007120:	065f      	lsls	r7, r3, #25
 8007122:	bf48      	it	mi
 8007124:	b2ad      	uxthmi	r5, r5
 8007126:	6031      	str	r1, [r6, #0]
 8007128:	07d9      	lsls	r1, r3, #31
 800712a:	bf44      	itt	mi
 800712c:	f043 0320 	orrmi.w	r3, r3, #32
 8007130:	6023      	strmi	r3, [r4, #0]
 8007132:	b11d      	cbz	r5, 800713c <_printf_i+0x1a0>
 8007134:	2310      	movs	r3, #16
 8007136:	e7ab      	b.n	8007090 <_printf_i+0xf4>
 8007138:	4826      	ldr	r0, [pc, #152]	@ (80071d4 <_printf_i+0x238>)
 800713a:	e7e9      	b.n	8007110 <_printf_i+0x174>
 800713c:	6823      	ldr	r3, [r4, #0]
 800713e:	f023 0320 	bic.w	r3, r3, #32
 8007142:	6023      	str	r3, [r4, #0]
 8007144:	e7f6      	b.n	8007134 <_printf_i+0x198>
 8007146:	4616      	mov	r6, r2
 8007148:	e7bd      	b.n	80070c6 <_printf_i+0x12a>
 800714a:	6833      	ldr	r3, [r6, #0]
 800714c:	6825      	ldr	r5, [r4, #0]
 800714e:	1d18      	adds	r0, r3, #4
 8007150:	6961      	ldr	r1, [r4, #20]
 8007152:	6030      	str	r0, [r6, #0]
 8007154:	062e      	lsls	r6, r5, #24
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	d501      	bpl.n	800715e <_printf_i+0x1c2>
 800715a:	6019      	str	r1, [r3, #0]
 800715c:	e002      	b.n	8007164 <_printf_i+0x1c8>
 800715e:	0668      	lsls	r0, r5, #25
 8007160:	d5fb      	bpl.n	800715a <_printf_i+0x1be>
 8007162:	8019      	strh	r1, [r3, #0]
 8007164:	2300      	movs	r3, #0
 8007166:	4616      	mov	r6, r2
 8007168:	6123      	str	r3, [r4, #16]
 800716a:	e7bc      	b.n	80070e6 <_printf_i+0x14a>
 800716c:	6833      	ldr	r3, [r6, #0]
 800716e:	2100      	movs	r1, #0
 8007170:	1d1a      	adds	r2, r3, #4
 8007172:	6032      	str	r2, [r6, #0]
 8007174:	681e      	ldr	r6, [r3, #0]
 8007176:	6862      	ldr	r2, [r4, #4]
 8007178:	4630      	mov	r0, r6
 800717a:	f000 f859 	bl	8007230 <memchr>
 800717e:	b108      	cbz	r0, 8007184 <_printf_i+0x1e8>
 8007180:	1b80      	subs	r0, r0, r6
 8007182:	6060      	str	r0, [r4, #4]
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	6123      	str	r3, [r4, #16]
 8007188:	2300      	movs	r3, #0
 800718a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800718e:	e7aa      	b.n	80070e6 <_printf_i+0x14a>
 8007190:	4632      	mov	r2, r6
 8007192:	4649      	mov	r1, r9
 8007194:	4640      	mov	r0, r8
 8007196:	6923      	ldr	r3, [r4, #16]
 8007198:	47d0      	blx	sl
 800719a:	3001      	adds	r0, #1
 800719c:	d0ad      	beq.n	80070fa <_printf_i+0x15e>
 800719e:	6823      	ldr	r3, [r4, #0]
 80071a0:	079b      	lsls	r3, r3, #30
 80071a2:	d413      	bmi.n	80071cc <_printf_i+0x230>
 80071a4:	68e0      	ldr	r0, [r4, #12]
 80071a6:	9b03      	ldr	r3, [sp, #12]
 80071a8:	4298      	cmp	r0, r3
 80071aa:	bfb8      	it	lt
 80071ac:	4618      	movlt	r0, r3
 80071ae:	e7a6      	b.n	80070fe <_printf_i+0x162>
 80071b0:	2301      	movs	r3, #1
 80071b2:	4632      	mov	r2, r6
 80071b4:	4649      	mov	r1, r9
 80071b6:	4640      	mov	r0, r8
 80071b8:	47d0      	blx	sl
 80071ba:	3001      	adds	r0, #1
 80071bc:	d09d      	beq.n	80070fa <_printf_i+0x15e>
 80071be:	3501      	adds	r5, #1
 80071c0:	68e3      	ldr	r3, [r4, #12]
 80071c2:	9903      	ldr	r1, [sp, #12]
 80071c4:	1a5b      	subs	r3, r3, r1
 80071c6:	42ab      	cmp	r3, r5
 80071c8:	dcf2      	bgt.n	80071b0 <_printf_i+0x214>
 80071ca:	e7eb      	b.n	80071a4 <_printf_i+0x208>
 80071cc:	2500      	movs	r5, #0
 80071ce:	f104 0619 	add.w	r6, r4, #25
 80071d2:	e7f5      	b.n	80071c0 <_printf_i+0x224>
 80071d4:	080074b0 	.word	0x080074b0
 80071d8:	080074c1 	.word	0x080074c1

080071dc <memmove>:
 80071dc:	4288      	cmp	r0, r1
 80071de:	b510      	push	{r4, lr}
 80071e0:	eb01 0402 	add.w	r4, r1, r2
 80071e4:	d902      	bls.n	80071ec <memmove+0x10>
 80071e6:	4284      	cmp	r4, r0
 80071e8:	4623      	mov	r3, r4
 80071ea:	d807      	bhi.n	80071fc <memmove+0x20>
 80071ec:	1e43      	subs	r3, r0, #1
 80071ee:	42a1      	cmp	r1, r4
 80071f0:	d008      	beq.n	8007204 <memmove+0x28>
 80071f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071fa:	e7f8      	b.n	80071ee <memmove+0x12>
 80071fc:	4601      	mov	r1, r0
 80071fe:	4402      	add	r2, r0
 8007200:	428a      	cmp	r2, r1
 8007202:	d100      	bne.n	8007206 <memmove+0x2a>
 8007204:	bd10      	pop	{r4, pc}
 8007206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800720a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800720e:	e7f7      	b.n	8007200 <memmove+0x24>

08007210 <_sbrk_r>:
 8007210:	b538      	push	{r3, r4, r5, lr}
 8007212:	2300      	movs	r3, #0
 8007214:	4d05      	ldr	r5, [pc, #20]	@ (800722c <_sbrk_r+0x1c>)
 8007216:	4604      	mov	r4, r0
 8007218:	4608      	mov	r0, r1
 800721a:	602b      	str	r3, [r5, #0]
 800721c:	f7fa f86a 	bl	80012f4 <_sbrk>
 8007220:	1c43      	adds	r3, r0, #1
 8007222:	d102      	bne.n	800722a <_sbrk_r+0x1a>
 8007224:	682b      	ldr	r3, [r5, #0]
 8007226:	b103      	cbz	r3, 800722a <_sbrk_r+0x1a>
 8007228:	6023      	str	r3, [r4, #0]
 800722a:	bd38      	pop	{r3, r4, r5, pc}
 800722c:	2000141c 	.word	0x2000141c

08007230 <memchr>:
 8007230:	4603      	mov	r3, r0
 8007232:	b510      	push	{r4, lr}
 8007234:	b2c9      	uxtb	r1, r1
 8007236:	4402      	add	r2, r0
 8007238:	4293      	cmp	r3, r2
 800723a:	4618      	mov	r0, r3
 800723c:	d101      	bne.n	8007242 <memchr+0x12>
 800723e:	2000      	movs	r0, #0
 8007240:	e003      	b.n	800724a <memchr+0x1a>
 8007242:	7804      	ldrb	r4, [r0, #0]
 8007244:	3301      	adds	r3, #1
 8007246:	428c      	cmp	r4, r1
 8007248:	d1f6      	bne.n	8007238 <memchr+0x8>
 800724a:	bd10      	pop	{r4, pc}

0800724c <_realloc_r>:
 800724c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007250:	4680      	mov	r8, r0
 8007252:	4615      	mov	r5, r2
 8007254:	460c      	mov	r4, r1
 8007256:	b921      	cbnz	r1, 8007262 <_realloc_r+0x16>
 8007258:	4611      	mov	r1, r2
 800725a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800725e:	f7ff bc47 	b.w	8006af0 <_malloc_r>
 8007262:	b92a      	cbnz	r2, 8007270 <_realloc_r+0x24>
 8007264:	f7ff fbda 	bl	8006a1c <_free_r>
 8007268:	2400      	movs	r4, #0
 800726a:	4620      	mov	r0, r4
 800726c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007270:	f000 f81a 	bl	80072a8 <_malloc_usable_size_r>
 8007274:	4285      	cmp	r5, r0
 8007276:	4606      	mov	r6, r0
 8007278:	d802      	bhi.n	8007280 <_realloc_r+0x34>
 800727a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800727e:	d8f4      	bhi.n	800726a <_realloc_r+0x1e>
 8007280:	4629      	mov	r1, r5
 8007282:	4640      	mov	r0, r8
 8007284:	f7ff fc34 	bl	8006af0 <_malloc_r>
 8007288:	4607      	mov	r7, r0
 800728a:	2800      	cmp	r0, #0
 800728c:	d0ec      	beq.n	8007268 <_realloc_r+0x1c>
 800728e:	42b5      	cmp	r5, r6
 8007290:	462a      	mov	r2, r5
 8007292:	4621      	mov	r1, r4
 8007294:	bf28      	it	cs
 8007296:	4632      	movcs	r2, r6
 8007298:	f7ff fbb2 	bl	8006a00 <memcpy>
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fbbc 	bl	8006a1c <_free_r>
 80072a4:	463c      	mov	r4, r7
 80072a6:	e7e0      	b.n	800726a <_realloc_r+0x1e>

080072a8 <_malloc_usable_size_r>:
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f18      	subs	r0, r3, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfbc      	itt	lt
 80072b2:	580b      	ldrlt	r3, [r1, r0]
 80072b4:	18c0      	addlt	r0, r0, r3
 80072b6:	4770      	bx	lr

080072b8 <_init>:
 80072b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ba:	bf00      	nop
 80072bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072be:	bc08      	pop	{r3}
 80072c0:	469e      	mov	lr, r3
 80072c2:	4770      	bx	lr

080072c4 <_fini>:
 80072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072c6:	bf00      	nop
 80072c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ca:	bc08      	pop	{r3}
 80072cc:	469e      	mov	lr, r3
 80072ce:	4770      	bx	lr
